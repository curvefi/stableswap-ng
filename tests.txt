============================= test session starts ==============================
platform darwin -- Python 3.12.4, pytest-7.4.4, pluggy-1.5.0
rootdir: /Users/michael/Documents/projects/stableswap-ng
configfile: pyproject.toml
plugins: cov-5.0.0, titanoboa-0.1.10, repeat-0.9.3, hypothesis-6.111.1, profiling-1.7.0, forked-1.6.0, xdist-3.6.1
created: 10/10 workers
10 workers [2363 items]

....F.......F.........................................................s.. [  3%]
.......s...............................F................................ [  6%]
.................s...................s.............................F.... [  9%]
......................s.......s....F......s........s..F..s....s......... [ 12%]
..........................F...........................F............s...s. [ 15%]
s.s...s.F.sFsE..s.......F.............F............F.........F...s....s. [ 18%]
.Fs......s....s.s.E...E..s..sE.s...Es..s.....ss.....s....s.F....ss....sF [ 21%]
...s.sE...s.E.Fs..Es...E...Fs.sE...E.s.E..sF...Es..s.F..s....s..s..E..Es [ 24%]
..E.ss..E...sE..s.sE..EF.E.....EF.EF...EE.E.sEF.EF.s.E.s..sE..FEs..s..EF [ 27%]
.F..EF..sF...FE.F...FEs..F.E.F.E.F...F.F...F...F.F...F...F....F..F....F. [ 30%]
.FF..F..F.F.F...FF...F..F.F..F...FF.F.F..F...F..FF.F.F..F....FF.F....F.. [ 33%]
..F...FF.F.F..FF.F.F..FFFF...FFFF....F...F.F.F.F.F..FF...F..FF.FFF.F..FF [ 36%]
..F.FFF.FFF..F.....F.F...F....F...F..F.....F.F..F..F.................... [ 39%]
...........................x.......x.........x...........F......F....... [ 42%]
..F....F..xx...F....FxF.......xF.F....FxF.F..xF.xF....F.FxF......F...F.. [ 45%]
F....F.F..F...FF...F...F.F.....F....FF.......F..FF..x....FFF.x.......F.F [ 48%]
F.x.......FxF..........xF........xF..........xF.........x.F......x...F.. [ 51%]
..Fx......F.x.....x..............................................FF..... [ 54%]
.F..F....F...F........F..........F............F...F..FF..........F...... [ 57%]
..................................................F........F............. [ 60%]
.......................................F.......F.F....F....F.......Fs.F. [ 64%]
.F..sF....F.s........s......sF.....s...F................................. [ 67%]
.............F..........F...F.....F............F.....F...F.....F........ [ 70%]
............F...F.....................F........F.......F................ [ 73%]
...................F....F...F...F......FE......................F........ [ 76%]
..........................F............................................. [ 79%]
........................................................................ [ 82%]
..............................F.....F..F.F...F.F...FF...F.F......FF..... [ 85%]
.FF....FF.F....FF.F.FF...F.F.F..F...F.................................... [ 88%]
........................................................................ [ 91%]
........................................................................ [ 94%]
........................................................................ [ 97%]
.......................F..FFF..F..F.FFFFEFFEFFFF..........               [100%]
==================================== ERRORS ====================================
___________________ ERROR at teardown of test_add_base_pool ____________________
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

    def finalize():
        _task_list.add(task_id)
>       _work_task_list()

../../../pyEnv/crv/lib/python3.12/site-packages/boa/test/plugin.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/test/plugin.py:82: in _work_task_list
    ctx.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/environment.py:159: in anchor
    self.evm.revert(snapshot_id)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/vm/py_evm.py:442: in revert
    self.vm.state.revert(snapshot_id)
../../../pyEnv/crv/lib/python3.12/site-packages/eth/vm/forks/cancun/state.py:181: in revert
    super().revert(snapshot)
../../../pyEnv/crv/lib/python3.12/site-packages/eth/vm/state.py:233: in revert
    self._account_db.discard(account_snapshot)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/vm/fork.py:266: in discard
    super().discard(checkpoint)
../../../pyEnv/crv/lib/python3.12/site-packages/eth/db/account.py:439: in discard
    self._journaldb.discard(checkpoint)
../../../pyEnv/crv/lib/python3.12/site-packages/eth/db/journal.py:435: in discard
    self._journal.discard(checkpoint)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <eth.db.journal.Journal object at 0x12a52e810>
through_checkpoint_id = 6902

    def discard(self, through_checkpoint_id: JournalDBCheckpoint) -> None:
        while self._checkpoint_stack:
            checkpoint_id = self._checkpoint_stack.pop()
            if checkpoint_id == through_checkpoint_id:
                break
        else:
            # checkpoint not found!
>           raise ValidationError(f"No checkpoint {through_checkpoint_id} was found")
E           eth_utils.exceptions.ValidationError: No checkpoint 6902 was found

../../../pyEnv/crv/lib/python3.12/site-packages/eth/db/journal.py:172: ValidationError
_ ERROR at setup of test_set_rewards_no_deposit[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x1fb0aF040B7bbA2A6f69e77DA9C0dCb7785b3A3B')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x88DD242155C50c2b91F288391b4D8d4C93e0552a, compiled with vyper-0.3.10+...0305D9a2D71a1D479E9EE22690Ae7E4, fee_receiver=0xA73d7cddCf77c00827459f986bf828999B58C6Fe, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0xeC0410A1ec934EFaDA3711A3042922Fb7d5c58B3, compiled with vyper-0.3.10+9136169..., ma_last_time=586759430972607439353818029037056844943946363887, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x1fb0aF040B7bbA2A6f69e77DA9C0dCb7785b3A3B')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x88DD242155C50c2b91F288391b4D8d4C93e0552a, compiled with vyper-0.3.10+...0305D9a2D71a1D479E9EE22690Ae7E4, fee_receiver=0xA73d7cddCf77c00827459f986bf828999B58C6Fe, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0xeC0410A1ec934EFaDA3711A3042922Fb7d5c58B3, compiled with vyper-0.3.10+9136169..., ma_last_time=586759430972607439353818029037056844943946363887, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x88DD242155C50c2b91F288391b4D8d4C93e0552a, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x1fb0aF040B7bbA2A6f69e77DA9C0dCb7785b3A3B, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=0, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x78548820b365886d05009F1127bf553603E5A836, gauge_implementation=0xC6Acb7D16D51f72eAA659668F30A40d87E2E0551, views_implementation=0x3d06E92f20305D9a2D71a1D479E9EE22690Ae7E4, fee_receiver=0xA73d7cddCf77c00827459f986bf828999B58C6Fe, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0xeC0410A1ec934EFaDA3711A3042922Fb7d5c58B3, implementation=0xC6Acb7D16D51f72eAA659668F30A40d87E2E0551, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_set_rewards_no_deposit[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x86b036e7228278a7d66AF02AF92d2c1C6b222d8C')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x09671032B8d8D208DBc1779a39c5B38e566211C2, compiled with vyper-0.3.10+...63D55C847E947f19cBb7C80353ca82f, fee_receiver=0xc83e2fD499f30377dB7F17BDf46bF676a6A3A70f, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x553455311071b6034545236fb94cc7a7AC1C3277, compiled with vyper-0.3.10+9136169..., ma_last_time=586759671211958485536373234179529691772303652529, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x86b036e7228278a7d66AF02AF92d2c1C6b222d8C')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x09671032B8d8D208DBc1779a39c5B38e566211C2, compiled with vyper-0.3.10+...63D55C847E947f19cBb7C80353ca82f, fee_receiver=0xc83e2fD499f30377dB7F17BDf46bF676a6A3A70f, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x553455311071b6034545236fb94cc7a7AC1C3277, compiled with vyper-0.3.10+9136169..., ma_last_time=586759671211958485536373234179529691772303652529, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x09671032B8d8D208DBc1779a39c5B38e566211C2, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x86b036e7228278a7d66AF02AF92d2c1C6b222d8C, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=0, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xe5B57E21A519d23f51F3180E48763F2058C066A7, gauge_implementation=0x00b2D4cC18C3dD81460548a7D2697D65d982bb7d, views_implementation=0x837A78F2563D55C847E947f19cBb7C80353ca82f, fee_receiver=0xc83e2fD499f30377dB7F17BDf46bF676a6A3A70f, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x553455311071b6034545236fb94cc7a7AC1C3277, implementation=0x00b2D4cC18C3dD81460548a7D2697D65d982bb7d, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_set_rewards_no_deposit[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x2b6854016A8A22dFebDBAa242f1a012F77876770')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x44ca91f3AA48A04978b92367bF8eadD48db134E7, compiled with vyper-0.3.10+...9D2205b1aF719287A4fF4eCBE1CB4f0, fee_receiver=0xA1B4e8dEa75A8740ccc19D9C6DfC7c7beAAa9A95, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x88bb9DD830271B8938F5Abb95c8E61C5DAF47CDA, compiled with vyper-0.3.10+9136169..., ma_last_time=586759671211958485536373234179529691772303652529, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x2b6854016A8A22dFebDBAa242f1a012F77876770')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x44ca91f3AA48A04978b92367bF8eadD48db134E7, compiled with vyper-0.3.10+...9D2205b1aF719287A4fF4eCBE1CB4f0, fee_receiver=0xA1B4e8dEa75A8740ccc19D9C6DfC7c7beAAa9A95, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x88bb9DD830271B8938F5Abb95c8E61C5DAF47CDA, compiled with vyper-0.3.10+9136169..., ma_last_time=586759671211958485536373234179529691772303652529, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x44ca91f3AA48A04978b92367bF8eadD48db134E7, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x2b6854016A8A22dFebDBAa242f1a012F77876770, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=0, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x4a771E03D69F36683d3e8B482BB787C2149Df07e, gauge_implementation=0xe90803DBd0c54eD1A65A1b7eEe49371958Fe112d, views_implementation=0x326657BED9D2205b1aF719287A4fF4eCBE1CB4f0, fee_receiver=0xA1B4e8dEa75A8740ccc19D9C6DfC7c7beAAa9A95, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x88bb9DD830271B8938F5Abb95c8E61C5DAF47CDA, implementation=0xe90803DBd0c54eD1A65A1b7eEe49371958Fe112d, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_set_rewards_no_deposit[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x14267783EE5AA0354D0142a00BEbDD9bF532B973')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xd6574B7E198a8bf5399cfa4A52Aa7d0E59dc72b8, compiled with vyper-0.3.10+...8D223461E3DFbA32170A15Fa3383ea2, fee_receiver=0x76385e285233cF61C2A1278848017dF2E0450b57, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0xb82209dC9E472e1ac9E4A694dfFb4A341D399Ac4, compiled with vyper-0.3.10+9136169..., ma_last_time=586759671211958485536373234179529691772303652529, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x14267783EE5AA0354D0142a00BEbDD9bF532B973')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xd6574B7E198a8bf5399cfa4A52Aa7d0E59dc72b8, compiled with vyper-0.3.10+...8D223461E3DFbA32170A15Fa3383ea2, fee_receiver=0x76385e285233cF61C2A1278848017dF2E0450b57, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0xb82209dC9E472e1ac9E4A694dfFb4A341D399Ac4, compiled with vyper-0.3.10+9136169..., ma_last_time=586759671211958485536373234179529691772303652529, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0xd6574B7E198a8bf5399cfa4A52Aa7d0E59dc72b8, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x14267783EE5AA0354D0142a00BEbDD9bF532B973, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=0, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x1207d6384d8Ea07cCB784c2242673Ff4f1bcdEeb, gauge_implementation=0x7D5E296A1f31a99Cc3FC8A182ac8d359917B53Cd, views_implementation=0x7c5B1f2218D223461E3DFbA32170A15Fa3383ea2, fee_receiver=0x76385e285233cF61C2A1278848017dF2E0450b57, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0xb82209dC9E472e1ac9E4A694dfFb4A341D399Ac4, implementation=0x7D5E296A1f31a99Cc3FC8A182ac8d359917B53Cd, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_set_rewards_no_deposit[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xC4bE9B79933066645c355E411A86eD266d6C6b0f')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x904a1ec69cD22DF3C4D8b83543F18622220614Ac, compiled with vyper-0.3.10+...EEfb7B9f9eadce99CA50f8F7E17B2f3, fee_receiver=0x6Daa2dde4086a2c2F8c7f77356AC7A593E7cD548, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x3c97EC20B3456A02b12736BeC4D45DcDC8f64545, compiled with vyper-0.3.10+913..., ma_last_time=586759671211958485536373234179529691772303652529, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0xC4bE9B79933066645c355E411A86eD266d6C6b0f')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x904a1ec69cD22DF3C4D8b83543F18622220614Ac, compiled with vyper-0.3.10+...EEfb7B9f9eadce99CA50f8F7E17B2f3, fee_receiver=0x6Daa2dde4086a2c2F8c7f77356AC7A593E7cD548, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x3c97EC20B3456A02b12736BeC4D45DcDC8f64545, compiled with vyper-0.3.10+913..., ma_last_time=586759671211958485536373234179529691772303652529, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x904a1ec69cD22DF3C4D8b83543F18622220614Ac, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0xC4bE9B79933066645c355E411A86eD266d6C6b0f, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xbc1292a62ec859A08a8356C9DBB3313eCf20FbA5, gauge_implementation=0xe71FC6F8cF234644457C34A7fa7AD18CFb371A33, views_implementation=0xB84025344EEfb7B9f9eadce99CA50f8F7E17B2f3, fee_receiver=0x6Daa2dde4086a2c2F8c7f77356AC7A593E7cD548, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x3c97EC20B3456A02b12736BeC4D45DcDC8f64545, implementation=0xe71FC6F8cF234644457C34A7fa7AD18CFb371A33, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_set_rewards_no_deposit[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xf66DC79250b5B802c550739cA3867C798d26ff13')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xDdbDE55aaAb99C0C8408A46324f8C8bda10525E6, compiled with vyper-0.3.10+...adAeEAAdc971503b485F8fB609ee150, fee_receiver=0x4E1e5853Feec87DD3c76Def96c54Cf989aF620c0, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x4f567A23F14588e9a946f74f256e97CC260b373D, compiled with vyper-0.3.10+913..., ma_last_time=586759671552240852457311697642904299204071863986, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0xf66DC79250b5B802c550739cA3867C798d26ff13')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xDdbDE55aaAb99C0C8408A46324f8C8bda10525E6, compiled with vyper-0.3.10+...adAeEAAdc971503b485F8fB609ee150, fee_receiver=0x4E1e5853Feec87DD3c76Def96c54Cf989aF620c0, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x4f567A23F14588e9a946f74f256e97CC260b373D, compiled with vyper-0.3.10+913..., ma_last_time=586759671552240852457311697642904299204071863986, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0xDdbDE55aaAb99C0C8408A46324f8C8bda10525E6, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0xf66DC79250b5B802c550739cA3867C798d26ff13, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x9d27B22785AB292e27c46C7F04f930146204D32C, gauge_implementation=0x5a8FA9ea5F93BC16B074A5ED80373b8D8dFD8dAe, views_implementation=0x38173e16BadAeEAAdc971503b485F8fB609ee150, fee_receiver=0x4E1e5853Feec87DD3c76Def96c54Cf989aF620c0, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x4f567A23F14588e9a946f74f256e97CC260b373D, implementation=0x5a8FA9ea5F93BC16B074A5ED80373b8D8dFD8dAe, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_set_rewards_no_deposit[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xb7b4c70A0fc29D8E27c0B438e4c55eb6e67722Ac')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xf93b4DabC95279e61250B543b244b64A59F3Fc7c, compiled with vyper-0.3.10+...D97F608aF6f4dD0fD0373Ebd885161A, fee_receiver=0xbb94eF51613459366A4636A3a8e6DD9050Cf77Cb, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xff72147A50D33F20d40959eB2Af7E3Bef8162543, compiled with vyper-0.3.10+913..., ma_last_time=586759671552240852457311697642904299204071863986, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0xb7b4c70A0fc29D8E27c0B438e4c55eb6e67722Ac')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xf93b4DabC95279e61250B543b244b64A59F3Fc7c, compiled with vyper-0.3.10+...D97F608aF6f4dD0fD0373Ebd885161A, fee_receiver=0xbb94eF51613459366A4636A3a8e6DD9050Cf77Cb, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xff72147A50D33F20d40959eB2Af7E3Bef8162543, compiled with vyper-0.3.10+913..., ma_last_time=586759671552240852457311697642904299204071863986, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0xf93b4DabC95279e61250B543b244b64A59F3Fc7c, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0xb7b4c70A0fc29D8E27c0B438e4c55eb6e67722Ac, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x115Cd97f43810Fbe90417eA4E70c8d852073c2e7, gauge_implementation=0x3C1380dE27a0126d34858ac6fe33Aa137C2254c2, views_implementation=0xa0243792dD97F608aF6f4dD0fD0373Ebd885161A, fee_receiver=0xbb94eF51613459366A4636A3a8e6DD9050Cf77Cb, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0xff72147A50D33F20d40959eB2Af7E3Bef8162543, implementation=0x3C1380dE27a0126d34858ac6fe33Aa137C2254c2, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_set_rewards_no_deposit[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xA441370495Ec8D5533fBc9BB217298F1D64508d7')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x918D36D8562143EadAD760e2BE211e31dBC78344, compiled with vyper-0.3.10+...5443a66618F76E3ef75AFafaad221DF, fee_receiver=0x7fDaF23A9abD1738eCc5F1311D1e9C0dEd3fd538, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x143e101065c2445FBC62A4E5796EadECF90694a6, compiled with vyper-0.3.10+913..., ma_last_time=586759671892523219378250161106278906635840075443, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0xA441370495Ec8D5533fBc9BB217298F1D64508d7')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x918D36D8562143EadAD760e2BE211e31dBC78344, compiled with vyper-0.3.10+...5443a66618F76E3ef75AFafaad221DF, fee_receiver=0x7fDaF23A9abD1738eCc5F1311D1e9C0dEd3fd538, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x143e101065c2445FBC62A4E5796EadECF90694a6, compiled with vyper-0.3.10+913..., ma_last_time=586759671892523219378250161106278906635840075443, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x918D36D8562143EadAD760e2BE211e31dBC78344, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0xA441370495Ec8D5533fBc9BB217298F1D64508d7, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xFeCf2C48e7837Dc0EF9255Cb81d41d45608c347f, gauge_implementation=0x3035E790B45C4cDd3ab8E347b627dd4B136AeB2C, views_implementation=0xc2FB4a0955443a66618F76E3ef75AFafaad221DF, fee_receiver=0x7fDaF23A9abD1738eCc5F1311D1e9C0dEd3fd538, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x143e101065c2445FBC62A4E5796EadECF90694a6, implementation=0x3035E790B45C4cDd3ab8E347b627dd4B136AeB2C, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_set_rewards_no_deposit[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x9af6302C7357F7B1c515c907c63938459091D032')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x338cCeb00C6E7a40112ed84402FC38306a4569cc, compiled with vyper-0.3.10+...021feD9702e5a2721d37eA99cb07732, fee_receiver=0xd1F7D8cd70462732f34B64385f3CCAFF82fAB85C, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xe4202eE01bB4A689274C8ce003B4ba3B2d09D4a8, compiled with vyper-0.3.10+913..., ma_last_time=586759671892523219378250161106278906635840075443, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x9af6302C7357F7B1c515c907c63938459091D032')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x338cCeb00C6E7a40112ed84402FC38306a4569cc, compiled with vyper-0.3.10+...021feD9702e5a2721d37eA99cb07732, fee_receiver=0xd1F7D8cd70462732f34B64385f3CCAFF82fAB85C, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xe4202eE01bB4A689274C8ce003B4ba3B2d09D4a8, compiled with vyper-0.3.10+913..., ma_last_time=586759671892523219378250161106278906635840075443, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x338cCeb00C6E7a40112ed84402FC38306a4569cc, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x9af6302C7357F7B1c515c907c63938459091D032, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x5E01aba74825182AF8450E44cB12dDEE8768A1d1, gauge_implementation=0xfCc496de21fDEB9C634e1155db1BA04F0dF4C314, views_implementation=0x38CE41603021feD9702e5a2721d37eA99cb07732, fee_receiver=0xd1F7D8cd70462732f34B64385f3CCAFF82fAB85C, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0xe4202eE01bB4A689274C8ce003B4ba3B2d09D4a8, implementation=0xfCc496de21fDEB9C634e1155db1BA04F0dF4C314, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_set_rewards_no_deposit[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xB8CD2820afBF8f1F6D3C6baA236A6bdc8f2f15EB')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xEDB3EEA5c43b68306D4847570A8E46478E97FeD2, compiled with vyper-0.3.10+...977cE4E051293165a5F60a3a1144521, fee_receiver=0xB3fBf4b0d4d5f158689C9EF5eB48A5aCeee58577, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xa9600Db53560CDa90B352e272b88e8FC0D664004, compiled with vyper-0.3.10+913..., ma_last_time=586759671892523219378250161106278906635840075443, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0xB8CD2820afBF8f1F6D3C6baA236A6bdc8f2f15EB')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xEDB3EEA5c43b68306D4847570A8E46478E97FeD2, compiled with vyper-0.3.10+...977cE4E051293165a5F60a3a1144521, fee_receiver=0xB3fBf4b0d4d5f158689C9EF5eB48A5aCeee58577, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xa9600Db53560CDa90B352e272b88e8FC0D664004, compiled with vyper-0.3.10+913..., ma_last_time=586759671892523219378250161106278906635840075443, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0xEDB3EEA5c43b68306D4847570A8E46478E97FeD2, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0xB8CD2820afBF8f1F6D3C6baA236A6bdc8f2f15EB, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xd18c577244fF9d3C00Eedc8d13c2d92869c67512, gauge_implementation=0x59C47B8efc6A86Fad41316585bb97954FDCcA003, views_implementation=0x2f5DB9De2977cE4E051293165a5F60a3a1144521, fee_receiver=0xB3fBf4b0d4d5f158689C9EF5eB48A5aCeee58577, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0xa9600Db53560CDa90B352e272b88e8FC0D664004, implementation=0x59C47B8efc6A86Fad41316585bb97954FDCcA003, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_multiple_reward_tokens[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xAf2F9afE55c759653f99a64C878E0957a90586dd')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x85bb0306BB10b63fb2C4380bAc43b0d505207fE3, compiled with vyper-0.3.10+...4E9F82F33777f4046816aADB2867b23, fee_receiver=0x1B2dB3C4c675Ae88f4214df73E3DEA967F7Ca909, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0xF3A1Bd4e691e6d7DC595EA4aB5F6725c022c4B3E, compiled with vyper-0.3.10+9136169..., ma_last_time=586759671892523219378250161106278906635840075443, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0xAf2F9afE55c759653f99a64C878E0957a90586dd')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x85bb0306BB10b63fb2C4380bAc43b0d505207fE3, compiled with vyper-0.3.10+...4E9F82F33777f4046816aADB2867b23, fee_receiver=0x1B2dB3C4c675Ae88f4214df73E3DEA967F7Ca909, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0xF3A1Bd4e691e6d7DC595EA4aB5F6725c022c4B3E, compiled with vyper-0.3.10+9136169..., ma_last_time=586759671892523219378250161106278906635840075443, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x85bb0306BB10b63fb2C4380bAc43b0d505207fE3, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0xAf2F9afE55c759653f99a64C878E0957a90586dd, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=0, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xd2e3669299FaAb8ACFe8d8B39bD4d228b002FE9A, gauge_implementation=0xBC0464D39aF9fFC1f0FaC986492585D1F2D45F34, views_implementation=0x4f979F6d04E9F82F33777f4046816aADB2867b23, fee_receiver=0x1B2dB3C4c675Ae88f4214df73E3DEA967F7Ca909, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0xF3A1Bd4e691e6d7DC595EA4aB5F6725c022c4B3E, implementation=0xBC0464D39aF9fFC1f0FaC986492585D1F2D45F34, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_multiple_reward_tokens[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xcBAfaabDF883A68AdcE501B86e3d58f6De052d81')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xd12701Cd311861c818035fE5eb49FB6CC37b8055, compiled with vyper-0.3.10+...053d8bbA1aa71bE67B035377156B8fC, fee_receiver=0x7cE1C3aaA2e4d55319e2588A63fFFb6c8326525b, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x462a8Ff6E60e69f0ccE636C6Ce25A5E85a30884f, compiled with vyper-0.3.10+9136169..., ma_last_time=586759671892523219378250161106278906635840075443, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0xcBAfaabDF883A68AdcE501B86e3d58f6De052d81')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xd12701Cd311861c818035fE5eb49FB6CC37b8055, compiled with vyper-0.3.10+...053d8bbA1aa71bE67B035377156B8fC, fee_receiver=0x7cE1C3aaA2e4d55319e2588A63fFFb6c8326525b, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x462a8Ff6E60e69f0ccE636C6Ce25A5E85a30884f, compiled with vyper-0.3.10+9136169..., ma_last_time=586759671892523219378250161106278906635840075443, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0xd12701Cd311861c818035fE5eb49FB6CC37b8055, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0xcBAfaabDF883A68AdcE501B86e3d58f6De052d81, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=0, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xf7D0D097EFCF0B4a5471f6d93802455B4122c7cB, gauge_implementation=0x85d5a51B9cF6EfDaD7EBAE6C43430242570984D8, views_implementation=0xEb2fEA31E053d8bbA1aa71bE67B035377156B8fC, fee_receiver=0x7cE1C3aaA2e4d55319e2588A63fFFb6c8326525b, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x462a8Ff6E60e69f0ccE636C6Ce25A5E85a30884f, implementation=0x85d5a51B9cF6EfDaD7EBAE6C43430242570984D8, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_multiple_reward_tokens[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xBB77c1f9DbD25bc17A19892e77edddFe4755AC8e')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xBfC5c8cF68B6f799C133745c49bBCe90E0EB9211, compiled with vyper-0.3.10+...E24F67993630c071e32aDcb99cbCd8C, fee_receiver=0x0678c7640979A7026f6B8d539122c8a5Fea21090, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x00ee9e702D15d0b653229A507f43F164E9C67788, compiled with vyper-0.3.10+9136169..., ma_last_time=586759671892523219378250161106278906635840075443, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0xBB77c1f9DbD25bc17A19892e77edddFe4755AC8e')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xBfC5c8cF68B6f799C133745c49bBCe90E0EB9211, compiled with vyper-0.3.10+...E24F67993630c071e32aDcb99cbCd8C, fee_receiver=0x0678c7640979A7026f6B8d539122c8a5Fea21090, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x00ee9e702D15d0b653229A507f43F164E9C67788, compiled with vyper-0.3.10+9136169..., ma_last_time=586759671892523219378250161106278906635840075443, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0xBfC5c8cF68B6f799C133745c49bBCe90E0EB9211, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0xBB77c1f9DbD25bc17A19892e77edddFe4755AC8e, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=0, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xa326D4A43EcbebCc9341dd39be01511E8DC37043, gauge_implementation=0x857806948f3790971c9C16a3fF58ffdD783C9Afd, views_implementation=0xa492891d1E24F67993630c071e32aDcb99cbCd8C, fee_receiver=0x0678c7640979A7026f6B8d539122c8a5Fea21090, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x00ee9e702D15d0b653229A507f43F164E9C67788, implementation=0x857806948f3790971c9C16a3fF58ffdD783C9Afd, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_multiple_reward_tokens[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x558D9c258E6d1B25A16282617d4c84D3e7AE40aC')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x69738108F059785Eb8Ee120BAC05BbC75fdCf0A5, compiled with vyper-0.3.10+...bf3a5a9CE941531D4116f2C61275725, fee_receiver=0x74A7CdB911BF22194ebF7EBde60D038a6F7FE608, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x7830627e6E82A062BF64B7077F84DA0DA74d9E82, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x558D9c258E6d1B25A16282617d4c84D3e7AE40aC')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x69738108F059785Eb8Ee120BAC05BbC75fdCf0A5, compiled with vyper-0.3.10+...bf3a5a9CE941531D4116f2C61275725, fee_receiver=0x74A7CdB911BF22194ebF7EBde60D038a6F7FE608, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x7830627e6E82A062BF64B7077F84DA0DA74d9E82, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x69738108F059785Eb8Ee120BAC05BbC75fdCf0A5, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x558D9c258E6d1B25A16282617d4c84D3e7AE40aC, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=0, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x293BC5cd26dA76B06FB35A821E821B961Aec6654, gauge_implementation=0xF27325539F0aE794792Aaefb3676d1E49802319E, views_implementation=0x17a493d12bf3a5a9CE941531D4116f2C61275725, fee_receiver=0x74A7CdB911BF22194ebF7EBde60D038a6F7FE608, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x7830627e6E82A062BF64B7077F84DA0DA74d9E82, implementation=0xF27325539F0aE794792Aaefb3676d1E49802319E, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_multiple_reward_tokens[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xaBbf195aCfF0dA07C7e0127d17D3947DD595Db34')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x50699dD3a29dDA68e4027C42F6C34DeDE4F153A0, compiled with vyper-0.3.10+...6af910E6E3864B0ee330cB713610Ab1, fee_receiver=0xd098a1D9c539fE5417BcE07bd1d85f8CBBEf4ad5, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x05474D2B721fD61F362e65f3f62dCB9751b8Fa5E, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0xaBbf195aCfF0dA07C7e0127d17D3947DD595Db34')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x50699dD3a29dDA68e4027C42F6C34DeDE4F153A0, compiled with vyper-0.3.10+...6af910E6E3864B0ee330cB713610Ab1, fee_receiver=0xd098a1D9c539fE5417BcE07bd1d85f8CBBEf4ad5, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x05474D2B721fD61F362e65f3f62dCB9751b8Fa5E, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x50699dD3a29dDA68e4027C42F6C34DeDE4F153A0, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0xaBbf195aCfF0dA07C7e0127d17D3947DD595Db34, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=0, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xd88e25945EdfbDfe23e714A397a3700913c61aF9, gauge_implementation=0xD9C801EFCcEe4cD24638E8792670919Ea85925D1, views_implementation=0x9586596ae6af910E6E3864B0ee330cB713610Ab1, fee_receiver=0xd098a1D9c539fE5417BcE07bd1d85f8CBBEf4ad5, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x05474D2B721fD61F362e65f3f62dCB9751b8Fa5E, implementation=0xD9C801EFCcEe4cD24638E8792670919Ea85925D1, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_multiple_reward_tokens[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xeC2FaeF05B02D8144150bb8A8619575149F3501B')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x9BcbB76BF42D8DbA8a633C9362F7EB5E02fd316B, compiled with vyper-0.3.10+...2fDa1eb824521D36dF68e4bf8b74D49, fee_receiver=0x62970efB3526b659cfBb68C97056A64BB6905a86, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x2289e36080E7528c92F3F148Aa96DdF64FDB08E6, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0xeC2FaeF05B02D8144150bb8A8619575149F3501B')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x9BcbB76BF42D8DbA8a633C9362F7EB5E02fd316B, compiled with vyper-0.3.10+...2fDa1eb824521D36dF68e4bf8b74D49, fee_receiver=0x62970efB3526b659cfBb68C97056A64BB6905a86, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x2289e36080E7528c92F3F148Aa96DdF64FDB08E6, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x9BcbB76BF42D8DbA8a633C9362F7EB5E02fd316B, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0xeC2FaeF05B02D8144150bb8A8619575149F3501B, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=0, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x6119bB65c3Ce028a659fD468187Ee870A6a00a6a, gauge_implementation=0xf9486c4CB9A2C58eD25b4c1931C84c1f30318C6B, views_implementation=0xE58832FcD2fDa1eb824521D36dF68e4bf8b74D49, fee_receiver=0x62970efB3526b659cfBb68C97056A64BB6905a86, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x2289e36080E7528c92F3F148Aa96DdF64FDB08E6, implementation=0xf9486c4CB9A2C58eD25b4c1931C84c1f30318C6B, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_multiple_reward_tokens[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x61D5c7BaeB957aae37f50cCD61fb9081157EBb6F')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xf3d24BF8c0b7CdC588842E8Ef2e22F88BDD4826d, compiled with vyper-0.3.10+...c290293A9DC95cFa289E43F39f6c9CA, fee_receiver=0xB3cD53C3B22Fa639a766ABFeD6AF7723709e51fB, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x263037d365990dc2AA2aC6739f80BCa9273c091F, compiled with vyper-0.3.10+913..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x61D5c7BaeB957aae37f50cCD61fb9081157EBb6F')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xf3d24BF8c0b7CdC588842E8Ef2e22F88BDD4826d, compiled with vyper-0.3.10+...c290293A9DC95cFa289E43F39f6c9CA, fee_receiver=0xB3cD53C3B22Fa639a766ABFeD6AF7723709e51fB, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x263037d365990dc2AA2aC6739f80BCa9273c091F, compiled with vyper-0.3.10+913..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0xf3d24BF8c0b7CdC588842E8Ef2e22F88BDD4826d, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x61D5c7BaeB957aae37f50cCD61fb9081157EBb6F, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x7237c9a1840f69dB4EaCb02bBE23575A7CCBF008, gauge_implementation=0x749b390836aC6a9B6fa013Ce68A077be4479916b, views_implementation=0xB745d8D08c290293A9DC95cFa289E43F39f6c9CA, fee_receiver=0xB3cD53C3B22Fa639a766ABFeD6AF7723709e51fB, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x263037d365990dc2AA2aC6739f80BCa9273c091F, implementation=0x749b390836aC6a9B6fa013Ce68A077be4479916b, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_multiple_reward_tokens[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xA710155FfBBc202f5750C5812df426d67f023c1C')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xc16e4eBA0c70E95bC4894eC9468C28048dA79760, compiled with vyper-0.3.10+...59C6a51588D669078FF8F8c9cf922D0, fee_receiver=0x5AD5A246f6B1D104069487bfCE747348637c752c, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x8cBB3b48B1e213D459f20Ebb1a409328201b1605, compiled with vyper-0.3.10+913..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0xA710155FfBBc202f5750C5812df426d67f023c1C')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xc16e4eBA0c70E95bC4894eC9468C28048dA79760, compiled with vyper-0.3.10+...59C6a51588D669078FF8F8c9cf922D0, fee_receiver=0x5AD5A246f6B1D104069487bfCE747348637c752c, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x8cBB3b48B1e213D459f20Ebb1a409328201b1605, compiled with vyper-0.3.10+913..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0xc16e4eBA0c70E95bC4894eC9468C28048dA79760, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0xA710155FfBBc202f5750C5812df426d67f023c1C, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xc33dC7dAe7EF4b22ba2Bed8DaBB623EFd22Fb14d, gauge_implementation=0xc6CAafe209126159001A71CD857331902B7cb552, views_implementation=0xF2D3C39fD59C6a51588D669078FF8F8c9cf922D0, fee_receiver=0x5AD5A246f6B1D104069487bfCE747348637c752c, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x8cBB3b48B1e213D459f20Ebb1a409328201b1605, implementation=0xc6CAafe209126159001A71CD857331902B7cb552, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_multiple_reward_tokens[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x6BB04b56f6d619f183f38aF3618c4EBd4652c5b7')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x9DA2909a76cb41E15f6a9cBE034E4527e646E914, compiled with vyper-0.3.10+...70e1501243dd61Ae1895784c3C61BD8, fee_receiver=0x18a3DdE9e7c827EcBF0220372091cfb3A9CFf9b5, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xF79045e07d93E51596353488516B1a7B4518b10b, compiled with vyper-0.3.10+913..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x6BB04b56f6d619f183f38aF3618c4EBd4652c5b7')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x9DA2909a76cb41E15f6a9cBE034E4527e646E914, compiled with vyper-0.3.10+...70e1501243dd61Ae1895784c3C61BD8, fee_receiver=0x18a3DdE9e7c827EcBF0220372091cfb3A9CFf9b5, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xF79045e07d93E51596353488516B1a7B4518b10b, compiled with vyper-0.3.10+913..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x9DA2909a76cb41E15f6a9cBE034E4527e646E914, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x6BB04b56f6d619f183f38aF3618c4EBd4652c5b7, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x57cF47962E13ad0c9eBd88A3BcDB6F70159AF7b9, gauge_implementation=0x5a1d0A565e29ab7b1976533a86822f8C849daDA6, views_implementation=0xCd26320Cb70e1501243dd61Ae1895784c3C61BD8, fee_receiver=0x18a3DdE9e7c827EcBF0220372091cfb3A9CFf9b5, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0xF79045e07d93E51596353488516B1a7B4518b10b, implementation=0x5a1d0A565e29ab7b1976533a86822f8C849daDA6, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_multiple_reward_tokens[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x988789FE9D40E53b7300c21EE7F68Ee921bcA4FC')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x5a1fD2a123DF07b41F87149474241568fb672d27, compiled with vyper-0.3.10+...aBe1e74AA2f94bC68Dc9c0f3f529757, fee_receiver=0x62a7330Dac01a8735963720366a2f51a9A917f43, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x493e0c257eB550562Cf1Df5073982950ffE85B7b, compiled with vyper-0.3.10+913..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x988789FE9D40E53b7300c21EE7F68Ee921bcA4FC')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x5a1fD2a123DF07b41F87149474241568fb672d27, compiled with vyper-0.3.10+...aBe1e74AA2f94bC68Dc9c0f3f529757, fee_receiver=0x62a7330Dac01a8735963720366a2f51a9A917f43, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x493e0c257eB550562Cf1Df5073982950ffE85B7b, compiled with vyper-0.3.10+913..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x5a1fD2a123DF07b41F87149474241568fb672d27, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x988789FE9D40E53b7300c21EE7F68Ee921bcA4FC, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x160c7883CF03C7E892863b1670C6C2bbE8083d39, gauge_implementation=0x0ca3C309e8397B56DC131c29Fa83552d5351e82a, views_implementation=0x3b2035959aBe1e74AA2f94bC68Dc9c0f3f529757, fee_receiver=0x62a7330Dac01a8735963720366a2f51a9A917f43, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x493e0c257eB550562Cf1Df5073982950ffE85B7b, implementation=0x0ca3C309e8397B56DC131c29Fa83552d5351e82a, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_multiple_reward_tokens[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x144a9EB5F727272a48083038D60a3835aA50cc73')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x8E25366296F43dC3c0EDF80af01F78b2fa42a529, compiled with vyper-0.3.10+...36ABee35002c76AF12E7C14E9cD091B, fee_receiver=0xA2c9aE630E49df8195d55E62e46fAF513c069c2a, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xB8e23f54D037441fda028Aca6C539823134700A7, compiled with vyper-0.3.10+913..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x144a9EB5F727272a48083038D60a3835aA50cc73')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x8E25366296F43dC3c0EDF80af01F78b2fa42a529, compiled with vyper-0.3.10+...36ABee35002c76AF12E7C14E9cD091B, fee_receiver=0xA2c9aE630E49df8195d55E62e46fAF513c069c2a, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xB8e23f54D037441fda028Aca6C539823134700A7, compiled with vyper-0.3.10+913..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x8E25366296F43dC3c0EDF80af01F78b2fa42a529, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x144a9EB5F727272a48083038D60a3835aA50cc73, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x4049a539647BAF973F41E1605e8f12440dD0d269, gauge_implementation=0x317FE34C7BD7736B6dEe0Ce70eef1CD3DA64C331, views_implementation=0x133E4d25936ABee35002c76AF12E7C14E9cD091B, fee_receiver=0xA2c9aE630E49df8195d55E62e46fAF513c069c2a, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0xB8e23f54D037441fda028Aca6C539823134700A7, implementation=0x317FE34C7BD7736B6dEe0Ce70eef1CD3DA64C331, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_multiple_reward_tokens[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x904915F699AeD739c6001AB205E0a0eE284d2017')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x0BD98103F6fB931f16bEf5C1bBDcAb257e3C5B35, compiled with vyper-0.3.10+...5fDFA35CBE234B9d0Ac9470C7b329E5, fee_receiver=0x48a59ed66f4BC8b4FDfE3Cb405cEd10e5501B8F5, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x78EB6B3b9ee35640c2b371aB1D42ffeefc43fb50, compiled with vyper-0.3.10+913..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x904915F699AeD739c6001AB205E0a0eE284d2017')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x0BD98103F6fB931f16bEf5C1bBDcAb257e3C5B35, compiled with vyper-0.3.10+...5fDFA35CBE234B9d0Ac9470C7b329E5, fee_receiver=0x48a59ed66f4BC8b4FDfE3Cb405cEd10e5501B8F5, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x78EB6B3b9ee35640c2b371aB1D42ffeefc43fb50, compiled with vyper-0.3.10+913..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x0BD98103F6fB931f16bEf5C1bBDcAb257e3C5B35, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x904915F699AeD739c6001AB205E0a0eE284d2017, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x37ac59eF6318119b4f63493f4014b1552A975A06, gauge_implementation=0x18279FE0dB9726eCDcad3E2D7C3eb376EFaD1E02, views_implementation=0x19b08BdE35fDFA35CBE234B9d0Ac9470C7b329E5, fee_receiver=0x48a59ed66f4BC8b4FDfE3Cb405cEd10e5501B8F5, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x78EB6B3b9ee35640c2b371aB1D42ffeefc43fb50, implementation=0x18279FE0dB9726eCDcad3E2D7C3eb376EFaD1E02, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_set_rewards_no_deposit[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x02710ae866Df632381d2681bF2EB2480FDa501ab')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x7C91B75727DC2b256834A94Ea94aCdCcA5dFAF37, compiled with vyper-0.3.10+...8A964d1Ed4B5b1D6EC5D191EDA5fadc, fee_receiver=0x8Cfe50bC03bEb64187C5530D7288F02eeC36DCFb, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x9559A426778001a3c77dC0EB366663Ade9bC4F37, compiled with vyper-0.3.10+9136169..., ma_last_time=586759430972607439353818029037056844943946363887, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x10c02cd10>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x02710ae866Df632381d2681bF2EB2480FDa501ab')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x7C91B75727DC2b256834A94Ea94aCdCcA5dFAF37, compiled with vyper-0.3.10+...8A964d1Ed4B5b1D6EC5D191EDA5fadc, fee_receiver=0x8Cfe50bC03bEb64187C5530D7288F02eeC36DCFb, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x9559A426778001a3c77dC0EB366663Ade9bC4F37, compiled with vyper-0.3.10+9136169..., ma_last_time=586759430972607439353818029037056844943946363887, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x10c02cd10>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x7C91B75727DC2b256834A94Ea94aCdCcA5dFAF37, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x02710ae866Df632381d2681bF2EB2480FDa501ab, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=0, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x41198fF53Ea7446C086F2e4E3E2648c7f83AD67a, gauge_implementation=0xf8FDf9b388F3eD956dD9CD16D51EAD48827d8C80, views_implementation=0xD03717A518A964d1Ed4B5b1D6EC5D191EDA5fadc, fee_receiver=0x8Cfe50bC03bEb64187C5530D7288F02eeC36DCFb, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x9559A426778001a3c77dC0EB366663Ade9bC4F37, implementation=0xf8FDf9b388F3eD956dD9CD16D51EAD48827d8C80, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_cant_exceed_max[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x810a0a93F3567C2CDcEDc1B03a4febF42d290879')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x99bE58B33F6Ff370BB38c2AdA176966Bfea45179, compiled with vyper-0.3.10+...a68BD66643C6F94A11ec3173f598b7a, fee_receiver=0x28B3020d1222307c673260b8f988011714267446, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0xfCf6506fEF33c49853e2386fEe7883310f720eAD, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x810a0a93F3567C2CDcEDc1B03a4febF42d290879')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x99bE58B33F6Ff370BB38c2AdA176966Bfea45179, compiled with vyper-0.3.10+...a68BD66643C6F94A11ec3173f598b7a, fee_receiver=0x28B3020d1222307c673260b8f988011714267446, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0xfCf6506fEF33c49853e2386fEe7883310f720eAD, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x99bE58B33F6Ff370BB38c2AdA176966Bfea45179, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x810a0a93F3567C2CDcEDc1B03a4febF42d290879, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=0, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xeEC661Ef8b08207c9bB272C1378347943D21f0b1, gauge_implementation=0xA8b98b179f12a56d41C3D58A0f7d8EBDd3041e7E, views_implementation=0xB75A2B163a68BD66643C6F94A11ec3173f598b7a, fee_receiver=0x28B3020d1222307c673260b8f988011714267446, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0xfCf6506fEF33c49853e2386fEe7883310f720eAD, implementation=0xA8b98b179f12a56d41C3D58A0f7d8EBDd3041e7E, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_cant_exceed_max[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x872DC0f6c43807caB1D8ccf29472e8388DDC65AF')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x817Fc224f12e0cE563B7ED09AEd49dC137A25100, compiled with vyper-0.3.10+...e61780688cF937055e1B92c4Fc991bF, fee_receiver=0x2ceB62D76D71AF40627b63a48C991ef705AeF27E, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x38295dC2F87B474a6FF3332718b78c045D494F87, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x872DC0f6c43807caB1D8ccf29472e8388DDC65AF')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x817Fc224f12e0cE563B7ED09AEd49dC137A25100, compiled with vyper-0.3.10+...e61780688cF937055e1B92c4Fc991bF, fee_receiver=0x2ceB62D76D71AF40627b63a48C991ef705AeF27E, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x38295dC2F87B474a6FF3332718b78c045D494F87, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x817Fc224f12e0cE563B7ED09AEd49dC137A25100, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x872DC0f6c43807caB1D8ccf29472e8388DDC65AF, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=0, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x711FC689017baBCF2cFf01184fCF698e0e80c77E, gauge_implementation=0x8988712E62161c8BF5009764c249Fb4663404b47, views_implementation=0x8ed665C5De61780688cF937055e1B92c4Fc991bF, fee_receiver=0x2ceB62D76D71AF40627b63a48C991ef705AeF27E, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x38295dC2F87B474a6FF3332718b78c045D494F87, implementation=0x8988712E62161c8BF5009764c249Fb4663404b47, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_set_rewards_no_deposit[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x3D654134Df55789DA03Cea004d41090be7442a29')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x974937056b2cb6f98c01DbeB002d01D868d4C4eE, compiled with vyper-0.3.10+...C17cc4cc91Dc6220C3C6Ee967c8e21f, fee_receiver=0x7Fa3E35A31874008CBB0E65a91b621Fa78e0B123, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x18E2F774e37b3e2661D18dE0110d9cd71C80faDB, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x10c02cd10>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x3D654134Df55789DA03Cea004d41090be7442a29')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x974937056b2cb6f98c01DbeB002d01D868d4C4eE, compiled with vyper-0.3.10+...C17cc4cc91Dc6220C3C6Ee967c8e21f, fee_receiver=0x7Fa3E35A31874008CBB0E65a91b621Fa78e0B123, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x18E2F774e37b3e2661D18dE0110d9cd71C80faDB, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x10c02cd10>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x974937056b2cb6f98c01DbeB002d01D868d4C4eE, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x3D654134Df55789DA03Cea004d41090be7442a29, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=0, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x026f94B24f22a5BBd055Fd7568b4101DddfFb347, gauge_implementation=0x1012Ff8dfE2Fd3937E7DC52A31a1799959617578, views_implementation=0x33f639663C17cc4cc91Dc6220C3C6Ee967c8e21f, fee_receiver=0x7Fa3E35A31874008CBB0E65a91b621Fa78e0B123, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x18E2F774e37b3e2661D18dE0110d9cd71C80faDB, implementation=0x1012Ff8dfE2Fd3937E7DC52A31a1799959617578, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_cant_exceed_max[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xc30469865A420e033005718f316C79cD0951669b')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x0A069180ebf787d55abfdF6FCcbef01C8fC4abA5, compiled with vyper-0.3.10+...e0D9267660fDF82b09E4223c0FeE9B2, fee_receiver=0x5dBbfB1525F2915dF02493C1C6CB1648C99a908A, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x9399194bD19Aae93BB9F884eb46020c07fbEc92d, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0xc30469865A420e033005718f316C79cD0951669b')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x0A069180ebf787d55abfdF6FCcbef01C8fC4abA5, compiled with vyper-0.3.10+...e0D9267660fDF82b09E4223c0FeE9B2, fee_receiver=0x5dBbfB1525F2915dF02493C1C6CB1648C99a908A, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x9399194bD19Aae93BB9F884eb46020c07fbEc92d, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x0A069180ebf787d55abfdF6FCcbef01C8fC4abA5, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0xc30469865A420e033005718f316C79cD0951669b, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=0, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xDAfCC17022fEE9AB540357BA5E2a69567abc853F, gauge_implementation=0xE446E2AeE028197f7a2beE0992a67a25f58c51c1, views_implementation=0x3B88BBB5Ce0D9267660fDF82b09E4223c0FeE9B2, fee_receiver=0x5dBbfB1525F2915dF02493C1C6CB1648C99a908A, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x9399194bD19Aae93BB9F884eb46020c07fbEc92d, implementation=0xE446E2AeE028197f7a2beE0992a67a25f58c51c1, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_cant_exceed_max[(PoolType=basic)-(PoolTokenTypes=plain+plain)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x554F5989B89B1EB50917E42DAebf7E9842d8b6Be')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x0dDf8aD43f1E61AAAB0f119d73750eb8bED65EFD, compiled with vyper-0.3.10+...71Ca3540eafE5689f4Ae5d039B6E5BB, fee_receiver=0x5d91574bd8B66CA32b62580Ff60F3Bc02e36d98f, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x5b61890786d2fCedEE69560469FD2df3139c5149, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x554F5989B89B1EB50917E42DAebf7E9842d8b6Be')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x0dDf8aD43f1E61AAAB0f119d73750eb8bED65EFD, compiled with vyper-0.3.10+...71Ca3540eafE5689f4Ae5d039B6E5BB, fee_receiver=0x5d91574bd8B66CA32b62580Ff60F3Bc02e36d98f, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x5b61890786d2fCedEE69560469FD2df3139c5149, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x0dDf8aD43f1E61AAAB0f119d73750eb8bED65EFD, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x554F5989B89B1EB50917E42DAebf7E9842d8b6Be, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=0, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x0b36Dd546Ab45d32E6D4F32FA83458136Bd733f8, gauge_implementation=0xC63a815c050EbAF23c26076FebA694ef76B3e8c0, views_implementation=0x5E9B9A1CA71Ca3540eafE5689f4Ae5d039B6E5BB, fee_receiver=0x5d91574bd8B66CA32b62580Ff60F3Bc02e36d98f, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x5b61890786d2fCedEE69560469FD2df3139c5149, implementation=0xC63a815c050EbAF23c26076FebA694ef76B3e8c0, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_cant_exceed_max[(PoolType=basic)-(PoolTokenTypes=plain+plain)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x8e1eE0d5E0bedF5274809bE1f606E30d085f685c')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xA289d4aA43992b1579d683418D2C84F86017C317, compiled with vyper-0.3.10+...345d05227E2E0dc9dE9AcD1d09bb9Bb, fee_receiver=0x24Db2496A0A4f63aBBD8FC965bF15a5D395123B6, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x33716A98b36ddF373e6B25114B0cf1A153701819, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x8e1eE0d5E0bedF5274809bE1f606E30d085f685c')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xA289d4aA43992b1579d683418D2C84F86017C317, compiled with vyper-0.3.10+...345d05227E2E0dc9dE9AcD1d09bb9Bb, fee_receiver=0x24Db2496A0A4f63aBBD8FC965bF15a5D395123B6, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0x33716A98b36ddF373e6B25114B0cf1A153701819, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0xA289d4aA43992b1579d683418D2C84F86017C317, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x8e1eE0d5E0bedF5274809bE1f606E30d085f685c, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=0, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xeDea1044C57Be9654c5E50C378280cE666AB0d74, gauge_implementation=0xC9CCaA24a5ce5864bBB4e5E7B3aD7a530D83eafF, views_implementation=0x60B6A4BAC345d05227E2E0dc9dE9AcD1d09bb9Bb, fee_receiver=0x24Db2496A0A4f63aBBD8FC965bF15a5D395123B6, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x33716A98b36ddF373e6B25114B0cf1A153701819, implementation=0xC9CCaA24a5ce5864bBB4e5E7B3aD7a530D83eafF, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_cant_exceed_max[(PoolType=basic)-(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x8ba98026D9430DEF3acC22e2dB696877e19c58E4')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x1a18b3F8F0c6cd09af5Cf28ab9339c89581c8265, compiled with vyper-0.3.10+...35c9802BA29DBCFF8783570f0DEb2e9, fee_receiver=0x549c166e8415719C7bE64f15b9032C4047B455C8, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0xCf4265EffE8b9e623fFD17054419E13e6c9dEb09, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x8ba98026D9430DEF3acC22e2dB696877e19c58E4')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x1a18b3F8F0c6cd09af5Cf28ab9339c89581c8265, compiled with vyper-0.3.10+...35c9802BA29DBCFF8783570f0DEb2e9, fee_receiver=0x549c166e8415719C7bE64f15b9032C4047B455C8, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapNG.vy at 0xCf4265EffE8b9e623fFD17054419E13e6c9dEb09, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x1a18b3F8F0c6cd09af5Cf28ab9339c89581c8265, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x8ba98026D9430DEF3acC22e2dB696877e19c58E4, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=0, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xdE708B754016Ec004778C74f9bd153C6DDbEe12C, gauge_implementation=0x73C1ad05495d6E2A1AA575e0C48081e11b565E38, views_implementation=0x19C1E34C835c9802BA29DBCFF8783570f0DEb2e9, fee_receiver=0x549c166e8415719C7bE64f15b9032C4047B455C8, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0xCf4265EffE8b9e623fFD17054419E13e6c9dEb09, implementation=0x73C1ad05495d6E2A1AA575e0C48081e11b565E38, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_cant_exceed_max[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x8387b337d1c0BbB58F06f1c68356dDc3D64cCCC8')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x84f20822DD9CB2221d9198FeCE863C4c0164AAA9, compiled with vyper-0.3.10+...33DFBc939D318F7F36e3D7ef07eE0E6, fee_receiver=0x2b012a1347645140aD29773a8DA91588A0C0517f, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x10685861470DF1c7Be4b788E1e3Ec679B14F9738, compiled with vyper-0.3.10+913..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x8387b337d1c0BbB58F06f1c68356dDc3D64cCCC8')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x84f20822DD9CB2221d9198FeCE863C4c0164AAA9, compiled with vyper-0.3.10+...33DFBc939D318F7F36e3D7ef07eE0E6, fee_receiver=0x2b012a1347645140aD29773a8DA91588A0C0517f, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x10685861470DF1c7Be4b788E1e3Ec679B14F9738, compiled with vyper-0.3.10+913..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x84f20822DD9CB2221d9198FeCE863C4c0164AAA9, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x8387b337d1c0BbB58F06f1c68356dDc3D64cCCC8, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x16b4219F276293DF3dF50CE7aEAC1872e608cEC5, gauge_implementation=0x8f6daf2029cA212aa55BA663F155ED455911BAf4, views_implementation=0xDcf42806233DFBc939D318F7F36e3D7ef07eE0E6, fee_receiver=0x2b012a1347645140aD29773a8DA91588A0C0517f, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x10685861470DF1c7Be4b788E1e3Ec679B14F9738, implementation=0x8f6daf2029cA212aa55BA663F155ED455911BAf4, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_cant_exceed_max[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x51D2652e8859911F15742D22B6cC648DDcF0116F')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x67a8A87109eb98189d38eC37eAd25Ced465f97d2, compiled with vyper-0.3.10+...6AC88B732cB2c436E1A4c9133952725, fee_receiver=0xA5691e7538aB0016c87611D29CbB780edF2aa92B, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x76b9661e47929377D84900e82FaA1007C7c0e5B0, compiled with vyper-0.3.10+913..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x51D2652e8859911F15742D22B6cC648DDcF0116F')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x67a8A87109eb98189d38eC37eAd25Ced465f97d2, compiled with vyper-0.3.10+...6AC88B732cB2c436E1A4c9133952725, fee_receiver=0xA5691e7538aB0016c87611D29CbB780edF2aa92B, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x76b9661e47929377D84900e82FaA1007C7c0e5B0, compiled with vyper-0.3.10+913..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x67a8A87109eb98189d38eC37eAd25Ced465f97d2, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x51D2652e8859911F15742D22B6cC648DDcF0116F, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x46CbffD6c184E96EFbc16D768e3C4C5a28E683C5, gauge_implementation=0x1478e2d2E6ee7042d2ba6a9c6bc18887B70dAA02, views_implementation=0x16ad0C9d06AC88B732cB2c436E1A4c9133952725, fee_receiver=0xA5691e7538aB0016c87611D29CbB780edF2aa92B, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x76b9661e47929377D84900e82FaA1007C7c0e5B0, implementation=0x1478e2d2E6ee7042d2ba6a9c6bc18887B70dAA02, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_cant_exceed_max[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x521bfe1916e60D6dA9D54a5D7656C1C9569036cC')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x89355c503a20CdbCB7A9A2d0b9EF8961bBb9650C, compiled with vyper-0.3.10+...37C36B2b9cCf63A62dE6cBD9BEfE578, fee_receiver=0xdeEaaaE1a87f747010ec185E3Aa4f9F4B18A2f6d, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x75991DF291F691dc4344E63951c9516836EFF5E5, compiled with vyper-0.3.10+913..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x521bfe1916e60D6dA9D54a5D7656C1C9569036cC')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x89355c503a20CdbCB7A9A2d0b9EF8961bBb9650C, compiled with vyper-0.3.10+...37C36B2b9cCf63A62dE6cBD9BEfE578, fee_receiver=0xdeEaaaE1a87f747010ec185E3Aa4f9F4B18A2f6d, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x75991DF291F691dc4344E63951c9516836EFF5E5, compiled with vyper-0.3.10+913..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x89355c503a20CdbCB7A9A2d0b9EF8961bBb9650C, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x521bfe1916e60D6dA9D54a5D7656C1C9569036cC, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x2e6974F9FfDBAe8E6cBa906a7B57691A67f708E7, gauge_implementation=0x2B455Ca9bf919a6FD1BF4447C6EB188Dd405B4aB, views_implementation=0x7A5F2beb637C36B2b9cCf63A62dE6cBD9BEfE578, fee_receiver=0xdeEaaaE1a87f747010ec185E3Aa4f9F4B18A2f6d, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x75991DF291F691dc4344E63951c9516836EFF5E5, implementation=0x2B455Ca9bf919a6FD1BF4447C6EB188Dd405B4aB, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_cant_exceed_max[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x4c80f88d69072875499DDc7a4dd88D25574a62BE')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xA92540DbBCB777ae9f38b966Cf63eF087D28DFe5, compiled with vyper-0.3.10+...b8424579Ab5bB6152C3D9b5e416E918, fee_receiver=0x74677c0ad7CC5A508EFC9d7A6a111136c2F10293, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xE720D1cD253889495fd1491B4242a9fD87c517e7, compiled with vyper-0.3.10+913..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x4c80f88d69072875499DDc7a4dd88D25574a62BE')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xA92540DbBCB777ae9f38b966Cf63eF087D28DFe5, compiled with vyper-0.3.10+...b8424579Ab5bB6152C3D9b5e416E918, fee_receiver=0x74677c0ad7CC5A508EFC9d7A6a111136c2F10293, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xE720D1cD253889495fd1491B4242a9fD87c517e7, compiled with vyper-0.3.10+913..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0xA92540DbBCB777ae9f38b966Cf63eF087D28DFe5, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x4c80f88d69072875499DDc7a4dd88D25574a62BE, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xE62C4a4227024925571A791aaFc5c8F341C9D438, gauge_implementation=0x89dbA54F9Ccc7Cb83F85796a57Ca38370Fd492B1, views_implementation=0x28472ef4ab8424579Ab5bB6152C3D9b5e416E918, fee_receiver=0x74677c0ad7CC5A508EFC9d7A6a111136c2F10293, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0xE720D1cD253889495fd1491B4242a9fD87c517e7, implementation=0x89dbA54F9Ccc7Cb83F85796a57Ca38370Fd492B1, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_cant_exceed_max[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x655D2B5f8EF632499a939436D6D2356F4163e309')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xb962Adb6C19896272A2520dAa77DDe83e00905f3, compiled with vyper-0.3.10+...1fc52AaD931286dd5578511B5aFfC27, fee_receiver=0xB3252cdBDb1Cf1cd4B520f6cc40D60DcB4048486, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x99C6d7D5D6b04360958911B85A6530Df0ac97BFA, compiled with vyper-0.3.10+913..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x655D2B5f8EF632499a939436D6D2356F4163e309')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0xb962Adb6C19896272A2520dAa77DDe83e00905f3, compiled with vyper-0.3.10+...1fc52AaD931286dd5578511B5aFfC27, fee_receiver=0xB3252cdBDb1Cf1cd4B520f6cc40D60DcB4048486, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x99C6d7D5D6b04360958911B85A6530Df0ac97BFA, compiled with vyper-0.3.10+913..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0xb962Adb6C19896272A2520dAa77DDe83e00905f3, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x655D2B5f8EF632499a939436D6D2356F4163e309, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x6DE7B71b4CD9d9aF010221B1cdF347A17cb68Cdf, gauge_implementation=0xDeeE93F7a9a1dAe50489151387EB066fd243Ab4e, views_implementation=0x53de0699f1fc52AaD931286dd5578511B5aFfC27, fee_receiver=0xB3252cdBDb1Cf1cd4B520f6cc40D60DcB4048486, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x99C6d7D5D6b04360958911B85A6530Df0ac97BFA, implementation=0xDeeE93F7a9a1dAe50489151387EB066fd243Ab4e, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
_ ERROR at setup of test_cant_exceed_max[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x4f3C3ceA82d5Ed0acDf2A1247Ff1682d181787c8')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x16FB557dBfA1B745265614a8E834385993D6E3A7, compiled with vyper-0.3.10+...cc85AFC4e9Bcc347DD9f3767835AD09, fee_receiver=0xA198e43857bA1097Ec32F2c05864a8eae5EB0aF2, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x8978ee3cc591D49fDB6D2cE96783d1d47533341E, compiled with vyper-0.3.10+913..., ma_last_time=586759672913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)

tests/fixtures/factory.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = Address('0x4f3C3ceA82d5Ed0acDf2A1247Ff1682d181787c8')
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x16FB557dBfA1B745265614a8E834385993D6E3A7, compiled with vyper-0.3.10+...cc85AFC4e9Bcc347DD9f3767835AD09, fee_receiver=0xA198e43857bA1097Ec32F2c05864a8eae5EB0aF2, markets={}, market_counts={}>
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x8978ee3cc591D49fDB6D2cE96783d1d47533341E, compiled with vyper-0.3.10+913..., ma_last_time=586759672913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=0, nonces={}>
gauge_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1075c6510>
set_gauge_implementation = None

    @pytest.fixture()
    def gauge(owner, factory, swap, gauge_deployer, set_gauge_implementation):
        with boa.env.prank(owner):
>           gauge_address = factory.deploy_gauge(swap.address)
E           boa.contracts.base_evm_contract.BoaError: Revert(b'')
E           
E              <Unknown contract 0x>
E           
E           <contracts/main/CurveStableSwapFactoryNG.vy at 0x16FB557dBfA1B745265614a8E834385993D6E3A7, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x4f3C3ceA82d5Ed0acDf2A1247Ff1682d181787c8, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=1, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x43f1c8d1ebbfcf9F235aeF9F4B1BdB11A99F804A, gauge_implementation=0x06a33487F3827AE08E594110e10B4d7D39b8053e, views_implementation=0x51e510F26cc85AFC4e9Bcc347DD9f3767835AD09, fee_receiver=0xA198e43857bA1097Ec32F2c05864a8eae5EB0aF2, markets={}, market_counts={}>
E            <compiler: create failed>
E             contract "contracts/main/CurveStableSwapFactoryNG.vy:705", function "deploy_gauge", line 705:21 
E                  704
E             ---> 705     gauge: address = create_from_blueprint(self.gauge_implementation, _pool, code_offset=3)
E             ------------------------------^
E                  706     self.pool_data[_pool].liquidity_gauge = gauge
E            <locals: _pool=0x8978ee3cc591D49fDB6D2cE96783d1d47533341E, implementation=0x06a33487F3827AE08E594110e10B4d7D39b8053e, gauge=0x0000000000000000000000000000000000000000>

tests/fixtures/factory.py:92: BoaError
________________ ERROR at teardown of test_broken_pool_is_fixed ________________
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

    def finalize():
        _task_list.add(task_id)
>       _work_task_list()

../../../pyEnv/crv/lib/python3.12/site-packages/boa/test/plugin.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/test/plugin.py:82: in _work_task_list
    ctx.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/environment.py:159: in anchor
    self.evm.revert(snapshot_id)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/vm/py_evm.py:442: in revert
    self.vm.state.revert(snapshot_id)
../../../pyEnv/crv/lib/python3.12/site-packages/eth/vm/forks/cancun/state.py:181: in revert
    super().revert(snapshot)
../../../pyEnv/crv/lib/python3.12/site-packages/eth/vm/state.py:233: in revert
    self._account_db.discard(account_snapshot)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/vm/fork.py:266: in discard
    super().discard(checkpoint)
../../../pyEnv/crv/lib/python3.12/site-packages/eth/db/account.py:439: in discard
    self._journaldb.discard(checkpoint)
../../../pyEnv/crv/lib/python3.12/site-packages/eth/db/journal.py:435: in discard
    self._journal.discard(checkpoint)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <eth.db.journal.Journal object at 0x17e413650>
through_checkpoint_id = 104987

    def discard(self, through_checkpoint_id: JournalDBCheckpoint) -> None:
        while self._checkpoint_stack:
            checkpoint_id = self._checkpoint_stack.pop()
            if checkpoint_id == through_checkpoint_id:
                break
        else:
            # checkpoint not found!
>           raise ValidationError(f"No checkpoint {through_checkpoint_id} was found")
E           eth_utils.exceptions.ValidationError: No checkpoint 104987 was found

../../../pyEnv/crv/lib/python3.12/site-packages/eth/db/journal.py:172: ValidationError
_ ERROR at teardown of test_transfer_event_fires[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

    def finalize():
        _task_list.add(task_id)
>       _work_task_list()

../../../pyEnv/crv/lib/python3.12/site-packages/boa/test/plugin.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/test/plugin.py:82: in _work_task_list
    ctx.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/environment.py:159: in anchor
    self.evm.revert(snapshot_id)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/vm/py_evm.py:442: in revert
    self.vm.state.revert(snapshot_id)
../../../pyEnv/crv/lib/python3.12/site-packages/eth/vm/forks/cancun/state.py:181: in revert
    super().revert(snapshot)
../../../pyEnv/crv/lib/python3.12/site-packages/eth/vm/state.py:233: in revert
    self._account_db.discard(account_snapshot)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/vm/fork.py:266: in discard
    super().discard(checkpoint)
../../../pyEnv/crv/lib/python3.12/site-packages/eth/db/account.py:439: in discard
    self._journaldb.discard(checkpoint)
../../../pyEnv/crv/lib/python3.12/site-packages/eth/db/journal.py:435: in discard
    self._journal.discard(checkpoint)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <eth.db.journal.Journal object at 0x11b0bc1d0>
through_checkpoint_id = 24109

    def discard(self, through_checkpoint_id: JournalDBCheckpoint) -> None:
        while self._checkpoint_stack:
            checkpoint_id = self._checkpoint_stack.pop()
            if checkpoint_id == through_checkpoint_id:
                break
        else:
            # checkpoint not found!
>           raise ValidationError(f"No checkpoint {through_checkpoint_id} was found")
E           eth_utils.exceptions.ValidationError: No checkpoint 24109 was found

../../../pyEnv/crv/lib/python3.12/site-packages/eth/db/journal.py:172: ValidationError
_ ERROR at teardown of test_transfer_event_fires[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

    def finalize():
        _task_list.add(task_id)
>       _work_task_list()

../../../pyEnv/crv/lib/python3.12/site-packages/boa/test/plugin.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/test/plugin.py:82: in _work_task_list
    ctx.__exit__(None, None, None)
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/environment.py:159: in anchor
    self.evm.revert(snapshot_id)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/vm/py_evm.py:442: in revert
    self.vm.state.revert(snapshot_id)
../../../pyEnv/crv/lib/python3.12/site-packages/eth/vm/forks/cancun/state.py:181: in revert
    super().revert(snapshot)
../../../pyEnv/crv/lib/python3.12/site-packages/eth/vm/state.py:233: in revert
    self._account_db.discard(account_snapshot)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/vm/fork.py:266: in discard
    super().discard(checkpoint)
../../../pyEnv/crv/lib/python3.12/site-packages/eth/db/account.py:439: in discard
    self._journaldb.discard(checkpoint)
../../../pyEnv/crv/lib/python3.12/site-packages/eth/db/journal.py:435: in discard
    self._journal.discard(checkpoint)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <eth.db.journal.Journal object at 0x107c37ad0>
through_checkpoint_id = 15

    def discard(self, through_checkpoint_id: JournalDBCheckpoint) -> None:
        while self._checkpoint_stack:
            checkpoint_id = self._checkpoint_stack.pop()
            if checkpoint_id == through_checkpoint_id:
                break
        else:
            # checkpoint not found!
>           raise ValidationError(f"No checkpoint {through_checkpoint_id} was found")
E           eth_utils.exceptions.ValidationError: No checkpoint 15 was found

../../../pyEnv/crv/lib/python3.12/site-packages/eth/db/journal.py:172: ValidationError
=================================== FAILURES ===================================
_ test_min_dy_too_high[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-1-0] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xA73d7cddCf77c00827459f986bf828999B58C6Fe')
swap = <contracts/main/CurveStableSwapNG.vy at 0xebd92107f3F647B243389eB32EDE01EF64828ba2, compiled with vyper-0.3.10+9136169...149417183247927063009158224886389749416, balanceOf={}, allowance={}, total_supply=2999999999999999999999999, nonces={}>
sending = 1, receiving = 0, decimals = [18, 18]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_min_dy_too_high(bob, swap, sending, receiving, decimals):
        amount = 10 ** decimals[sending]
        min_dy = swap.get_dy(sending, receiving, amount)
>       with boa.reverts():

tests/pools/exchange/test_exchange_reverts.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_min_dy_too_high[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-1-0] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x76385e285233cF61C2A1278848017dF2E0450b57')
swap = <contracts/main/CurveStableSwapNG.vy at 0x5Db6f7b7D3e4D05d9841382672C241DdbFE91058, compiled with vyper-0.3.10+9136169...489699550168865526472532832318157960873, balanceOf={}, allowance={}, total_supply=2999999999999999999999999, nonces={}>
sending = 1, receiving = 0, decimals = [18, 18]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_min_dy_too_high(bob, swap, sending, receiving, decimals):
        amount = 10 ** decimals[sending]
        min_dy = swap.get_dy(sending, receiving, amount)
>       with boa.reverts():

tests/pools/exchange/test_exchange_reverts.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_min_dy_too_high[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xB8CD2820afBF8f1F6D3C6baA236A6bdc8f2f15EB')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x5b3bE7eD4790D5913A7454166bC9f6df99a2b18A, compiled with vyper-0.3.10+913...170264284010742453399282047181694383787, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
sending = 0, receiving = 1, decimals = [18, 18]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_min_dy_too_high(bob, swap, sending, receiving, decimals):
        amount = 10 ** decimals[sending]
        min_dy = swap.get_dy(sending, receiving, amount)
>       with boa.reverts():

tests/pools/exchange/test_exchange_reverts.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_min_dy_imbalanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-1-0] _
[gw5] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x094cAceB61881910A7F495A48034D2426977F103')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x6c48FeEd22042970A4eC2D1d68A86F51e36d3569, compiled with vyper-0.3.10+913...510546650931680916862656654613462595244, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x42620C34a7F670FAa9AE5ABb9CC82C04fe3A67a2, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x42620C34a7F670FAa9AE5ABb9CC82C04fe3A67a2, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_token_types = (1, 1), metapool_token_type = 1, sending = 1, receiving = 0
decimals = [18, 18]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_min_dy_imbalanced(
        bob,
        swap,
        pool_type,
        pool_tokens,
        underlying_tokens,
        pool_token_types,
        metapool_token_type,
        sending,
        receiving,
        decimals,
    ):
        amounts = [1_500_000 * 10**i for i in decimals]
        scaler = amounts.copy()  # used to scale token amounts when decimals are different
    
        amounts[sending] = 0
        amounts[receiving] = amounts[receiving]
    
        swap.add_liquidity(amounts, 0, sender=bob)
    
        # oracle
        rate = 1
        if pool_type == 0:
            if pool_token_types[sending] == 1:
                rate = rate / (pool_tokens[sending].exchangeRate() / 10**18)
            if pool_token_types[receiving] == 1:
                rate = rate * (pool_tokens[receiving].exchangeRate() / 10**18)
    
        elif pool_type == 1:
            if metapool_token_type == 1:
                if sending == 0:
                    rate = rate / (underlying_tokens[0].exchangeRate() / 10**18)
    
                if receiving == 0:
                    rate = rate * (underlying_tokens[0].exchangeRate() / 10**18)
    
        # we need to scale these appropriately for tokens with different decimal values
        min_dy_sending = swap.get_dy(sending, receiving, scaler[sending]) / scaler[receiving]
        min_dy_receiving = swap.get_dy(receiving, sending, scaler[receiving]) / scaler[sending]
    
>       assert min_dy_sending * rate > min_dy_receiving
E       assert (0.9932788815556346 * 1.006470359024) > 1.00542747739311

tests/pools/exchange/test_exchange.py:84: AssertionError
_ test_insufficient_balance[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1] _
[gw8] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

charlie = Address('0x51D2652e8859911F15742D22B6cC648DDcF0116F')
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x2C375660B2b084477C1dAc14A0E79BA53d6E2d6E, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x2B610Ef606165036687381B6882341920C867C6A, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x250aF4cA247Cb8d823e7aE018017B3d694177303, compiled with vyper-0.3.10+913...850829017852619380326031262045230806701, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
sending = 0, receiving = 1, decimals = [18, 18]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_insufficient_balance(charlie, pool_tokens, underlying_tokens, swap, sending, receiving, decimals):
        amount = 10 ** decimals[sending]
    
        for token in pool_tokens + underlying_tokens:
            assert token.balanceOf(charlie) == 0
    
        # Charlie doesn't have any tokens, all balances are 0
>       with boa.reverts(), boa.env.prank(charlie):

tests/pools/exchange/test_exchange_reverts.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_min_dy_too_high[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xB662299ED091A8F97F5eb9Fc942Ceb9ECBE432e2')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x606D21Aa1c572ec4494d3c05612ee40268D41264, compiled with vyper-0.3.10+913...850829017852619380326031262045230806701, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
sending = 0, receiving = 1, decimals = [18, 18]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_min_dy_too_high(bob, swap, sending, receiving, decimals):
        amount = 10 ** decimals[sending]
        min_dy = swap.get_dy(sending, receiving, amount)
>       with boa.reverts():

tests/pools/exchange/test_exchange_reverts.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_min_dy_imbalanced[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-1-0] _
[gw5] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x549c166e8415719C7bE64f15b9032C4047B455C8')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xC63842FCb188b1569FFf2cB4020376aAd2f02D0a, compiled with vyper-0.3.10+913...191111384773557843789405869476999018158, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0xC6F965054b33002fdD1b03372E2B8e34FEFCAFB2, compiled with vyper-0.3.10+9136169>
<storage...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x68Bb7236284B09c8Ec248da410f7cEc34ff1c28A, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_token_types = (0, 1), metapool_token_type = 1, sending = 1, receiving = 0
decimals = [18, 18]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_min_dy_imbalanced(
        bob,
        swap,
        pool_type,
        pool_tokens,
        underlying_tokens,
        pool_token_types,
        metapool_token_type,
        sending,
        receiving,
        decimals,
    ):
        amounts = [1_500_000 * 10**i for i in decimals]
        scaler = amounts.copy()  # used to scale token amounts when decimals are different
    
        amounts[sending] = 0
        amounts[receiving] = amounts[receiving]
    
        swap.add_liquidity(amounts, 0, sender=bob)
    
        # oracle
        rate = 1
        if pool_type == 0:
            if pool_token_types[sending] == 1:
                rate = rate / (pool_tokens[sending].exchangeRate() / 10**18)
            if pool_token_types[receiving] == 1:
                rate = rate * (pool_tokens[receiving].exchangeRate() / 10**18)
    
        elif pool_type == 1:
            if metapool_token_type == 1:
                if sending == 0:
                    rate = rate / (underlying_tokens[0].exchangeRate() / 10**18)
    
                if receiving == 0:
                    rate = rate * (underlying_tokens[0].exchangeRate() / 10**18)
    
        # we need to scale these appropriately for tokens with different decimal values
        min_dy_sending = swap.get_dy(sending, receiving, scaler[sending]) / scaler[receiving]
        min_dy_receiving = swap.get_dy(receiving, sending, scaler[receiving]) / scaler[sending]
    
>       assert min_dy_sending * rate > min_dy_receiving
E       assert (0.9932788815556346 * 1.006470359024) > 1.00542747739311

tests/pools/exchange/test_exchange.py:84: AssertionError
_ test_insufficient_balance[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1] _
[gw8] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

charlie = Address('0xF01c0ca85179AA6746101522c9b31B89aB7036A0')
pool_tokens = [<contracts/mocks/ERC20.vy at 0x368a808F8f1e3d1EaAA7ac6228988E14D3732F61, compiled with vyper-0.3.10+9136169>
<storage...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x6bF1EF17c2fC7dbDE9dD04F8640A752D832660Bb, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x3522233c6c977c650Cfb619ccb4161F47eAe4B63, compiled with vyper-0.3.10+913...531393751694496307252780476908767229615, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
sending = 0, receiving = 1, decimals = [18, 18]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_insufficient_balance(charlie, pool_tokens, underlying_tokens, swap, sending, receiving, decimals):
        amount = 10 ** decimals[sending]
    
        for token in pool_tokens + underlying_tokens:
            assert token.balanceOf(charlie) == 0
    
        # Charlie doesn't have any tokens, all balances are 0
>       with boa.reverts(), boa.env.prank(charlie):

tests/pools/exchange/test_exchange_reverts.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x4d4d2c444Af928397BD5c01a1B59673458B65F60')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x19aB19a8c55328Fa19922452D958983024E32Bb5, compiled with vyper-0.3.10+913...531393751694496307252780476908767229615, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
charlie = Address('0x090cb88c0706E08C152A1050629DE9C00f2E6bcD'), pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0x6B3F945a31c28FEa4Ab19eF5b82eCC8F0F601E3A, compiled with vyper-0.3.10+9136169>
<storage...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0x6B3F945a31c28FEa4Ab19eF5b82eCC8F0F601E3A, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]
pool_size = 2
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    def test_remove_liquidity(
        bob, swap, charlie, pool_type, pool_tokens, underlying_tokens, initial_amounts, pool_size, deposit_amounts
    ):
        swap.add_liquidity(deposit_amounts, 0, sender=bob)
        initial_amount = swap.balanceOf(bob)
        withdraw_amount = initial_amount // 4
        swap.remove_liquidity(withdraw_amount, [0] * pool_size, charlie, sender=bob)
    
        i = 0
        if pool_type == 0:
            for coin, amount in zip(pool_tokens, deposit_amounts):
                assert coin.balanceOf(swap) + coin.balanceOf(charlie) == pytest.approx(deposit_amounts[0] * 2, rel=1.5e-2)
                i += 1
        else:
            for coin, amount in zip(underlying_tokens[:2], deposit_amounts):
>               assert coin.balanceOf(swap) + coin.balanceOf(charlie) == pytest.approx(deposit_amounts[0] * 2, rel=1.5e-2)
E               assert 6000000000000000000000000 == 3000000000000...0000 ± 4.5e+22
E                 comparison failed
E                 Obtained: 6000000000000000000000000
E                 Expected: 3000000000000000000000000 ± 4.5e+22

tests/pools/exchange/test_exchange_receiver.py:48: AssertionError
______________________________ test_add_base_pool ______________________________
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

empty_factory = <CurveStableSwapFactoryNG at 0xbc1EA5cb554b24914D713da25F620f14Eb05615b, compiled with vyper-0.3.10+9136169>
<storage:...0000000000000000000000000000000, fee_receiver=0xFD8E1e6b5461Af01f31eAAa1A3855D239da84497, markets={}, market_counts={}>
owner = Address('0xDf85dfB065dF5460f31DD64ACb54f6685AFbEbae')
forked_chain = None

    def test_add_base_pool(empty_factory, owner, forked_chain):
        fraxusdc = "0xdcef968d416a41cdac0ed8702fac8128a64241a2"
        lp_token = "0x3175df0976dfa876431c2e9ee6bc45b65d3473cc"
    
        assert empty_factory.base_pool_count() == 0
>       empty_factory.add_base_pool(fraxusdc, lp_token, [0, 0], 2, sender=owner)

tests/factory/test_factory_forked.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

empty_factory = <CurveStableSwapFactoryNG at 0xbc1EA5cb554b24914D713da25F620f14Eb05615b, compiled with vyper-0.3.10+9136169>
<storage:...0000000000000000000000000000000, fee_receiver=0xFD8E1e6b5461Af01f31eAAa1A3855D239da84497, markets={}, market_counts={}>
owner = Address('0xDf85dfB065dF5460f31DD64ACb54f6685AFbEbae')
forked_chain = None

    def test_add_base_pool(empty_factory, owner, forked_chain):
        fraxusdc = "0xdcef968d416a41cdac0ed8702fac8128a64241a2"
        lp_token = "0x3175df0976dfa876431c2e9ee6bc45b65d3473cc"
    
        assert empty_factory.base_pool_count() == 0
>       empty_factory.add_base_pool(fraxusdc, lp_token, [0, 0], 2, sender=owner)
E       boa.contracts.base_evm_contract.BoaError: Revert(b'')
E       
E       <CurveStableSwapFactoryNG at 0xbc1EA5cb554b24914D713da25F620f14Eb05615b, compiled with vyper-0.3.10+9136169>
E       <storage: admin=0xDf85dfB065dF5460f31DD64ACb54f6685AFbEbae, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=0, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x0000000000000000000000000000000000000000, gauge_implementation=0x0000000000000000000000000000000000000000, views_implementation=0x0000000000000000000000000000000000000000, fee_receiver=0xFD8E1e6b5461Af01f31eAAa1A3855D239da84497, markets={}, market_counts={}>
E        <compiler: returndatasize too small>
E         contract "CurveStableSwapFactoryNG:750", function "add_base_pool", line 750:15 
E              749             break
E         ---> 750         coin = CurvePool(_base_pool).coins(i)
E         ------------------------^
E              751         assert coin != 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE  # dev: native token is not supported
E        <locals: _base_pool=0xDcEF968d416a41Cdac0ED8702fAC8128A64241A2, _base_lp_token=0x3175Df0976dFA876431C2E9eE6Bc45b65d3473CC, _asset_types=[0, 0], length=0, decimals=0, coins=[], coin=0x0000000000000000000000000000000000000000>

tests/factory/test_factory_forked.py:16: BoaError
_ test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x7D0EAadeDeCc054426644160bc119d15266b35E8')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xe03C37442F2098B47f50cFb8Dd88dee5729b2706, compiled with vyper-0.3.10+913...871676118615434770716155084340535441072, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
charlie = Address('0xa67bC19f27B744451B899f64E42BE458d0f61295'), pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0x096B5b010a641DE955941557A542e6AA3803D3C4, compiled with vyper-0.3.10+9136169>
<storage...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xE29650cA98Ae77dBCD41D7649a298C9f1f9C5762, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]
pool_size = 2
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]

    def test_remove_liquidity(
        bob, swap, charlie, pool_type, pool_tokens, underlying_tokens, initial_amounts, pool_size, deposit_amounts
    ):
        swap.add_liquidity(deposit_amounts, 0, sender=bob)
        initial_amount = swap.balanceOf(bob)
        withdraw_amount = initial_amount // 4
        swap.remove_liquidity(withdraw_amount, [0] * pool_size, charlie, sender=bob)
    
        i = 0
        if pool_type == 0:
            for coin, amount in zip(pool_tokens, deposit_amounts):
                assert coin.balanceOf(swap) + coin.balanceOf(charlie) == pytest.approx(deposit_amounts[0] * 2, rel=1.5e-2)
                i += 1
        else:
            for coin, amount in zip(underlying_tokens[:2], deposit_amounts):
>               assert coin.balanceOf(swap) + coin.balanceOf(charlie) == pytest.approx(deposit_amounts[0] * 2, rel=1.5e-2)
E               assert 5980713111121510439640553 == 2980713712134...0290 ± 4.5e+22
E                 comparison failed
E                 Obtained: 5980713111121510439640553
E                 Expected: 2980713712134728521010290 ± 4.5e+22

tests/pools/exchange/test_exchange_receiver.py:48: AssertionError
_ test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xC0feba232945E3E8FebBE9bE35dD1f1b3D3FE9bd')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x710d5beF00289D10d70D8eDF36684e3A9432049c, compiled with vyper-0.3.10+913...871676118615434770716155084340535441072, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
charlie = Address('0xB563Cf7925D664a311efEAB6c1249f8e1BF22018'), pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0xCF52c131F0AC35440d9EDA60b0Aaf8CaCD0a47aa, compiled with vyper-0.3.10+9136169>
<storage...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x1931721e96f2c7BF6EC860F5cEDB4Da8719CDc0d, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]
pool_size = 2
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    def test_remove_liquidity(
        bob, swap, charlie, pool_type, pool_tokens, underlying_tokens, initial_amounts, pool_size, deposit_amounts
    ):
        swap.add_liquidity(deposit_amounts, 0, sender=bob)
        initial_amount = swap.balanceOf(bob)
        withdraw_amount = initial_amount // 4
        swap.remove_liquidity(withdraw_amount, [0] * pool_size, charlie, sender=bob)
    
        i = 0
        if pool_type == 0:
            for coin, amount in zip(pool_tokens, deposit_amounts):
                assert coin.balanceOf(swap) + coin.balanceOf(charlie) == pytest.approx(deposit_amounts[0] * 2, rel=1.5e-2)
                i += 1
        else:
            for coin, amount in zip(underlying_tokens[:2], deposit_amounts):
>               assert coin.balanceOf(swap) + coin.balanceOf(charlie) == pytest.approx(deposit_amounts[0] * 2, rel=1.5e-2)
E               assert 6000019499698999921617727 == 3000000000000...0000 ± 4.5e+22
E                 comparison failed
E                 Obtained: 6000019499698999921617727
E                 Expected: 3000000000000000000000000 ± 4.5e+22

tests/pools/exchange/test_exchange_receiver.py:48: AssertionError
_ test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x6B6b66c3CE1f1FE8d024379dA3C963aDfbd899F1')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x209554942146F8B8720c9392aa38412d2192087D, compiled with vyper-0.3.10+913...871676118615434770716155084340535441072, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
charlie = Address('0xacabDA7efc01b07DF4edeB3A56877C4e654F390e'), pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0xbE90f61Ef7Db8188f3926d7121E97966977077dE, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=TKN1, symbol=TKN1, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0xbE90f61Ef7Db8188f3926d7121E97966977077dE, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]
pool_size = 2
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    def test_remove_liquidity(
        bob, swap, charlie, pool_type, pool_tokens, underlying_tokens, initial_amounts, pool_size, deposit_amounts
    ):
        swap.add_liquidity(deposit_amounts, 0, sender=bob)
        initial_amount = swap.balanceOf(bob)
        withdraw_amount = initial_amount // 4
        swap.remove_liquidity(withdraw_amount, [0] * pool_size, charlie, sender=bob)
    
        i = 0
        if pool_type == 0:
            for coin, amount in zip(pool_tokens, deposit_amounts):
                assert coin.balanceOf(swap) + coin.balanceOf(charlie) == pytest.approx(deposit_amounts[0] * 2, rel=1.5e-2)
                i += 1
        else:
            for coin, amount in zip(underlying_tokens[:2], deposit_amounts):
>               assert coin.balanceOf(swap) + coin.balanceOf(charlie) == pytest.approx(deposit_amounts[0] * 2, rel=1.5e-2)
E               assert 6000000000000000000000000 == 3000000000000...0000 ± 4.5e+22
E                 comparison failed
E                 Obtained: 6000000000000000000000000
E                 Expected: 3000000000000000000000000 ± 4.5e+22

tests/pools/exchange/test_exchange_receiver.py:48: AssertionError
_ test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xaADb3484865DA36cCc8B4cc6E947E9cB0262B264')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x1DD7E64623BF38776AA1177b1C2265f85738fb97, compiled with vyper-0.3.10+913...871676118615434770716155084340535441072, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
charlie = Address('0x3496d31cB618039b53Eec9cA93961a88C5aE0827'), pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0x81536668A2c5ce09cadD847a9625eD6cB58AcC8e, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=TKN1, symbol=TKN1, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xC07Af736e07E94B3717E93a5438e7D92C0dA9511, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]
pool_size = 2
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]

    def test_remove_liquidity(
        bob, swap, charlie, pool_type, pool_tokens, underlying_tokens, initial_amounts, pool_size, deposit_amounts
    ):
        swap.add_liquidity(deposit_amounts, 0, sender=bob)
        initial_amount = swap.balanceOf(bob)
        withdraw_amount = initial_amount // 4
        swap.remove_liquidity(withdraw_amount, [0] * pool_size, charlie, sender=bob)
    
        i = 0
        if pool_type == 0:
            for coin, amount in zip(pool_tokens, deposit_amounts):
                assert coin.balanceOf(swap) + coin.balanceOf(charlie) == pytest.approx(deposit_amounts[0] * 2, rel=1.5e-2)
                i += 1
        else:
            for coin, amount in zip(underlying_tokens[:2], deposit_amounts):
>               assert coin.balanceOf(swap) + coin.balanceOf(charlie) == pytest.approx(deposit_amounts[0] * 2, rel=1.5e-2)
E               assert 5980713111121510439640553 == 2980713712134...0290 ± 4.5e+22
E                 comparison failed
E                 Obtained: 5980713111121510439640553
E                 Expected: 2980713712134728521010290 ± 4.5e+22

tests/pools/exchange/test_exchange_receiver.py:48: AssertionError
_ test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x936A53173067887D58d1aC40D89C356460cF78F2')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x4916437A3f3f6C0bd61709D54EeF56d61a9c2652, compiled with vyper-0.3.10+913...211958485536373234179529691772303652529, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
charlie = Address('0x8f465584Ba45BED585E2c37e04De0Dd4beC21866'), pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0x9479E801697969332d8128842F8b3B81Ddc26CA6, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=TKN1, symbol=TKN1, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xbcdFc73110386099e1ffebBafc234E4426aC937e, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]
pool_size = 2
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    def test_remove_liquidity(
        bob, swap, charlie, pool_type, pool_tokens, underlying_tokens, initial_amounts, pool_size, deposit_amounts
    ):
        swap.add_liquidity(deposit_amounts, 0, sender=bob)
        initial_amount = swap.balanceOf(bob)
        withdraw_amount = initial_amount // 4
        swap.remove_liquidity(withdraw_amount, [0] * pool_size, charlie, sender=bob)
    
        i = 0
        if pool_type == 0:
            for coin, amount in zip(pool_tokens, deposit_amounts):
                assert coin.balanceOf(swap) + coin.balanceOf(charlie) == pytest.approx(deposit_amounts[0] * 2, rel=1.5e-2)
                i += 1
        else:
            for coin, amount in zip(underlying_tokens[:2], deposit_amounts):
>               assert coin.balanceOf(swap) + coin.balanceOf(charlie) == pytest.approx(deposit_amounts[0] * 2, rel=1.5e-2)
E               assert 6000019499698999921617727 == 3000000000000...0000 ± 4.5e+22
E                 comparison failed
E                 Obtained: 6000019499698999921617727
E                 Expected: 3000000000000000000000000 ± 4.5e+22

tests/pools/exchange/test_exchange_receiver.py:48: AssertionError
_ test_remove_imbalanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xb0EdE80C9E31784d283c93961A541ab9d9657aa9')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xde7e614A7Cc755660E6D527a8b9F8a3Fb836e01a, compiled with vyper-0.3.10+913...552240852457311697642904299204071863986, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
charlie = Address('0xF8A66e5f122de6037838fafcEefBaa0Bf2Ad3540'), pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x551f7E8C4c543D253096553eb9bD0eb25eD6aCbc, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0xA83768Bcc21F6A06003A8a5e415b835507f98046, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    def test_remove_imbalanced(
        bob, swap, charlie, pool_type, pool_tokens, underlying_tokens, initial_amounts, deposit_amounts
    ):
        swap.add_liquidity(deposit_amounts, 0, sender=bob)
        balance = swap.balanceOf(bob)
        amounts = [i // 4 for i in initial_amounts]
        swap.remove_liquidity_imbalance(amounts, balance, charlie, sender=bob)
    
        if pool_type == 0:
            for i, coin in enumerate(pool_tokens):
                assert coin.balanceOf(charlie) == pytest.approx(amounts[i], rel=1.5e-2)
                assert coin.balanceOf(swap) == pytest.approx(initial_amounts[i] - amounts[i], rel=1.5e-2)
        else:
            for i, coin in enumerate(underlying_tokens[:2]):
                assert coin.balanceOf(charlie) == pytest.approx(amounts[i], rel=1.5e-2)
>               assert coin.balanceOf(swap) == pytest.approx(initial_amounts[i] - amounts[i], rel=1.5e-2)
E               assert 5250000000000000000000000 == 2250000000000...0000 ± 3.4e+22
E                 comparison failed
E                 Obtained: 5250000000000000000000000
E                 Expected: 2250000000000000000000000 ± 3.4e+22

tests/pools/exchange/test_exchange_receiver.py:70: AssertionError
_ test_remove_imbalanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xa57b2a0B0ac8118d84f5c33396EfD3CA167c2F38')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x0910957797D8f43732F0bd8BD2F5C462d9A8BF28, compiled with vyper-0.3.10+913...552240852457311697642904299204071863986, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
charlie = Address('0x271cAb514c0CcC6b7A8FE1C38022Ab324F2D3f31'), pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xc8868E5509b68Bb6A7255e29278d303C26511134, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xc8868E5509b68Bb6A7255e29278d303C26511134, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]

    def test_remove_imbalanced(
        bob, swap, charlie, pool_type, pool_tokens, underlying_tokens, initial_amounts, deposit_amounts
    ):
        swap.add_liquidity(deposit_amounts, 0, sender=bob)
        balance = swap.balanceOf(bob)
        amounts = [i // 4 for i in initial_amounts]
        swap.remove_liquidity_imbalance(amounts, balance, charlie, sender=bob)
    
        if pool_type == 0:
            for i, coin in enumerate(pool_tokens):
                assert coin.balanceOf(charlie) == pytest.approx(amounts[i], rel=1.5e-2)
                assert coin.balanceOf(swap) == pytest.approx(initial_amounts[i] - amounts[i], rel=1.5e-2)
        else:
            for i, coin in enumerate(underlying_tokens[:2]):
                assert coin.balanceOf(charlie) == pytest.approx(amounts[i], rel=1.5e-2)
>               assert coin.balanceOf(swap) == pytest.approx(initial_amounts[i] - amounts[i], rel=1.5e-2)
E               assert 5230713712134728521010290 == 2250000000000...0000 ± 3.4e+22
E                 comparison failed
E                 Obtained: 5230713712134728521010290
E                 Expected: 2250000000000000000000000 ± 3.4e+22

tests/pools/exchange/test_exchange_receiver.py:70: AssertionError
_ test_remove_imbalanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x39fB4e8134831A83822D3Eea486Af2bDdD551BEf')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xC41aAc85d150D74412bBa272A4484cd3704eB4aB, compiled with vyper-0.3.10+913...552240852457311697642904299204071863986, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
charlie = Address('0x99ABa03c0F3f9D0774996aC503DeF6fe9D9D753D'), pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x9787b7663e9f09145b885526C8c525C8E0bfbacE, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x884365CB7CF438763383eA6bD9f57E70e191f877, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    def test_remove_imbalanced(
        bob, swap, charlie, pool_type, pool_tokens, underlying_tokens, initial_amounts, deposit_amounts
    ):
        swap.add_liquidity(deposit_amounts, 0, sender=bob)
        balance = swap.balanceOf(bob)
        amounts = [i // 4 for i in initial_amounts]
        swap.remove_liquidity_imbalance(amounts, balance, charlie, sender=bob)
    
        if pool_type == 0:
            for i, coin in enumerate(pool_tokens):
                assert coin.balanceOf(charlie) == pytest.approx(amounts[i], rel=1.5e-2)
                assert coin.balanceOf(swap) == pytest.approx(initial_amounts[i] - amounts[i], rel=1.5e-2)
        else:
            for i, coin in enumerate(underlying_tokens[:2]):
                assert coin.balanceOf(charlie) == pytest.approx(amounts[i], rel=1.5e-2)
>               assert coin.balanceOf(swap) == pytest.approx(initial_amounts[i] - amounts[i], rel=1.5e-2)
E               assert 5250013500010500002999993 == 2250000000000...0000 ± 3.4e+22
E                 comparison failed
E                 Obtained: 5250013500010500002999993
E                 Expected: 2250000000000000000000000 ± 3.4e+22

tests/pools/exchange/test_exchange_receiver.py:70: AssertionError
_ test_remove_imbalanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x7982d89cAF3f20C6FEAc0b41b22bB7c3eEf41F6B')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x8ca102164148652d8bdd1a6663Fe661d979CFfF7, compiled with vyper-0.3.10+913...552240852457311697642904299204071863986, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
charlie = Address('0xbD7DcE48573CB6A9e628053F64084DbF7b8D4a91'), pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x9978835ae359978B126a86861Bc51b719A983A34, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0x227C69e0C855e539D1A2694Cb8631506913d0ccA, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    def test_remove_imbalanced(
        bob, swap, charlie, pool_type, pool_tokens, underlying_tokens, initial_amounts, deposit_amounts
    ):
        swap.add_liquidity(deposit_amounts, 0, sender=bob)
        balance = swap.balanceOf(bob)
        amounts = [i // 4 for i in initial_amounts]
        swap.remove_liquidity_imbalance(amounts, balance, charlie, sender=bob)
    
        if pool_type == 0:
            for i, coin in enumerate(pool_tokens):
                assert coin.balanceOf(charlie) == pytest.approx(amounts[i], rel=1.5e-2)
                assert coin.balanceOf(swap) == pytest.approx(initial_amounts[i] - amounts[i], rel=1.5e-2)
        else:
            for i, coin in enumerate(underlying_tokens[:2]):
                assert coin.balanceOf(charlie) == pytest.approx(amounts[i], rel=1.5e-2)
>               assert coin.balanceOf(swap) == pytest.approx(initial_amounts[i] - amounts[i], rel=1.5e-2)
E               assert 5250000000000000000000000 == 2250000000000...0000 ± 3.4e+22
E                 comparison failed
E                 Obtained: 5250000000000000000000000
E                 Expected: 2250000000000000000000000 ± 3.4e+22

tests/pools/exchange/test_exchange_receiver.py:70: AssertionError
_ test_remove_imbalanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x5C4a9062Ce94bd6c31d91684EAd5F9fd7982Ebe2')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xd0a2f6331819253b1c4a5257fF214b92cB698387, compiled with vyper-0.3.10+913...892523219378250161106278906635840075443, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
charlie = Address('0xc414003616174c6758BbFaD1511F284e55356489'), pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x085eD90e4f01E10bbB4B0b20cAaB748dF621941F, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xDff005241A26665ffdb29E17340B48F1f74E79Fb, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]

    def test_remove_imbalanced(
        bob, swap, charlie, pool_type, pool_tokens, underlying_tokens, initial_amounts, deposit_amounts
    ):
        swap.add_liquidity(deposit_amounts, 0, sender=bob)
        balance = swap.balanceOf(bob)
        amounts = [i // 4 for i in initial_amounts]
        swap.remove_liquidity_imbalance(amounts, balance, charlie, sender=bob)
    
        if pool_type == 0:
            for i, coin in enumerate(pool_tokens):
                assert coin.balanceOf(charlie) == pytest.approx(amounts[i], rel=1.5e-2)
                assert coin.balanceOf(swap) == pytest.approx(initial_amounts[i] - amounts[i], rel=1.5e-2)
        else:
            for i, coin in enumerate(underlying_tokens[:2]):
                assert coin.balanceOf(charlie) == pytest.approx(amounts[i], rel=1.5e-2)
>               assert coin.balanceOf(swap) == pytest.approx(initial_amounts[i] - amounts[i], rel=1.5e-2)
E               assert 5230713712134728521010290 == 2250000000000...0000 ± 3.4e+22
E                 comparison failed
E                 Obtained: 5230713712134728521010290
E                 Expected: 2250000000000000000000000 ± 3.4e+22

tests/pools/exchange/test_exchange_receiver.py:70: AssertionError
_ test_remove_imbalanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xaF88E7Ec32883843D5987Ff9bE3091423311Bf0e')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x36fC0Ab2218DE638d4f21354c340927a05253E50, compiled with vyper-0.3.10+913...892523219378250161106278906635840075443, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
charlie = Address('0x824CD8a4bFe322439EEF46623b18f231D3587104'), pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xF102dA27F6C62f023516D51f5dA37653531Ee1a5, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xF102dA27F6C62f023516D51f5dA37653531Ee1a5, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    def test_remove_imbalanced(
        bob, swap, charlie, pool_type, pool_tokens, underlying_tokens, initial_amounts, deposit_amounts
    ):
        swap.add_liquidity(deposit_amounts, 0, sender=bob)
        balance = swap.balanceOf(bob)
        amounts = [i // 4 for i in initial_amounts]
        swap.remove_liquidity_imbalance(amounts, balance, charlie, sender=bob)
    
        if pool_type == 0:
            for i, coin in enumerate(pool_tokens):
                assert coin.balanceOf(charlie) == pytest.approx(amounts[i], rel=1.5e-2)
                assert coin.balanceOf(swap) == pytest.approx(initial_amounts[i] - amounts[i], rel=1.5e-2)
        else:
            for i, coin in enumerate(underlying_tokens[:2]):
                assert coin.balanceOf(charlie) == pytest.approx(amounts[i], rel=1.5e-2)
>               assert coin.balanceOf(swap) == pytest.approx(initial_amounts[i] - amounts[i], rel=1.5e-2)
E               assert 5250013500010500002999993 == 2250000000000...0000 ± 3.4e+22
E                 comparison failed
E                 Obtained: 5250013500010500002999993
E                 Expected: 2250000000000000000000000 ± 3.4e+22

tests/pools/exchange/test_exchange_receiver.py:70: AssertionError
_ test_withdraw_one_coin[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-0-1] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xf68b218Ed6d6bd0C41F7e2f978f365d50e251664')
bob = Address('0xE3E9659f71743126b4E2EAa2d20E766F22267481')
fee_receiver = Address('0xd620Cc4991515b65245605De9f3eb7634AB33680')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x78763Ef1bb9D0B77488e5D646C0ce858D7Ba6c37, compiled with vyper-0.3.10+913...232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x3F753Daa3597e0c0D1ba422ac95bBe4dE28898c8, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x3F753Daa3597e0c0D1ba422ac95bBe4dE28898c8, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
sending = 0, receiving = 1
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_withdraw_one_coin(
        alice, bob, fee_receiver, swap, pool_type, pool_tokens, underlying_tokens, sending, receiving, initial_amounts
    ):
        swap.exchange(sending, receiving, initial_amounts[sending], 0, sender=bob)
    
        admin_balance = swap.admin_balances(receiving)
    
        assert admin_balance > 0
>       assert swap.admin_balances(sending) == 0
E       assert 360452982813495261 == 0
E        +  where 360452982813495261 = contracts/main/CurveStableSwapMetaNG.vy.admin_balances(0)
E        +    where contracts/main/CurveStableSwapMetaNG.vy.admin_balances = <contracts/main/CurveStableSwapMetaNG.vy at 0x78763Ef1bb9D0B77488e5D646C0ce858D7Ba6c37, compiled with vyper-0.3.10+913...232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>.admin_balances

tests/pools/general/test_fees.py:29: AssertionError
_ test_withdraw_one_coin[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-1-0] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x8d495da15BA16fDE9d15A10CE75851272a01d944')
bob = Address('0xb48FdDC7F2FE5d545b743ecA75EcF3e039e96080')
fee_receiver = Address('0x824CD8a4bFe322439EEF46623b18f231D3587104')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x53CAbB47e066f52467C9B318Aa076ee0Bb3063c6, compiled with vyper-0.3.10+913...232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x83ab343C1598C9860Cf3c95a31Fc65e4E132a7d7, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x83ab343C1598C9860Cf3c95a31Fc65e4E132a7d7, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
sending = 1, receiving = 0
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_withdraw_one_coin(
        alice, bob, fee_receiver, swap, pool_type, pool_tokens, underlying_tokens, sending, receiving, initial_amounts
    ):
        swap.exchange(sending, receiving, initial_amounts[sending], 0, sender=bob)
    
        admin_balance = swap.admin_balances(receiving)
    
        assert admin_balance > 0
>       assert swap.admin_balances(sending) == 0
E       assert 362783294291381832 == 0
E        +  where 362783294291381832 = contracts/main/CurveStableSwapMetaNG.vy.admin_balances(1)
E        +    where contracts/main/CurveStableSwapMetaNG.vy.admin_balances = <contracts/main/CurveStableSwapMetaNG.vy at 0x53CAbB47e066f52467C9B318Aa076ee0Bb3063c6, compiled with vyper-0.3.10+913...232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>.admin_balances

tests/pools/general/test_fees.py:29: AssertionError
_ test_min_dy_too_high[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-1-0] _
[gw8] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xb677dAC32e73f99Db8F6feB181b2f87C670F2D6F')
swap = <contracts/main/CurveStableSwapNG.vy at 0xf9204e0094dBe3869ddc57457f46e7c4391199a1, compiled with vyper-0.3.10+9136169...232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=2999999999999999999999999, nonces={}>
sending = 1, receiving = 0, decimals = [18, 18]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_min_dy_too_high(bob, swap, sending, receiving, decimals):
        amount = 10 ** decimals[sending]
        min_dy = swap.get_dy(sending, receiving, amount)
>       with boa.reverts():

tests/pools/exchange/test_exchange_reverts.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_withdraw_one_coin[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x7ebd527631b7Df838b4AE36EA31a52Cb5F9c590A')
bob = Address('0xBE56D304B7093Aa31C5466b451f4680fF657b775')
fee_receiver = Address('0xBDAEa97313f2a0DdFCcA552BA728b736e0b071bc')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x9F6700eed3a08251E24fA6E2B1913a3340F1F3f3, compiled with vyper-0.3.10+913...232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x406b863Ed11352f14c9eca65239E566a5819e81f, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x2B8e7A6b2fEB6E68b4BF29c2B924A9C87F4e01e1, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
sending = 0, receiving = 1
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_withdraw_one_coin(
        alice, bob, fee_receiver, swap, pool_type, pool_tokens, underlying_tokens, sending, receiving, initial_amounts
    ):
        swap.exchange(sending, receiving, initial_amounts[sending], 0, sender=bob)
    
        admin_balance = swap.admin_balances(receiving)
    
        assert admin_balance > 0
>       assert swap.admin_balances(sending) == 0
E       assert 150000000049900 == 0
E        +  where 150000000049900 = contracts/main/CurveStableSwapMetaNG.vy.admin_balances(0)
E        +    where contracts/main/CurveStableSwapMetaNG.vy.admin_balances = <contracts/main/CurveStableSwapMetaNG.vy at 0x9F6700eed3a08251E24fA6E2B1913a3340F1F3f3, compiled with vyper-0.3.10+913...232805586299188624569653514067608286900, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>.admin_balances

tests/pools/general/test_fees.py:29: AssertionError
_ test_ramp_A_insufficient_time[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw8] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x9D02ED59e321891e703634fb03Cca14131eBDc22')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x576E5A85b9AE3E99bE9e4C1f03AACeeFc4059e26, compiled with vyper-0.3.10+913..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_insufficient_time(owner, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + MIN_RAMP_TIME - 1, sender=owner)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:85: AttributeError
_ test_withdraw_one_coin[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-1-0] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x56Ea6411b3E0EEDe1Be36D2d28CFe0A7466fE818')
bob = Address('0x5B1a66e923fe2Dda916C47dc7542347A14416621')
fee_receiver = Address('0x3BB3F12e9aDB4F646f830e27D2BAcF3ffcBD7C2B')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xa9D01d4bA44CCAB0F3159A9206D61e5ac9636340, compiled with vyper-0.3.10+913...573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xCE344D699D285909F8a1898a1bC4dE404A3160DC, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xd9Db2b27aCDdab93d35Bea777BE6Fc8f06f85719, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
sending = 1, receiving = 0
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_withdraw_one_coin(
        alice, bob, fee_receiver, swap, pool_type, pool_tokens, underlying_tokens, sending, receiving, initial_amounts
    ):
        swap.exchange(sending, receiving, initial_amounts[sending], 0, sender=bob)
    
        admin_balance = swap.admin_balances(receiving)
    
        assert admin_balance > 0
>       assert swap.admin_balances(sending) == 0
E       assert 149999999950099 == 0
E        +  where 149999999950099 = contracts/main/CurveStableSwapMetaNG.vy.admin_balances(1)
E        +    where contracts/main/CurveStableSwapMetaNG.vy.admin_balances = <contracts/main/CurveStableSwapMetaNG.vy at 0xa9D01d4bA44CCAB0F3159A9206D61e5ac9636340, compiled with vyper-0.3.10+913...573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>.admin_balances

tests/pools/general/test_fees.py:29: AssertionError
_ test_ramp_A_value_down[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xBc97E9aBcf02Ddef17B9226Eb4C21B4e30414EBa')
swap = <contracts/main/CurveStableSwapNG.vy at 0xC3B2507b7BcE495B7D75A418748032D664C72805, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_down(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:43: AttributeError
_ test_ramp_A_value_down[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x5342F68aDb9c71346a1323b57744FBF1E607386D')
swap = <contracts/main/CurveStableSwapNG.vy at 0x38f93B3429291e28e7449b1dCc707b9A9AA9d5ef, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_down(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:43: AttributeError
_ test_ramp_A_value_down[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xf6a8311b7e948a53614d6eB9E87d8E5bdCDF2565')
swap = <contracts/main/CurveStableSwapNG.vy at 0x513904d0Cb826Bd911fE92Ea46f4e8256E11569c, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_down(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:43: AttributeError
_ test_ramp_A_value_down[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xB4a6C68b63F6B5bDbC36EcDC2202FcFD848aa439')
swap = <contracts/main/CurveStableSwapNG.vy at 0x3A298e9604643F33a97Bed86fBB65045F668C897, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_down(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:43: AttributeError
_ test_ramp_A_value_down[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x742B39c8B25fB05eC6e4Eef4F35D189d34316Cc9')
swap = <contracts/main/CurveStableSwapNG.vy at 0x2E4e53fd4daCb5CD1b1F6008A48Bf020265727fd, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_down(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:43: AttributeError
_ test_ramp_A_value_down[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x315374c0254781fafF873dD51440e9c7BaF53D76')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x30d816699aD548716953D1e6b12CE7347a1cC004, compiled with vyper-0.3.10+913..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_down(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:43: AttributeError
_ test_ramp_A_value_down[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x45e17008143D7Ee028F6C9CdDc18E9F236417CcB')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x8EE087024E11b21f81D4F60eF036b15201362C7c, compiled with vyper-0.3.10+913..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_down(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:43: AttributeError
_ test_ramp_A_value_down[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x981b6b44B84A7b3F9b35EdC55F7E702df6A1506c')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x996EA5343A66bc672ea2863b61b70D59df251251, compiled with vyper-0.3.10+913..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_down(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:43: AttributeError
_ test_ramp_A_value_down[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x4F16F59172fAd2C6164eca31B0066752c88CFFB1')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x8090Ebd0a29D07fC3Cf2cf3daa26DB511720a1eE, compiled with vyper-0.3.10+913..., ma_last_time=586759672573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_down(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:43: AttributeError
_ test_ramp_A_value_down[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x04e172426534081E35f7eD1CeE52f87C710B1600')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xD5a440Ee3179237f2C61238dF6E3fc8b288D7e04, compiled with vyper-0.3.10+913..., ma_last_time=586759672913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_down(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:43: AttributeError
_ test_withdraw_one_coin[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-0-1] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xa62E9D9B4b2D83Def9C5292D4409a5B09c0f272F')
bob = Address('0x34c52C4b6C892e8CF1B154286d7b774C0B8d7937')
fee_receiver = Address('0x5FcdA3383913aE1d8DD920C1d080Ea3E63748C16')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x17B4643428b764CB027a92FDaf92ba56DcEC243A, compiled with vyper-0.3.10+913...573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x28a3B7Cff7a305674c18901759b9396C8c3D0d81, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x6a03ba2201489CC74Ee9afD8c8E6dB05462bE8eA, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
sending = 0, receiving = 1
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_withdraw_one_coin(
        alice, bob, fee_receiver, swap, pool_type, pool_tokens, underlying_tokens, sending, receiving, initial_amounts
    ):
        swap.exchange(sending, receiving, initial_amounts[sending], 0, sender=bob)
    
        admin_balance = swap.admin_balances(receiving)
    
        assert admin_balance > 0
>       assert swap.admin_balances(sending) == 0
E       assert 360452982813495261 == 0
E        +  where 360452982813495261 = contracts/main/CurveStableSwapMetaNG.vy.admin_balances(0)
E        +    where contracts/main/CurveStableSwapMetaNG.vy.admin_balances = <contracts/main/CurveStableSwapMetaNG.vy at 0x17B4643428b764CB027a92FDaf92ba56DcEC243A, compiled with vyper-0.3.10+913...573087953220127088033028121499376498357, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>.admin_balances

tests/pools/general/test_fees.py:29: AssertionError
_ test_ramp_A_value_down[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x1184a71F2fd057297aBf0Ef383b841255491A797')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xc794e7AB36cDE9dD96d185721A19ACbf78855dF2, compiled with vyper-0.3.10+913..., ma_last_time=586759672913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_down(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:43: AttributeError
_ test_stop_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x72d786A5c6EFDcDcC730934fc5a459daDB5a889e')
swap = <contracts/main/CurveStableSwapNG.vy at 0x892216490Ec09237A6173a490093F9Fc01623cc6, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_stop_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:63: AttributeError
_ test_stop_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xfFF38978e39d1F2bAc6A91e73059aa6c9670cBc6')
swap = <contracts/main/CurveStableSwapNG.vy at 0xf3a478da43d414Be69A679f3B46e9CecD45C9739, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_stop_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:63: AttributeError
_ test_withdraw_one_coin[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-1-0] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x7490E7324d4e9A2c06f1cABFe7b29f82c0FfB498')
bob = Address('0xd8DfD43fc44BDE328CaCFa656DC17388DFf6294A')
fee_receiver = Address('0xbbc5c878Dd163CD9f55B193Ac1F048d8622eeF6A')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x34bd72C05034B1232A92A7a7935ffbbb8B6C12c9, compiled with vyper-0.3.10+913...913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x70bb29ff7755DC847aF72764BFB6737C5fB7843A, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xA636E932355364cD28cAED2449dbbbC50c841C34, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
sending = 1, receiving = 0
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_withdraw_one_coin(
        alice, bob, fee_receiver, swap, pool_type, pool_tokens, underlying_tokens, sending, receiving, initial_amounts
    ):
        swap.exchange(sending, receiving, initial_amounts[sending], 0, sender=bob)
    
        admin_balance = swap.admin_balances(receiving)
    
        assert admin_balance > 0
>       assert swap.admin_balances(sending) == 0
E       assert 362783294291381832 == 0
E        +  where 362783294291381832 = contracts/main/CurveStableSwapMetaNG.vy.admin_balances(1)
E        +    where contracts/main/CurveStableSwapMetaNG.vy.admin_balances = <contracts/main/CurveStableSwapMetaNG.vy at 0x34bd72C05034B1232A92A7a7935ffbbb8B6C12c9, compiled with vyper-0.3.10+913...913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>.admin_balances

tests/pools/general/test_fees.py:29: AssertionError
_ test_stop_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x776853f53f3dA84E3C0F106e9AEA9E9773fA0FB7')
swap = <contracts/main/CurveStableSwapNG.vy at 0x24dbEdbc73D4822E8B46Dd4125e7aEC975616813, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_stop_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:63: AttributeError
_ test_stop_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xf2bd9c8d217798cC34935750257A8F1c1919F885')
swap = <contracts/main/CurveStableSwapNG.vy at 0x354B2183A4890BFBF86586F77098231EB9fA9Fe6, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_stop_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:63: AttributeError
_ test_stop_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xBE55bF61d95D8C27c73bFDD6789F2f6d6Df069F0')
swap = <contracts/main/CurveStableSwapNG.vy at 0xEA460ebDA612DB24E2cB67869082753Bdf4d22C6, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_stop_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:63: AttributeError
_ test_withdraw_one_coin[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x954C7Ebf64E08240879EedeFe4f6Cda013610CDa')
bob = Address('0x4B91b7ba63FF9025669d917dd4674777a2e2dFE3')
fee_receiver = Address('0x7CD7228EEAE3AD7bf5f4F767c2F479Ee52911a4a')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x40c78DAa42ccF2E025E03E4Fa13d620B94ca9949, compiled with vyper-0.3.10+913...913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x8be8dd0F5EE4c4881b55563d2ad359C0B03B24AE, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x8be8dd0F5EE4c4881b55563d2ad359C0B03B24AE, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
sending = 0, receiving = 1
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_withdraw_one_coin(
        alice, bob, fee_receiver, swap, pool_type, pool_tokens, underlying_tokens, sending, receiving, initial_amounts
    ):
        swap.exchange(sending, receiving, initial_amounts[sending], 0, sender=bob)
    
        admin_balance = swap.admin_balances(receiving)
    
        assert admin_balance > 0
>       assert swap.admin_balances(sending) == 0
E       assert 150000000049900 == 0
E        +  where 150000000049900 = contracts/main/CurveStableSwapMetaNG.vy.admin_balances(0)
E        +    where contracts/main/CurveStableSwapMetaNG.vy.admin_balances = <contracts/main/CurveStableSwapMetaNG.vy at 0x40c78DAa42ccF2E025E03E4Fa13d620B94ca9949, compiled with vyper-0.3.10+913...913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>.admin_balances

tests/pools/general/test_fees.py:29: AssertionError
_ test_stop_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xb3aC5c410204259De05E7377F6F875dFC70d3ea4')
swap = <contracts/main/CurveStableSwapNG.vy at 0x0f5078910506678f51F99Cb2BA90dB3DEF1ade45, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_stop_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:63: AttributeError
_ test_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xEE76dCa6794e01F107e8936d7fAE309557bF6df5')
swap = <contracts/main/CurveStableSwapNG.vy at 0x82a1cCDAF4Ff1a8519E9c8D7543b8c7faAE5DC8E, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + MIN_RAMP_TIME + 5
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:8: AttributeError
_ test_stop_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x07De4417D0Fa3adc43d78a3DdBB6bf87c4855176')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x6B92aA7433ddBC2b823acEA3EF4343a7E55DFc6e, compiled with vyper-0.3.10+913..., ma_last_time=586759672913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_stop_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:63: AttributeError
_ test_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xC07091ce2252b87c528730C6Ed4bB060682215CE')
swap = <contracts/main/CurveStableSwapNG.vy at 0x33F21049355c7dC0b1c846eED6252D125E5073b4, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + MIN_RAMP_TIME + 5
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:8: AttributeError
_ test_stop_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x754d8aF06BC45113f47F306861BDbE767e8bf3C6')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x9F55Af7146756C8EBEaf1EB6F5047269d07D8E36, compiled with vyper-0.3.10+913..., ma_last_time=586759672913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_stop_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:63: AttributeError
_ test_withdraw_one_coin[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-1-0] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xde5cA4cd3A5926d4362d847a41145ff6D266F2b4')
bob = Address('0xf62fB5d45228b4B77F3B8FE03bA3DB5D42b3aE61')
fee_receiver = Address('0xC07091ce2252b87c528730C6Ed4bB060682215CE')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x1D9325E2320f3f75feeA7f4D673eE1015acAaD23, compiled with vyper-0.3.10+913...913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xe5E5033FEc19125E26613C059DC3603737c0aF86, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xe5E5033FEc19125E26613C059DC3603737c0aF86, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
sending = 1, receiving = 0
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_withdraw_one_coin(
        alice, bob, fee_receiver, swap, pool_type, pool_tokens, underlying_tokens, sending, receiving, initial_amounts
    ):
        swap.exchange(sending, receiving, initial_amounts[sending], 0, sender=bob)
    
        admin_balance = swap.admin_balances(receiving)
    
        assert admin_balance > 0
>       assert swap.admin_balances(sending) == 0
E       assert 149999999950099 == 0
E        +  where 149999999950099 = contracts/main/CurveStableSwapMetaNG.vy.admin_balances(1)
E        +    where contracts/main/CurveStableSwapMetaNG.vy.admin_balances = <contracts/main/CurveStableSwapMetaNG.vy at 0x1D9325E2320f3f75feeA7f4D673eE1015acAaD23, compiled with vyper-0.3.10+913...913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>.admin_balances

tests/pools/general/test_fees.py:29: AssertionError
_ test_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x6D0ade7e776B950d787257d1c3B371aB52506b75')
swap = <contracts/main/CurveStableSwapNG.vy at 0x0c5D08DD18D52E6a05eFE1656BDa74dbcfB906c7, compiled with vyper-0.3.10+9136169..., ma_last_time=586759672913370320141065551496402728931144709814, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + MIN_RAMP_TIME + 5
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:8: AttributeError
_ test_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x7f07Cc9286888610dc25239dbF096538E1BC71Fa')
swap = <contracts/main/CurveStableSwapNG.vy at 0x47D9bF99960D4423E433Ce3f12cef9174788F29e, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + MIN_RAMP_TIME + 5
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:8: AttributeError
_ test_stop_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xB10541ae2b2f611BdA4E388967AF0d01f722c887')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x52eC03CDbF706e401E0bc6A64dCE9271A5C96600, compiled with vyper-0.3.10+913..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_stop_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:63: AttributeError
_ test_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xA6beD7362977ec4bEdDcC1A24C2A4128a1626285')
swap = <contracts/main/CurveStableSwapNG.vy at 0x2Aa940149AE92e46854c2B1c53c2e307317126Fe, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + MIN_RAMP_TIME + 5
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:8: AttributeError
_ test_stop_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x4d4500fF9de54E0865e6Fa32ea0abFB51A42234B')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x6FE00d951531C292745DCaa4439F470e9c3978c6, compiled with vyper-0.3.10+913..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_stop_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:63: AttributeError
_ test_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x9D02ED59e321891e703634fb03Cca14131eBDc22')
swap = <contracts/main/CurveStableSwapNG.vy at 0x576E5A85b9AE3E99bE9e4C1f03AACeeFc4059e26, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + MIN_RAMP_TIME + 5
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:8: AttributeError
_ test_stop_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xc5E468F82A3CEd1341aF2A603D1C3C7c34Be77e4')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xA985c221FD5083982decd95BB3d5C8baCf61bf2c, compiled with vyper-0.3.10+913..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_stop_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:63: AttributeError
_ test_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x9c8f93Ad3455CCF34877c7905918DF5EBae4d321')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xDc3Ac3e03A2D986ad2a2fc5BEb3Eb664AC22b126, compiled with vyper-0.3.10+913..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + MIN_RAMP_TIME + 5
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:8: AttributeError
_ test_stop_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x0E822395EE02d6B472e8eCE185d50d431ceC6285')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x6A5b48EB1Cc2B7a4b79Da1241f38eF65ec5b528a, compiled with vyper-0.3.10+913..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_stop_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:63: AttributeError
_ test_ramp_A_only_owner[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xdaad0231F0a0844b0aeCfB8bCf01153b37Ac0EE6')
swap = <contracts/main/CurveStableSwapNG.vy at 0x9C40ad7586587b06cdd595Df3d51c1D0624fD572, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_only_owner(bob, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + 1000000, sender=bob)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:80: AttributeError
_ test_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xa62f1c54C62B7A9c2d4ce6605D63CA479D0F2943')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xFC91838375817447d9Cf8AEAdD00b996dF5C8879, compiled with vyper-0.3.10+913..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + MIN_RAMP_TIME + 5
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:8: AttributeError
_ test_ramp_A_only_owner[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xfca92210A48adF0Bd22EE4883628361b0612aE33')
swap = <contracts/main/CurveStableSwapNG.vy at 0x3103D6C71E8314E1BC124D94eE1b5B9af3E07136, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_only_owner(bob, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + 1000000, sender=bob)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:80: AttributeError
_ test_ramp_A_only_owner[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x0d30BdA28f34660C8e269412B0e2886BD886b8e5')
swap = <contracts/main/CurveStableSwapNG.vy at 0x7A28D25E3AEcE5601C9E2c1dC9a8445c9bd2642f, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_only_owner(bob, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + 1000000, sender=bob)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:80: AttributeError
_ test_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xcC6d10e61Dd49aE8e9178bAbF1E062701f2f4278')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x8A767f62B1F15b6887DFbdF6cf886Dcc1596Fb0e, compiled with vyper-0.3.10+913..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + MIN_RAMP_TIME + 5
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:8: AttributeError
_ test_ramp_A_only_owner[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x7deA6BcfB06F1ae6C4c505e3A0a22C007990f084')
swap = <contracts/main/CurveStableSwapNG.vy at 0xc391d5EB6FCF671d7dAC13090F16CC08494783CC, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_only_owner(bob, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + 1000000, sender=bob)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:80: AttributeError
_ test_ramp_A_only_owner[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xA9F78fdb657Ed8c7CE2c3Af46F72CEf7D29cD8A6')
swap = <contracts/main/CurveStableSwapNG.vy at 0x7E4854Bf301ab34ab89281d4Dd76a50f13C5F7Fe, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_only_owner(bob, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + 1000000, sender=bob)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:80: AttributeError
_ test_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x32e8be5A01087f7767f83C4Dd2856362da1b032f')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xE882D20E572AC7c6f76802124eb6364ac63Fb1E3, compiled with vyper-0.3.10+913..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + MIN_RAMP_TIME + 5
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:8: AttributeError
_ test_ramp_A_only_owner[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xE6893A6095539c48cc0AE70A12ea4c9d3D1c53e0')
swap = <contracts/main/CurveStableSwapNG.vy at 0xaa417496F1C1ECC7Dd80D2422fe14406464630d0, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_only_owner(bob, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + 1000000, sender=bob)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:80: AttributeError
_ test_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x742B39c8B25fB05eC6e4Eef4F35D189d34316Cc9')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x2E4e53fd4daCb5CD1b1F6008A48Bf020265727fd, compiled with vyper-0.3.10+913..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + MIN_RAMP_TIME + 5
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:8: AttributeError
_ test_ramp_A_only_owner[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x3380cF47931Ce373ED021e72B49e97379695EDbe')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x607601ee1A65fC3F00A7b3875c22bC70597C13f6, compiled with vyper-0.3.10+913..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_only_owner(bob, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + 1000000, sender=bob)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:80: AttributeError
_ test_ramp_A_only_owner[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xa68c1b5397c1f76229880CDc087c423A32Ea1105')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x4076E26C1b6512B233Db151Fb18b49094A2c2692, compiled with vyper-0.3.10+913..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_only_owner(bob, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + 1000000, sender=bob)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:80: AttributeError
_ test_ramp_A_only_owner[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x7a40bdDcDD1DeD390c8791397c161cc0f755c331')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x9D7001507f1C95B7B1Df27384a3b18b7625C449b, compiled with vyper-0.3.10+913..., ma_last_time=586759673593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_only_owner(bob, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + 1000000, sender=bob)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:80: AttributeError
_ test_ramp_A_only_owner[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x693CC08fc820f4dB60B9A30Bc541EEB6375c2f2C')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xC583CAcc7b3efc1485f878Bbcf99bb43D1813C2A, compiled with vyper-0.3.10+913..., ma_last_time=586759673593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_only_owner(bob, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + 1000000, sender=bob)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:80: AttributeError
_ test_no_fees[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xd95ddbFDf43e245F817404a53E32722ec33F77cE')
fee_receiver = Address('0x87061e989CB9089b273f6F97B604b395C62735a7')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x1dBC3dc061538C48Ffb01547C09D63E45eF0746E, compiled with vyper-0.3.10+913...593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0x2e50d52d7cb82A8dE53e190a8d7f8bDB566bb701, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=TKN1, symbol=TKN1, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xf0a98D4b5400c30B7c0B868E629A702972fdf986, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]

    def test_no_fees(bob, fee_receiver, swap, pool_type, pool_tokens, underlying_tokens):
        swap.withdraw_admin_fees(sender=bob)
    
        if pool_type == 0:
            for coin in pool_tokens:
                assert coin.balanceOf(fee_receiver) == 0
        else:
            for coin in underlying_tokens:
>               assert coin.balanceOf(fee_receiver) == 0
E               AssertionError: assert 360452982813495261 == 0
E                +  where 360452982813495261 = contracts/mocks/ERC20Oracle.vy.balanceOf(Address('0x87061e989CB9089b273f6F97B604b395C62735a7'))
E                +    where contracts/mocks/ERC20Oracle.vy.balanceOf = <contracts/mocks/ERC20Oracle.vy at 0xf0a98D4b5400c30B7c0B868E629A702972fdf986, compiled with vyper-0.3.10+9136169>\n<st...TA, decimals=18, balanceOf={}, allowances={}, totalSupply=9000000000000000000000000, exchange_rate=1006470359024000000>.balanceOf

tests/pools/general/test_fees.py:53: AssertionError
_ test_ramp_A_only_owner[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x8e86a169Cb90dA1a1680fe69d63eAEDAd4Ca66D8')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x115874fb94DAd92F50610102160320c09669Ee1B, compiled with vyper-0.3.10+913..., ma_last_time=586759673593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_only_owner(bob, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + 1000000, sender=bob)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:80: AttributeError
_ test_ramp_A_only_owner[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x9458716f519A713314e3e2475165AfbeAE9a609e')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x85Df2bDB49068f34600dE16AFBF136bAfa3f8130, compiled with vyper-0.3.10+913..., ma_last_time=586759673593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_only_owner(bob, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + 1000000, sender=bob)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:80: AttributeError
_ test_ramp_A_insufficient_time[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x337CcDf8acE6A32A921134CB21a3aAE8011dae37')
swap = <contracts/main/CurveStableSwapNG.vy at 0xc2373Ca447B28bd27aFcdBE0A4342DE1F21204aB, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_insufficient_time(owner, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + MIN_RAMP_TIME - 1, sender=owner)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:85: AttributeError
_ test_ramp_A_insufficient_time[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x3f4cd48e196698E3E8B68454D51BB9066877973c')
swap = <contracts/main/CurveStableSwapNG.vy at 0x0a2129F5077D97D0c06bC75D5fB3080118342799, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_insufficient_time(owner, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + MIN_RAMP_TIME - 1, sender=owner)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:85: AttributeError
_ test_remove_partial[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x2bC3EF33BaCE2aEaD640aF1299dE6D15Ba803574')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x589c17a10b10f7beD0F04BAa2CC85d025BFC8ada, compiled with vyper-0.3.10+913...593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0x11255e7cEDF1199CC2aD336ED283F432E5D702ba, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=TKN1, symbol=TKN1, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0x11255e7cEDF1199CC2aD336ED283F432E5D702ba, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_size = 2

    def test_remove_partial(alice, swap, pool_type, pool_tokens, underlying_tokens, pool_size):
        initial_amount = swap.balanceOf(alice)
        withdraw_amount = initial_amount // 2
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        swap.remove_liquidity(withdraw_amount, [0] * pool_size, sender=alice)
    
        for coin in coins:
>           assert coin.balanceOf(swap) + coin.balanceOf(alice) == pytest.approx(initial_amount, rel=1.5e-2)
E           assert 6000000000000000000000000 == 3000000000000...0000 ± 4.5e+22
E             comparison failed
E             Obtained: 6000000000000000000000000
E             Expected: 3000000000000000000000000 ± 4.5e+22

tests/pools/liquidity/test_remove_liquidity.py:30: AssertionError
_ test_ramp_A_insufficient_time[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x11D5Cc0dfee84D82ADfE7A80C3CF64090B86f0F1')
swap = <contracts/main/CurveStableSwapNG.vy at 0x2A2461F9D9997Fd2Dd305A3BD134805d49C5B712, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_insufficient_time(owner, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + MIN_RAMP_TIME - 1, sender=owner)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:85: AttributeError
_ test_no_fees[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x42A4796fc2707880472813832E90CFc7D1CFF1CB')
fee_receiver = Address('0x981b6b44B84A7b3F9b35EdC55F7E702df6A1506c')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xa6234dc38Eb28F41d48840cC594355BaD16E42Cb, compiled with vyper-0.3.10+913...593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0xB5A854814463E2Ff5110209b79847e2CF7ce10B8, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=TKN1, symbol=TKN1, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x9eF74bEa82E897dCcfa47d238FC1ae704B2f51C7, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]

    def test_no_fees(bob, fee_receiver, swap, pool_type, pool_tokens, underlying_tokens):
        swap.withdraw_admin_fees(sender=bob)
    
        if pool_type == 0:
            for coin in pool_tokens:
                assert coin.balanceOf(fee_receiver) == 0
        else:
            for coin in underlying_tokens:
>               assert coin.balanceOf(fee_receiver) == 0
E               AssertionError: assert 150000000049899 == 0
E                +  where 150000000049899 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0x981b6b44B84A7b3F9b35EdC55F7E702df6A1506c'))
E                +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0x9eF74bEa82E897dCcfa47d238FC1ae704B2f51C7, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=9000018000012000003000000, totalShares=8999991000011999985000016, shares={}>.balanceOf

tests/pools/general/test_fees.py:53: AssertionError
_ test_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x1E920591626cF1FDC6069432635e394A8b3Fd970')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xD837C49488156E516D23C67A91ED427b65B646ee, compiled with vyper-0.3.10+913..., ma_last_time=586759673253652687062004014959777336362912921271, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + MIN_RAMP_TIME + 5
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:8: AttributeError
_ test_ramp_A_insufficient_time[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xbE4Ad4F0ad1d38d22D8715f54DA0df43153251f4')
swap = <contracts/main/CurveStableSwapNG.vy at 0x9f64aFd643dFfE6448b005A55eF72b546Ae2433F, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_insufficient_time(owner, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + MIN_RAMP_TIME - 1, sender=owner)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:85: AttributeError
_ test_ramp_A_insufficient_time[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x0D00aF3B0929Fb5bba5569029BD72235007355fe')
swap = <contracts/main/CurveStableSwapNG.vy at 0x4BeA16EB945C62aABF3D32a2D2304CC0F34FC2ff, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_insufficient_time(owner, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + MIN_RAMP_TIME - 1, sender=owner)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:85: AttributeError
_ test_ramp_A_final[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xA7289dD3d87b7f47504DDda045FA6b0ceEBE6b43')
swap = <contracts/main/CurveStableSwapNG.vy at 0x51D51B857916636Aa357D4BBF68A9540dBED886F, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_final(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:20: AttributeError
_ test_ramp_A_insufficient_time[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x386E2dB0d10D9381a0dE6882122601378AC4Cc51')
swap = <contracts/main/CurveStableSwapNG.vy at 0x31faf41E627Cc01170DAD9FB0f541554C02f444D, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_insufficient_time(owner, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + MIN_RAMP_TIME - 1, sender=owner)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:85: AttributeError
_ test_ramp_A_final[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x981b6b44B84A7b3F9b35EdC55F7E702df6A1506c')
swap = <contracts/main/CurveStableSwapNG.vy at 0x996EA5343A66bc672ea2863b61b70D59df251251, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_final(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:20: AttributeError
_ test_remove_partial[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xbDDBEd7Db01926E003667C65CEFA22aa1901c03e')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xc8e1b1Ea806c80B2f39E8593aD82a1ACcC879588, compiled with vyper-0.3.10+913...593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0x5505D3618CC74A2030F82f820308CE028a32F993, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=TKN1, symbol=TKN1, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xb8Bb6AF06d9d3A74b21EA5b3fDFe17B97dF4D22f, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_size = 2

    def test_remove_partial(alice, swap, pool_type, pool_tokens, underlying_tokens, pool_size):
        initial_amount = swap.balanceOf(alice)
        withdraw_amount = initial_amount // 2
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        swap.remove_liquidity(withdraw_amount, [0] * pool_size, sender=alice)
    
        for coin in coins:
>           assert coin.balanceOf(swap) + coin.balanceOf(alice) == pytest.approx(initial_amount, rel=1.5e-2)
E           assert 5999999639547017186504739 == 2999998559262...7707 ± 4.5e+22
E             comparison failed
E             Obtained: 5999999639547017186504739
E             Expected: 2999998559262932879477707 ± 4.5e+22

tests/pools/liquidity/test_remove_liquidity.py:30: AssertionError
_ test_ramp_A_insufficient_time[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xA91C9fC8C8a5B07828B56798E17a6328960e97F3')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x0C6F8b0d49aC9EA7F62365E416e68A9FaD48556d, compiled with vyper-0.3.10+913..., ma_last_time=586759673593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_insufficient_time(owner, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + MIN_RAMP_TIME - 1, sender=owner)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:85: AttributeError
_ test_ramp_A_final[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xFe6582EEf4396aB5Cdf9cf0f0bAd0c672eF225Fd')
swap = <contracts/main/CurveStableSwapNG.vy at 0xbf507eBe144BCEB917D939c2998A1a2dCc789c4B, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_final(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:20: AttributeError
_ test_ramp_A_final[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x0B8BAd4c46110523c48700699f08Df2e775f6f7f')
swap = <contracts/main/CurveStableSwapNG.vy at 0xCf010AbD352c453265aE7607537Fa4c8aDC5D5C3, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_final(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:20: AttributeError
_ test_remove_partial[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x1F58f966C67757003DFa834baE8639d439D093DF')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x41BdA260fD5E419636Ad4Cc3A284d37A961a71F9, compiled with vyper-0.3.10+913...593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0x4EB4C91510950fA1bf6713DAC6742d5eb298156d, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=TKN1, symbol=TKN1, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xcDf1007bf4b6E23Aa0F4FB71A21830357fEc33c6, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_size = 2

    def test_remove_partial(alice, swap, pool_type, pool_tokens, underlying_tokens, pool_size):
        initial_amount = swap.balanceOf(alice)
        withdraw_amount = initial_amount // 2
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        swap.remove_liquidity(withdraw_amount, [0] * pool_size, sender=alice)
    
        for coin in coins:
>           assert coin.balanceOf(swap) + coin.balanceOf(alice) == pytest.approx(initial_amount, rel=1.5e-2)
E           assert 6000017999868000005950092 == 3000002999399...6340 ± 4.5e+22
E             comparison failed
E             Obtained: 6000017999868000005950092
E             Expected: 3000002999399999001996340 ± 4.5e+22

tests/pools/liquidity/test_remove_liquidity.py:30: AssertionError
_ test_ramp_A_final[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x8085f4B8e0f7b7786Bb9Cd45FD0978D3A43DA1eb')
swap = <contracts/main/CurveStableSwapNG.vy at 0x97B9894ecA7e61CD1514f8a750f884Ff312431cc, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_final(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:20: AttributeError
_ test_min_dy[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x3B262F35a8f745Ae486f308B283D7d92395c89Be')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xFAfB6A92dBbdaDB67Cf4EeDcA2C61Ec21503Ad97, compiled with vyper-0.3.10+913...593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x8525d69e35bdEF53F4286191601576709b7E097c, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xad1aB79A7E5C89AC575Dc675D87E72B4f93D5afc, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_token_types = (1, 1), metapool_token_type = 2, sending = 0, receiving = 1
decimals = [18, 18]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_min_dy(
        bob,
        swap,
        pool_type,
        pool_tokens,
        underlying_tokens,
        pool_token_types,
        metapool_token_type,
        sending,
        receiving,
        decimals,
    ):
        amount = 1000 * 10 ** decimals[sending]
        initial_receiving = (
            pool_tokens[receiving].balanceOf(bob) if pool_type == 0 else underlying_tokens[receiving].balanceOf(bob)
        )
    
        min_dy = swap.get_dy(sending, receiving, amount)
        # apply rebasing for expected dy
        # Down rebasing breaks dy
        if pool_type == 0 and pool_token_types[sending] == 2 and sending == 1:
            min_dy -= pool_tokens[sending].balanceOf(swap.address) // 1000000
    
        swap.exchange(sending, receiving, amount, min_dy - 1, sender=bob)
    
        if pool_type == 0:
            received = pool_tokens[receiving].balanceOf(bob)
        else:
            received = underlying_tokens[receiving].balanceOf(bob)
    
        if (pool_type == 0 and 2 in pool_token_types) or (pool_type == 1 and metapool_token_type == 2):
>           assert abs(received - min_dy - initial_receiving) == pytest.approx(1, abs=received // 1000000)
E           assert 4498198993417703164 == 1 ± 3.0e+18
E             comparison failed
E             Obtained: 4498198993417703164
E             Expected: 1 ± 3.0e+18

tests/pools/exchange/test_exchange.py:38: AssertionError
_ test_ramp_A_final[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xE0FB0593AfA7A33f6082389CC9fa2ACdDBf2B04D')
swap = <contracts/main/CurveStableSwapNG.vy at 0xAe08a7547D74d76325070AC3f6CA500aB02A6875, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_final(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:20: AttributeError
_ test_ramp_A_final[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x72d786A5c6EFDcDcC730934fc5a459daDB5a889e')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x892216490Ec09237A6173a490093F9Fc01623cc6, compiled with vyper-0.3.10+913..., ma_last_time=586759673934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_final(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:20: AttributeError
_ test_remove_partial[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x02a3db69FA003C238CE2538EfafC8710d4321741')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x7dDCA918cFf44E319039F004680b06d0dcd1e865, compiled with vyper-0.3.10+913...934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x653e2E89C8365acDba118435Cd9CdAB642873D6b, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0xa9239ED3A9c1A7F465B37400123485cfEF733282, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_size = 2

    def test_remove_partial(alice, swap, pool_type, pool_tokens, underlying_tokens, pool_size):
        initial_amount = swap.balanceOf(alice)
        withdraw_amount = initial_amount // 2
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        swap.remove_liquidity(withdraw_amount, [0] * pool_size, sender=alice)
    
        for coin in coins:
>           assert coin.balanceOf(swap) + coin.balanceOf(alice) == pytest.approx(initial_amount, rel=1.5e-2)
E           assert 6000000000000000000000000 == 3000000000000...0000 ± 4.5e+22
E             comparison failed
E             Obtained: 6000000000000000000000000
E             Expected: 3000000000000000000000000 ± 4.5e+22

tests/pools/liquidity/test_remove_liquidity.py:30: AssertionError
_ test_ramp_A_final[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x5cEE64FAaBb7F41635Ec8d9C3e3D9d18fa22FF43')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xefEBd9a173E8e1930156a44C485F931b447Da85A, compiled with vyper-0.3.10+913..., ma_last_time=586759673934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_final(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:20: AttributeError
_ test_ramp_A_insufficient_time[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xBD055696a36F2908AB42dD8f9B23A2C6D87Daa95')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x5B3D2B76503dcaF85f4400774ea4b0B50417fE8b, compiled with vyper-0.3.10+913..., ma_last_time=586759673593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_insufficient_time(owner, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + MIN_RAMP_TIME - 1, sender=owner)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:85: AttributeError
_ test_ramp_A_final[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x688653a64469aAFC9ff55c4b6C55cB39656893EC')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x3A98CB49771d873CEDca9546fce2B9c1EcE12155, compiled with vyper-0.3.10+913..., ma_last_time=586759673934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_final(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:20: AttributeError
_ test_ramp_A_insufficient_time[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x89aF05f1Be6b778FfCAc4a26AaECC9cEd239BCcf')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x11C640c253aA9774322E917BC82b9eAcD623Ed55, compiled with vyper-0.3.10+913..., ma_last_time=586759673934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_insufficient_time(owner, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + MIN_RAMP_TIME - 1, sender=owner)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:85: AttributeError
_ test_ramp_A_final[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xBC3E57d622538940D37bbaaE0361b1e1d0c62c66')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xf08c3A95AafE6E388Cd95d584143d6FC4F18e932, compiled with vyper-0.3.10+913..., ma_last_time=586759673934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_final(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:20: AttributeError
_ test_remove_partial[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x73356B81E639139CDdCcb29Fba6dCb0351A3b942')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xc0d871712CD55E1D09ea6Bd2cdaF5DFfaF6B6C74, compiled with vyper-0.3.10+913...934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x1Db658114bD2b9B18DA35f0EeEFe3AbAF0df9982, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x950a69adD060b4E40Ad2006f9CB38A1027F2e420, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_size = 2

    def test_remove_partial(alice, swap, pool_type, pool_tokens, underlying_tokens, pool_size):
        initial_amount = swap.balanceOf(alice)
        withdraw_amount = initial_amount // 2
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        swap.remove_liquidity(withdraw_amount, [0] * pool_size, sender=alice)
    
        for coin in coins:
>           assert coin.balanceOf(swap) + coin.balanceOf(alice) == pytest.approx(initial_amount, rel=1.5e-2)
E           assert 5999999639547017186504739 == 2999998559262...7707 ± 4.5e+22
E             comparison failed
E             Obtained: 5999999639547017186504739
E             Expected: 2999998559262932879477707 ± 4.5e+22

tests/pools/liquidity/test_remove_liquidity.py:30: AssertionError
_ test_ramp_A_insufficient_time[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xcACBE78F66561A832B34845Eaf0035d181Ec047F')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x82C39904cf0b778f7fdD03b860d47a6aE6b4b4d0, compiled with vyper-0.3.10+913..., ma_last_time=586759673934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_insufficient_time(owner, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + MIN_RAMP_TIME - 1, sender=owner)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:85: AttributeError
_ test_no_fees[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x04e172426534081E35f7eD1CeE52f87C710B1600')
fee_receiver = Address('0x8085f4B8e0f7b7786Bb9Cd45FD0978D3A43DA1eb')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xDd2064096891B175060dce369595D8190a73D740, compiled with vyper-0.3.10+913...593935053982942478423151943794681132728, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x7c4BA49146cF8CF84a602ED1e896065D91a0F170, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xBe60cd7B4fb4a9C4F413b1383F272a0660Fc8c63, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]

    def test_no_fees(bob, fee_receiver, swap, pool_type, pool_tokens, underlying_tokens):
        swap.withdraw_admin_fees(sender=bob)
    
        if pool_type == 0:
            for coin in pool_tokens:
                assert coin.balanceOf(fee_receiver) == 0
        else:
            for coin in underlying_tokens:
>               assert coin.balanceOf(fee_receiver) == 0
E               AssertionError: assert 360452982813495261 == 0
E                +  where 360452982813495261 = contracts/mocks/ERC20Oracle.vy.balanceOf(Address('0x8085f4B8e0f7b7786Bb9Cd45FD0978D3A43DA1eb'))
E                +    where contracts/mocks/ERC20Oracle.vy.balanceOf = <contracts/mocks/ERC20Oracle.vy at 0xBe60cd7B4fb4a9C4F413b1383F272a0660Fc8c63, compiled with vyper-0.3.10+9136169>\n<st...TA, decimals=18, balanceOf={}, allowances={}, totalSupply=9000000000000000000000000, exchange_rate=1006470359024000000>.balanceOf

tests/pools/general/test_fees.py:53: AssertionError
_ test_ramp_A_final[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xb3aC5c410204259De05E7377F6F875dFC70d3ea4')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x0f5078910506678f51F99Cb2BA90dB3DEF1ade45, compiled with vyper-0.3.10+913..., ma_last_time=586759673934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_final(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:20: AttributeError
_ test_ramp_A_insufficient_time[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x557F488f82495E6823d5bde534e0939E86D75052')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xC26128431E8F611B35c974e931E9F745D26EDFa0, compiled with vyper-0.3.10+913..., ma_last_time=586759673934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_insufficient_time(owner, swap):
        with boa.reverts():
>           swap.ramp_A(0, boa.env.vm.state.timestamp + MIN_RAMP_TIME - 1, sender=owner)
E           AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:85: AttributeError
_ test_ramp_A_final[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x396199D02a81fD6336032C66Fc323C9869eAB263')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x67ec84b82CE84562a8756f11E8e466a074a2e87e, compiled with vyper-0.3.10+913..., ma_last_time=586759673934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_final(owner, swap):
        initial_A = swap.initial_A() // 100
>       future_time = boa.env.vm.state.timestamp + 1000000
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:20: AttributeError
_ test_ramp_A_value_up[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x0c99514Ca6fcf93DcA4D6C773feF194b5C332E77')
swap = <contracts/main/CurveStableSwapNG.vy at 0xBdE46D0E492B926B80eCe9926B22eccf5FBbAb7d, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_up(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:29: AttributeError
_ test_remove_partial[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x12455259DbC7F040F5A2EB3c96CaCC2e309F1ffc')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xF66F79344576aA15E77EC4d3600c7Ad0E0D0F85d, compiled with vyper-0.3.10+913...934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x50E91b8Dd5083fbE40Cd5CBFA72D7CE4C192443f, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x50E91b8Dd5083fbE40Cd5CBFA72D7CE4C192443f, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_size = 2

    def test_remove_partial(alice, swap, pool_type, pool_tokens, underlying_tokens, pool_size):
        initial_amount = swap.balanceOf(alice)
        withdraw_amount = initial_amount // 2
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        swap.remove_liquidity(withdraw_amount, [0] * pool_size, sender=alice)
    
        for coin in coins:
>           assert coin.balanceOf(swap) + coin.balanceOf(alice) == pytest.approx(initial_amount, rel=1.5e-2)
E           assert 6000017999868000005950092 == 3000002999399...6340 ± 4.5e+22
E             comparison failed
E             Obtained: 6000017999868000005950092
E             Expected: 3000002999399999001996340 ± 4.5e+22

tests/pools/liquidity/test_remove_liquidity.py:30: AssertionError
_ test_ramp_A_value_up[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xB10541ae2b2f611BdA4E388967AF0d01f722c887')
swap = <contracts/main/CurveStableSwapNG.vy at 0x52eC03CDbF706e401E0bc6A64dCE9271A5C96600, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_up(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:29: AttributeError
_ test_no_fees[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xE0FB0593AfA7A33f6082389CC9fa2ACdDBf2B04D')
fee_receiver = Address('0xf8594bb28Bb9aC24e84B83FABcbF09D8Bc64ff1F')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x946cb96b7e781A2E2b6cFded64e5D0b4c5A8cfed, compiled with vyper-0.3.10+913...934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x751DfcEEc06F91F037A84e346fC7E3B902FD75aF, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x751DfcEEc06F91F037A84e346fC7E3B902FD75aF, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]

    def test_no_fees(bob, fee_receiver, swap, pool_type, pool_tokens, underlying_tokens):
        swap.withdraw_admin_fees(sender=bob)
    
        if pool_type == 0:
            for coin in pool_tokens:
                assert coin.balanceOf(fee_receiver) == 0
        else:
            for coin in underlying_tokens:
>               assert coin.balanceOf(fee_receiver) == 0
E               AssertionError: assert 150000000049899 == 0
E                +  where 150000000049899 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0xf8594bb28Bb9aC24e84B83FABcbF09D8Bc64ff1F'))
E                +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0x751DfcEEc06F91F037A84e346fC7E3B902FD75aF, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=9000018000012000003000000, totalShares=8999991000011999985000016, shares={}>.balanceOf

tests/pools/general/test_fees.py:53: AssertionError
_ test_ramp_A_value_up[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x79f259b23C57F4c90a610B615229446f4936F68C')
swap = <contracts/main/CurveStableSwapNG.vy at 0x93ed437b8aCAF7cf08B97754E6F1B1C40F9e1E97, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_up(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:29: AttributeError
_ test_ramp_A_value_up[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xeDaF66f2fc1A81076F2d4CF33211bE9Ec224DeA0')
swap = <contracts/main/CurveStableSwapNG.vy at 0x8eb8BbAD839bCfADd4476F57259A383A4068f31d, compiled with vyper-0.3.10+9136169..., ma_last_time=586759673934217420903880941886526551226449344185, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_up(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:29: AttributeError
_ test_ramp_A_value_up[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x62c928AC0b67004B1719661581Aa7BE267f48ee6')
swap = <contracts/main/CurveStableSwapNG.vy at 0x0192bc011564c3B8639F2151A6aD4e32f7590191, compiled with vyper-0.3.10+9136169..., ma_last_time=586759674274499787824819405349901158658217555642, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_up(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:29: AttributeError
_ test_ramp_A_value_up[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xe5336f738A465401cDC83C0d4D48a50B4e635D6a')
swap = <contracts/main/CurveStableSwapNG.vy at 0x9af26265d476722c2f298b3CC0ea26eBf40714c6, compiled with vyper-0.3.10+9136169..., ma_last_time=586759674274499787824819405349901158658217555642, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_up(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:29: AttributeError
_ test_ramp_A_value_up[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xdaad0231F0a0844b0aeCfB8bCf01153b37Ac0EE6')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x9C40ad7586587b06cdd595Df3d51c1D0624fD572, compiled with vyper-0.3.10+913..., ma_last_time=586759674274499787824819405349901158658217555642, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_up(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:29: AttributeError
_ test_ramp_A_value_up[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xfca92210A48adF0Bd22EE4883628361b0612aE33')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x3103D6C71E8314E1BC124D94eE1b5B9af3E07136, compiled with vyper-0.3.10+913..., ma_last_time=586759674274499787824819405349901158658217555642, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_up(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:29: AttributeError
_ test_ramp_A_value_up[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x0d30BdA28f34660C8e269412B0e2886BD886b8e5')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x7A28D25E3AEcE5601C9E2c1dC9a8445c9bd2642f, compiled with vyper-0.3.10+913..., ma_last_time=586759674274499787824819405349901158658217555642, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_up(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:29: AttributeError
_ test_ramp_A_value_up[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x7deA6BcfB06F1ae6C4c505e3A0a22C007990f084')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xc391d5EB6FCF671d7dAC13090F16CC08494783CC, compiled with vyper-0.3.10+913..., ma_last_time=586759674274499787824819405349901158658217555642, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_up(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:29: AttributeError
_ test_ramp_A_value_up[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xA9F78fdb657Ed8c7CE2c3Af46F72CEf7D29cD8A6')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x7E4854Bf301ab34ab89281d4Dd76a50f13C5F7Fe, compiled with vyper-0.3.10+913..., ma_last_time=586759674274499787824819405349901158658217555642, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_up(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:29: AttributeError
_ test_ramp_A_value_up[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0xE6893A6095539c48cc0AE70A12ea4c9d3D1c53e0')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xaa417496F1C1ECC7Dd80D2422fe14406464630d0, compiled with vyper-0.3.10+913..., ma_last_time=586759674274499787824819405349901158658217555642, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_up(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:29: AttributeError
_ test_ramp_A_value_down[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

owner = Address('0x3380cF47931Ce373ED021e72B49e97379695EDbe')
swap = <contracts/main/CurveStableSwapNG.vy at 0x607601ee1A65fC3F00A7b3875c22bC70597C13f6, compiled with vyper-0.3.10+9136169..., ma_last_time=586759674274499787824819405349901158658217555642, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_ramp_A_value_down(owner, swap):
>       initial_timestamp = boa.env.vm.state.timestamp
E       AttributeError: 'Env' object has no attribute 'vm'

tests/pools/general/test_ramp_A.py:43: AttributeError
_ test_min_dy[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x02710ae866Df632381d2681bF2EB2480FDa501ab')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xf1cA7177599317709b69511AE823210691461046, compiled with vyper-0.3.10+913...274499787824819405349901158658217555642, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0x7b9e4d0EFc6702c57361cfE1E1D0AAd277CB42Da, compiled with vyper-0.3.10+9136169>
<storage...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x9222CD371477689eF4A0143bD7fF40a014292cdE, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_token_types = (0, 1), metapool_token_type = 2, sending = 0, receiving = 1
decimals = [18, 18]

    @pytest.mark.parametrize("sending,receiving", [(0, 1), (1, 0)])
    def test_min_dy(
        bob,
        swap,
        pool_type,
        pool_tokens,
        underlying_tokens,
        pool_token_types,
        metapool_token_type,
        sending,
        receiving,
        decimals,
    ):
        amount = 1000 * 10 ** decimals[sending]
        initial_receiving = (
            pool_tokens[receiving].balanceOf(bob) if pool_type == 0 else underlying_tokens[receiving].balanceOf(bob)
        )
    
        min_dy = swap.get_dy(sending, receiving, amount)
        # apply rebasing for expected dy
        # Down rebasing breaks dy
        if pool_type == 0 and pool_token_types[sending] == 2 and sending == 1:
            min_dy -= pool_tokens[sending].balanceOf(swap.address) // 1000000
    
        swap.exchange(sending, receiving, amount, min_dy - 1, sender=bob)
    
        if pool_type == 0:
            received = pool_tokens[receiving].balanceOf(bob)
        else:
            received = underlying_tokens[receiving].balanceOf(bob)
    
        if (pool_type == 0 and 2 in pool_token_types) or (pool_type == 1 and metapool_token_type == 2):
>           assert abs(received - min_dy - initial_receiving) == pytest.approx(1, abs=received // 1000000)
E           assert 4498198993417703164 == 1 ± 3.0e+18
E             comparison failed
E             Obtained: 4498198993417703164
E             Expected: 1 ± 3.0e+18

tests/pools/exchange/test_exchange.py:38: AssertionError
_ test_remove_liquidity[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-0] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xC53A7160bdeD3E2880300132B6e25dADB01C2430')
swap = <contracts/main/CurveStableSwapNG.vy at 0xbb4c4ec457aA6e60832B21b22A92F346D3FC19e3, compiled with vyper-0.3.10+9136169...614782154745757868813275766089985767099, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x582a0dcDC625eF3a89fBfEd68005689Fa7A63c55, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0x675B22094d312CDB4A11f27E4310B9839765555F, compiled with vyper-0.3.10+9136169>
<storage... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
min_amount = 0
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
        swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for coin, amount in zip(coins, deposit_amounts):
            assert coin.balanceOf(alice) == pytest.approx(amount * 2, rel=1.5e-2)
>           assert coin.balanceOf(swap) == 0
E           assert 1500000000000000000 == 0
E            +  where 1500000000000000000 = contracts/mocks/ERC20Rebasing.vy.balanceOf(<contracts/main/CurveStableSwapNG.vy at 0xbb4c4ec457aA6e60832B21b22A92F346D3FC19e3, compiled with vyper-0.3.10+9136169..., ma_last_time=586759674614782154745757868813275766089985767099, balanceOf={}, allowance={}, total_supply=0, nonces={}>)
E            +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0x582a0dcDC625eF3a89fBfEd68005689Fa7A63c55, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=6000009000003000000000000, totalShares=5999997000002999997000002, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity.py:17: AssertionError
_ test_remove_liquidity[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-1] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xd44fB48577b05d6697668c4B6147a32811d0f52D')
swap = <contracts/main/CurveStableSwapNG.vy at 0x6660773cC496B79AD2808A94eAd66e69b5BDB094, compiled with vyper-0.3.10+9136169...955064521666696332276650373521753978556, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x363Ab1C957604C2A272012f9f89E2adb74504C89, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0x3f37eee0FBd88FBF7072a274a7C934bC2A211D47, compiled with vyper-0.3.10+9136169>
<storage... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
min_amount = 1
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
>       swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)

tests/pools/liquidity/test_remove_liquidity.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

alice = Address('0xd44fB48577b05d6697668c4B6147a32811d0f52D')
swap = <contracts/main/CurveStableSwapNG.vy at 0x6660773cC496B79AD2808A94eAd66e69b5BDB094, compiled with vyper-0.3.10+9136169...955064521666696332276650373521753978556, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x363Ab1C957604C2A272012f9f89E2adb74504C89, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0x3f37eee0FBd88FBF7072a274a7C934bC2A211D47, compiled with vyper-0.3.10+9136169>
<storage... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
min_amount = 1
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
>       swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)
E       boa.contracts.base_evm_contract.BoaError: Withdrawal resulted in fewer coins than expected
E       
E       <contracts/main/CurveStableSwapNG.vy at 0x6660773cC496B79AD2808A94eAd66e69b5BDB094, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[1499999999999999999999999, 1499999999999999999999999], fee=4000000, offpeg_fee_multiplier=20000000000, initial_A=50000, future_A=50000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=[340282366920938463463374607431768211457000000000000000000], last_D_packed=1020847100762815390390123141730570792494073073250785136463577086, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759674955064521666696332276650373521753978556, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
E        <compiler: user revert with reason>
E         contract "contracts/main/CurveStableSwapNG.vy:832", function "remove_liquidity", line 832:8 
E              831         value = unsafe_div(balances[i] * _burn_amount, total_supply)
E         ---> 832         assert value >= _min_amounts[i], "Withdrawal resulted in fewer coins than expected"
E         -----------------^
E              833         amounts.append(value)
E        <locals: _min_amounts=[1500000000000000000000000, 1500000000000000000000000], _receiver=0xd44fB48577b05d6697668c4B6147a32811d0f52D, _claim_admin_fees=True, total_supply=2999999999999999999999998, amounts=[], balances=[1499999999999999999999999, 1499999999999999999999999], value=147028384, ma_last_time_unpacked=[32, 48], last_D_packed_current=39537540185534869901244891490375325481556925108754236532102232701749239705449, old_D=49957824750838286392068310174427358223206050881260988279757285870468402774016>

tests/pools/liquidity/test_remove_liquidity.py:11: BoaError
_ test_remove_liquidity[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-0] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x270C446628628Cd6e615C16D6975f665ea30cc00')
swap = <contracts/main/CurveStableSwapNG.vy at 0x5E80C2571b7abEC31D0A03907D2eFa0e2D2ADb94, compiled with vyper-0.3.10+9136169...955064521666696332276650373521753978556, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x86bb9459Ef018D833D4B889FE635BDf38199A5Df, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x613Bd30F20A1E5A03d806B22ef39b5F00dF36Cbb, compiled with vyper-0.3.10+9136169>
<s... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
min_amount = 0
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
        swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for coin, amount in zip(coins, deposit_amounts):
            assert coin.balanceOf(alice) == pytest.approx(amount * 2, rel=1.5e-2)
>           assert coin.balanceOf(swap) == 0
E           assert 1500000000000000000 == 0
E            +  where 1500000000000000000 = contracts/mocks/ERC20Rebasing.vy.balanceOf(<contracts/main/CurveStableSwapNG.vy at 0x5E80C2571b7abEC31D0A03907D2eFa0e2D2ADb94, compiled with vyper-0.3.10+9136169..., ma_last_time=586759674955064521666696332276650373521753978556, balanceOf={}, allowance={}, total_supply=0, nonces={}>)
E            +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0x86bb9459Ef018D833D4B889FE635BDf38199A5Df, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=6000009000003000000000000, totalShares=5999997000002999997000002, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity.py:17: AssertionError
_ test_remove_liquidity[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-1] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x15b053f95B12232489Da13c2bBf3dC2a0Df75DFb')
swap = <contracts/main/CurveStableSwapNG.vy at 0x2b67Bb7B9ab48B2d75c754b12868Ea20a5978EFA, compiled with vyper-0.3.10+9136169...955064521666696332276650373521753978556, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x8e6067Cf06B63CF94e9C733779AA14aaf6147a05, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x6D495C4EDc5768540936F383ae456B4B37D15e25, compiled with vyper-0.3.10+9136169>
<s... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
min_amount = 1
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
>       swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)

tests/pools/liquidity/test_remove_liquidity.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

alice = Address('0x15b053f95B12232489Da13c2bBf3dC2a0Df75DFb')
swap = <contracts/main/CurveStableSwapNG.vy at 0x2b67Bb7B9ab48B2d75c754b12868Ea20a5978EFA, compiled with vyper-0.3.10+9136169...955064521666696332276650373521753978556, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x8e6067Cf06B63CF94e9C733779AA14aaf6147a05, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x6D495C4EDc5768540936F383ae456B4B37D15e25, compiled with vyper-0.3.10+9136169>
<s... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
min_amount = 1
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
>       swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)
E       boa.contracts.base_evm_contract.BoaError: Withdrawal resulted in fewer coins than expected
E       
E       <contracts/main/CurveStableSwapNG.vy at 0x2b67Bb7B9ab48B2d75c754b12868Ea20a5978EFA, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[1499999999999999999999999, 1499999999999999999999999], fee=4000000, offpeg_fee_multiplier=20000000000, initial_A=50000, future_A=50000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=[340282366920938463463374607431768211457000000000000000000], last_D_packed=1020847100762815390390123141730570792494073073250785136463577086, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759674955064521666696332276650373521753978556, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
E        <compiler: user revert with reason>
E         contract "contracts/main/CurveStableSwapNG.vy:832", function "remove_liquidity", line 832:8 
E              831         value = unsafe_div(balances[i] * _burn_amount, total_supply)
E         ---> 832         assert value >= _min_amounts[i], "Withdrawal resulted in fewer coins than expected"
E         -----------------^
E              833         amounts.append(value)
E        <locals: _min_amounts=[1500000000000000000000000, 1500000000000000000000000], _receiver=0x15b053f95B12232489Da13c2bBf3dC2a0Df75DFb, _claim_admin_fees=True, total_supply=2999999999999999999999998, amounts=[], balances=[1499999999999999999999999, 1499999999999999999999999], value=147028384, ma_last_time_unpacked=[32, 48], last_D_packed_current=39537540185534869901244891490375325481556925108754236532102232701749239705449, old_D=49957824750838286392068310174427358223206050881260988279757285870468402774016>

tests/pools/liquidity/test_remove_liquidity.py:11: BoaError
_ test_remove_liquidity[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x84a81d47d5B7C78d8B6417F84B6139C48EC8893D')
swap = <contracts/main/CurveStableSwapNG.vy at 0xC3e82A75Ed3211E57b56816634b4d99E397ABA70, compiled with vyper-0.3.10+9136169...955064521666696332276650373521753978556, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xc8906722290bead1975880d3BE4f6f43888c21f7, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xc8906722290bead1975880d3BE4f6f43888c21f7, compiled with vyper-0.3.10+9136169>
... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
min_amount = 0
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
        swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for coin, amount in zip(coins, deposit_amounts):
            assert coin.balanceOf(alice) == pytest.approx(amount * 2, rel=1.5e-2)
>           assert coin.balanceOf(swap) == 0
E           assert 1500000000000000000 == 0
E            +  where 1500000000000000000 = contracts/mocks/ERC20Rebasing.vy.balanceOf(<contracts/main/CurveStableSwapNG.vy at 0xC3e82A75Ed3211E57b56816634b4d99E397ABA70, compiled with vyper-0.3.10+9136169..., ma_last_time=586759674955064521666696332276650373521753978556, balanceOf={}, allowance={}, total_supply=0, nonces={}>)
E            +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0xc8906722290bead1975880d3BE4f6f43888c21f7, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=6000009000003000000000000, totalShares=5999997000002999997000002, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity.py:17: AssertionError
_ test_remove_liquidity[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-1] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x08c7dbBC6685238fA4D9ed01AA1a90d5F0A68928')
swap = <contracts/main/CurveStableSwapNG.vy at 0x26873F6986AE2daC9b393BdF20be368E7fd9AC49, compiled with vyper-0.3.10+9136169...955064521666696332276650373521753978556, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x6966f3f38C358912F0304D606252336144dae1ef, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x6966f3f38C358912F0304D606252336144dae1ef, compiled with vyper-0.3.10+9136169>
... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
min_amount = 1
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
>       swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)

tests/pools/liquidity/test_remove_liquidity.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

alice = Address('0x08c7dbBC6685238fA4D9ed01AA1a90d5F0A68928')
swap = <contracts/main/CurveStableSwapNG.vy at 0x26873F6986AE2daC9b393BdF20be368E7fd9AC49, compiled with vyper-0.3.10+9136169...955064521666696332276650373521753978556, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x6966f3f38C358912F0304D606252336144dae1ef, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x6966f3f38C358912F0304D606252336144dae1ef, compiled with vyper-0.3.10+9136169>
... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
min_amount = 1
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
>       swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)
E       boa.contracts.base_evm_contract.BoaError: Withdrawal resulted in fewer coins than expected
E       
E       <contracts/main/CurveStableSwapNG.vy at 0x26873F6986AE2daC9b393BdF20be368E7fd9AC49, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[1499999999999999999999999, 1499999999999999999999999], fee=4000000, offpeg_fee_multiplier=20000000000, initial_A=50000, future_A=50000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=[340282366920938463463374607431768211457000000000000000000], last_D_packed=1020847100762815390390123141730570792494073073250785136463577086, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759674955064521666696332276650373521753978556, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
E        <compiler: user revert with reason>
E         contract "contracts/main/CurveStableSwapNG.vy:832", function "remove_liquidity", line 832:8 
E              831         value = unsafe_div(balances[i] * _burn_amount, total_supply)
E         ---> 832         assert value >= _min_amounts[i], "Withdrawal resulted in fewer coins than expected"
E         -----------------^
E              833         amounts.append(value)
E        <locals: _min_amounts=[1500000000000000000000000, 1500000000000000000000000], _receiver=0x08c7dbBC6685238fA4D9ed01AA1a90d5F0A68928, _claim_admin_fees=True, total_supply=2999999999999999999999998, amounts=[], balances=[1499999999999999999999999, 1499999999999999999999999], value=147028384, ma_last_time_unpacked=[32, 48], last_D_packed_current=39537540185534869901244891490375325481556925108754236532102232701749239705449, old_D=49957824750838286392068310174427358223206050881260988279757285870468402774016>

tests/pools/liquidity/test_remove_liquidity.py:11: BoaError
_ test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)-0] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xd9b37Eb8a530C7Ba40AE44a6175E47A5abfea976')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x40D8d2be560D7F1737566F194e4d8F3D99301C45, compiled with vyper-0.3.10+913...955064521666696332276650373521753978556, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0xFDe44f0084866b8E8f29B7B8ee1C15037DCf880a, compiled with vyper-0.3.10+9136169>
<storage...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0xFDe44f0084866b8E8f29B7B8ee1C15037DCf880a, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_size = 2, idx = 0
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("idx", range(2))
    def test_remove_one(
        alice, swap, pool_type, pool_tokens, underlying_tokens, pool_size, idx, deposit_amounts, initial_amounts
    ):
        amounts = [0] * pool_size
        amounts[idx] = deposit_amounts[idx] // 2
    
        lp_balance = pool_size * deposit_amounts[idx]
        swap.remove_liquidity_imbalance(amounts, lp_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 3750000000000000000000000 == 7500000000000...0000 ± 1.1e+22
E             comparison failed
E             Obtained: 3750000000000000000000000
E             Expected: 750000000000000000000000 ± 1.1e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:40: AssertionError
_ test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)-0] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x99134517D80eCadBf5ba13BAEbf9CE79ED4Db34B')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xB6E97D62B15368D68Edc0c1810eb73F27a73645e, compiled with vyper-0.3.10+913...955064521666696332276650373521753978556, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x92AF66ABDFd25d87289735d23DC69C38A0A9fA5e, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0x4b3ad3651b1b4aA077AB08c308C74F063AB440B2, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
min_amount = 0
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
        swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for coin, amount in zip(coins, deposit_amounts):
            assert coin.balanceOf(alice) == pytest.approx(amount * 2, rel=1.5e-2)
>           assert coin.balanceOf(swap) == 0
E           assert 3000000000000000000000000 == 0
E            +  where 3000000000000000000000000 = contracts/mocks/ERC20.vy.balanceOf(<contracts/main/CurveStableSwapMetaNG.vy at 0xB6E97D62B15368D68Edc0c1810eb73F27a73645e, compiled with vyper-0.3.10+913...955064521666696332276650373521753978556, balanceOf={}, allowance={}, total_supply=6000000000000000000000000, nonces={}>)
E            +    where contracts/mocks/ERC20.vy.balanceOf = <contracts/mocks/ERC20.vy at 0x4b3ad3651b1b4aA077AB08c308C74F063AB440B2, compiled with vyper-0.3.10+9136169>\n<storage: name=TKN0, symbol=TKN0, decimals=18, balanceOf={}, allowances={}, totalSupply=9000000000000000000000000>.balanceOf

tests/pools/liquidity/test_remove_liquidity.py:17: AssertionError
_ test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)-1] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x4880b438aB093DFD31a81f3741Db4Be53ad99971')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xdc8f9b2e5Fc1Db522E141b0d80AF0E620C6396b3, compiled with vyper-0.3.10+913...955064521666696332276650373521753978556, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0xBD47f0E369c02F76455aA5E3b1aaD713C8D0a155, compiled with vyper-0.3.10+9136169>
<storage...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0xBD47f0E369c02F76455aA5E3b1aaD713C8D0a155, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_size = 2, idx = 1
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("idx", range(2))
    def test_remove_one(
        alice, swap, pool_type, pool_tokens, underlying_tokens, pool_size, idx, deposit_amounts, initial_amounts
    ):
        amounts = [0] * pool_size
        amounts[idx] = deposit_amounts[idx] // 2
    
        lp_balance = pool_size * deposit_amounts[idx]
        swap.remove_liquidity_imbalance(amounts, lp_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 4500000000000000000000000 == 1500000000000...0000 ± 2.2e+22
E             comparison failed
E             Obtained: 4500000000000000000000000
E             Expected: 1500000000000000000000000 ± 2.2e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:40: AssertionError
_ test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)-2] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x752a4a09860Aeb17e2Ea24605098E77216eF6631')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x898474f86E5a5c721e10A5AD571214335333Ee04, compiled with vyper-0.3.10+913...295346888587634795740024980953522190013, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x6A7cD0aAEB15F4a12d6B430a0D9D0b901d2Cc1B4, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0x04b6395b7eA0D09943218f3bba8cfA02705eDb4D, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
divisor = 2
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("divisor", [2, 5, 10])
    def test_remove_balanced(
        alice, swap, pool_type, pool_tokens, underlying_tokens, divisor, deposit_amounts, initial_amounts
    ):
        initial_balance = swap.balanceOf(alice)
        amounts = [i // divisor for i in deposit_amounts]
        swap.remove_liquidity_imbalance(amounts, initial_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 3750000000000000000000000 == 7500000000000...0000 ± 1.1e+22
E             comparison failed
E             Obtained: 3750000000000000000000000
E             Expected: 750000000000000000000000 ± 1.1e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:21: AssertionError
_ test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)-1] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x04245B62c27f5736D6d50B4211F0E49dD323579c')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x1fc5a24d79cCE424e991A87C05Eb1B182595F93E, compiled with vyper-0.3.10+913...295346888587634795740024980953522190013, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xE2026395D977FF9C45DBdC36a49E4d825e44bEA0, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0xE94813BA7943023216a90A1aD00915A9B13Ff8fc, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
min_amount = 1
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
        swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for coin, amount in zip(coins, deposit_amounts):
            assert coin.balanceOf(alice) == pytest.approx(amount * 2, rel=1.5e-2)
>           assert coin.balanceOf(swap) == 0
E           assert 3000000000000000000000000 == 0
E            +  where 3000000000000000000000000 = contracts/mocks/ERC20.vy.balanceOf(<contracts/main/CurveStableSwapMetaNG.vy at 0x1fc5a24d79cCE424e991A87C05Eb1B182595F93E, compiled with vyper-0.3.10+913...295346888587634795740024980953522190013, balanceOf={}, allowance={}, total_supply=6000000000000000000000000, nonces={}>)
E            +    where contracts/mocks/ERC20.vy.balanceOf = <contracts/mocks/ERC20.vy at 0xE94813BA7943023216a90A1aD00915A9B13Ff8fc, compiled with vyper-0.3.10+9136169>\n<storage: name=TKN0, symbol=TKN0, decimals=18, balanceOf={}, allowances={}, totalSupply=9000000000000000000000000>.balanceOf

tests/pools/liquidity/test_remove_liquidity.py:17: AssertionError
_ test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-0] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xb91F3f9c546Ba0b41808e5cAE099f9bC309EDF8d')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x1c4F5cFfBAC5453319ee98F335A80D35c3d147e6, compiled with vyper-0.3.10+913...295346888587634795740024980953522190013, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0xd4A64E933AD53820Ac321755d24B76CcAE6D084d, compiled with vyper-0.3.10+9136169>
<storage...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x065FEee89576548FA259e7128F05533C4C8eD0D2, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_size = 2, idx = 0
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("idx", range(2))
    def test_remove_one(
        alice, swap, pool_type, pool_tokens, underlying_tokens, pool_size, idx, deposit_amounts, initial_amounts
    ):
        amounts = [0] * pool_size
        amounts[idx] = deposit_amounts[idx] // 2
    
        lp_balance = pool_size * deposit_amounts[idx]
        swap.remove_liquidity_imbalance(amounts, lp_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 3745178428033682130252573 == 7451784280336...2573 ± 1.1e+22
E             comparison failed
E             Obtained: 3745178428033682130252573
E             Expected: 745178428033682130252573 ± 1.1e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:40: AssertionError
_ test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)-5] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x3f064CBeC2242F22B61C65cdF90342b903c78d5f')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x2cE4E140Cc663aD8D11965CBC3C9d92B47280610, compiled with vyper-0.3.10+913...295346888587634795740024980953522190013, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x846e27Cc2F29D01a204B86e600a8db7Ed00c2601, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0xe643b2aA1f5E289F0676DaE961A4239a3497aC3C, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
divisor = 5
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("divisor", [2, 5, 10])
    def test_remove_balanced(
        alice, swap, pool_type, pool_tokens, underlying_tokens, divisor, deposit_amounts, initial_amounts
    ):
        initial_balance = swap.balanceOf(alice)
        amounts = [i // divisor for i in deposit_amounts]
        swap.remove_liquidity_imbalance(amounts, initial_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 4200000000000000000000000 == 1200000000000...0000 ± 1.8e+22
E             comparison failed
E             Obtained: 4200000000000000000000000
E             Expected: 1200000000000000000000000 ± 1.8e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:21: AssertionError
_ test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-0] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x13bdD52b160fF9a7f7B47B11ae9Ff359f3e69FC2')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x0837A36A7aA605FF43832200Ff25c135d7273106, compiled with vyper-0.3.10+913...295346888587634795740024980953522190013, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x033EE010166edc4b3dF13aDA40CB405eFeC1c99D, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x033EE010166edc4b3dF13aDA40CB405eFeC1c99D, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
min_amount = 0
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
        swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for coin, amount in zip(coins, deposit_amounts):
            assert coin.balanceOf(alice) == pytest.approx(amount * 2, rel=1.5e-2)
>           assert coin.balanceOf(swap) == 0
E           assert 2996792769464195219711959 == 0
E            +  where 2996792769464195219711959 = contracts/mocks/ERC20Oracle.vy.balanceOf(<contracts/main/CurveStableSwapMetaNG.vy at 0x0837A36A7aA605FF43832200Ff25c135d7273106, compiled with vyper-0.3.10+913...295346888587634795740024980953522190013, balanceOf={}, allowance={}, total_supply=6019411045805036897219637, nonces={}>)
E            +    where contracts/mocks/ERC20Oracle.vy.balanceOf = <contracts/mocks/ERC20Oracle.vy at 0x033EE010166edc4b3dF13aDA40CB405eFeC1c99D, compiled with vyper-0.3.10+9136169>\n<st...TA, decimals=18, balanceOf={}, allowances={}, totalSupply=9000000000000000000000000, exchange_rate=1006470359024000000>.balanceOf

tests/pools/liquidity/test_remove_liquidity.py:17: AssertionError
_ test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-1] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x1BAfF4882ba76FF5a7C3f5b331e7bF408e2Df7C9')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x53f970A2Af60CF57c0c9CDC5013De06abe709305, compiled with vyper-0.3.10+913...295346888587634795740024980953522190013, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0xcBC7a6F75F5cb5f705d0cedeED65e12fc0b4BE9F, compiled with vyper-0.3.10+9136169>
<storage...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x9E6609e58A6ac13cDA4A38643029A408Dc2A3d22, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_size = 2, idx = 1
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("idx", range(2))
    def test_remove_one(
        alice, swap, pool_type, pool_tokens, underlying_tokens, pool_size, idx, deposit_amounts, initial_amounts
    ):
        amounts = [0] * pool_size
        amounts[idx] = deposit_amounts[idx] // 2
    
        lp_balance = pool_size * deposit_amounts[idx]
        swap.remove_liquidity_imbalance(amounts, lp_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 4490356856067364260505145 == 1490356856067...5145 ± 2.2e+22
E             comparison failed
E             Obtained: 4490356856067364260505145
E             Expected: 1490356856067364260505145 ± 2.2e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:40: AssertionError
_ test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)-10] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xB482317AD4f7C6c0FA8B940c692fb575826F5bB4')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x540bB2bd2f00fBF2fd50365CB6CC85A6bC2e6BFf, compiled with vyper-0.3.10+913...295346888587634795740024980953522190013, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x5379C2D15CEcccEff297F6b46709d51936A10CE9, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0xF3A4036e1bc065D51166E9013c01f9B77A27d233, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
divisor = 10
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("divisor", [2, 5, 10])
    def test_remove_balanced(
        alice, swap, pool_type, pool_tokens, underlying_tokens, divisor, deposit_amounts, initial_amounts
    ):
        initial_balance = swap.balanceOf(alice)
        amounts = [i // divisor for i in deposit_amounts]
        swap.remove_liquidity_imbalance(amounts, initial_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 4350000000000000000000000 == 1350000000000...0000 ± 2.0e+22
E             comparison failed
E             Obtained: 4350000000000000000000000
E             Expected: 1350000000000000000000000 ± 2.0e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:21: AssertionError
_ test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-1] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x6C6d0e43135FF9f78005A39952A9a5d948f62480')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x2aB285965922A045c8C275450f62643ef927632b, compiled with vyper-0.3.10+913...295346888587634795740024980953522190013, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x76dDe500070Dc53E2827C65a1f77df9Bb410B6FC, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x76dDe500070Dc53E2827C65a1f77df9Bb410B6FC, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
min_amount = 1
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
>       swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)

tests/pools/liquidity/test_remove_liquidity.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

alice = Address('0x6C6d0e43135FF9f78005A39952A9a5d948f62480')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x2aB285965922A045c8C275450f62643ef927632b, compiled with vyper-0.3.10+913...295346888587634795740024980953522190013, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x76dDe500070Dc53E2827C65a1f77df9Bb410B6FC, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x76dDe500070Dc53E2827C65a1f77df9Bb410B6FC, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
min_amount = 1
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
>       swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)
E       boa.contracts.base_evm_contract.BoaError: Withdrawal resulted in fewer coins than expected
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0x2aB285965922A045c8C275450f62643ef927632b, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[2996793129917178033207220, 4500000000000000000000000], fee=3000000, offpeg_fee_multiplier=20000000000, initial_A=100000, future_A=100000, initial_A_time=0, future_A_time=0, admin_balances=[360452982813495261, 362783294291381832], last_prices_packed=340282366920938463463374607431768211457000004300038960688, last_D_packed=2048299438136579489581352408125241784342330369951337336468258816, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759675295346888587634795740024980953522190013, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
E        <compiler: user revert with reason>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:1035", function "remove_liquidity", line 1035:8 
E              1034         value = unsafe_div(balances[i] * _burn_amount, total_supply)
E         ---> 1035         assert value >= _min_amounts[i], "Withdrawal resulted in fewer coins than expected"
E         ------------------^
E              1036         amounts[i] = value
E        <locals: _receiver=0x6C6d0e43135FF9f78005A39952A9a5d948f62480, _claim_admin_fees=True, total_supply=9019409605067969776697344, amounts=[1493563726150186227297925, 0], balances=[4490356495614381447009884, 4499999637216705708618168], value=147028384, ma_last_time_unpacked=[32, 48], last_D_packed_current=39537540185534869901244891490375325481556925108754236532102232701749239705449, old_D=49957824750838286392068310174427358223206050881260988279757285870468402774016>

tests/pools/liquidity/test_remove_liquidity.py:11: BoaError
_ test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-2] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x8A3fe23Afcf4860603C3620fE638986265B5A520')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x7F597E03bf6c8Ff195a6d43b7d8B4578a7F67a6E, compiled with vyper-0.3.10+913...295346888587634795740024980953522190013, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x60C91D4B2a84AfFedA13B699A25E6bAe3233eE66, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x60C91D4B2a84AfFedA13B699A25E6bAe3233eE66, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
divisor = 2
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("divisor", [2, 5, 10])
    def test_remove_balanced(
        alice, swap, pool_type, pool_tokens, underlying_tokens, divisor, deposit_amounts, initial_amounts
    ):
        initial_balance = swap.balanceOf(alice)
        amounts = [i // divisor for i in deposit_amounts]
        swap.remove_liquidity_imbalance(amounts, initial_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 3745178428033682130252573 == 7451784280336...2573 ± 1.1e+22
E             comparison failed
E             Obtained: 3745178428033682130252573
E             Expected: 745178428033682130252573 ± 1.1e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:21: AssertionError
_ test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-0] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x5C51108F266e2D2f8d530f631a8233Aa673C2A06')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xCb2c0Fd503C1744115D2860730E8Ac27f36592d2, compiled with vyper-0.3.10+913...295346888587634795740024980953522190013, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0xbA7585A9F00B73C0dC786239fBDc0367fA32CBC1, compiled with vyper-0.3.10+9136169>
<storage...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xBAAB43e81899680D572Cdd06c3A3263BD06847b6, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_size = 2, idx = 0
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("idx", range(2))
    def test_remove_one(
        alice, swap, pool_type, pool_tokens, underlying_tokens, pool_size, idx, deposit_amounts, initial_amounts
    ):
        amounts = [0] * pool_size
        amounts[idx] = deposit_amounts[idx] // 2
    
        lp_balance = pool_size * deposit_amounts[idx]
        swap.remove_liquidity_imbalance(amounts, lp_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 3750007500002999999999998 == 7500000000000...0000 ± 1.1e+22
E             comparison failed
E             Obtained: 3750007500002999999999998
E             Expected: 750000000000000000000000 ± 1.1e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:40: AssertionError
_ test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-0] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xC913992BAA3f40ba0735b72Dc828da70B8431880')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xf565782A4f2614922D38CE08fD5a7a1F8F1fcc86, compiled with vyper-0.3.10+913...635629255508573259203399588385290401470, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x6fe1A91F2c8434122711455419D316a27AB57309, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x2D2d28342C22A7B57B41C1e10982A7795934eDf9, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
min_amount = 0
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
        swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for coin, amount in zip(coins, deposit_amounts):
            assert coin.balanceOf(alice) == pytest.approx(amount * 2, rel=1.5e-2)
>           assert coin.balanceOf(swap) == 0
E           assert 3000008500108167285419395 == 0
E            +  where 3000008500108167285419395 = contracts/mocks/ERC20Rebasing.vy.balanceOf(<contracts/main/CurveStableSwapMetaNG.vy at 0xf565782A4f2614922D38CE08fD5a7a1F8F1fcc86, compiled with vyper-0.3.10+913...635629255508573259203399588385290401470, balanceOf={}, allowance={}, total_supply=5999999999999999999999999, nonces={}>)
E            +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0x2D2d28342C22A7B57B41C1e10982A7795934eDf9, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=9000027000030000015000003, totalShares=8999991000011999985000016, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity.py:17: AssertionError
_ test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-5] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xD674445805c1B552DbEABada87984D290913E2cA')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x7d86AFD7144CdEeB0b693941516e98b39C0fd7c9, compiled with vyper-0.3.10+913...635629255508573259203399588385290401470, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x9a12f0b379c063AEf92B3568C2b3D2C5E8ED98Cb, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x9a12f0b379c063AEf92B3568C2b3D2C5E8ED98Cb, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
divisor = 5
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("divisor", [2, 5, 10])
    def test_remove_balanced(
        alice, swap, pool_type, pool_tokens, underlying_tokens, divisor, deposit_amounts, initial_amounts
    ):
        initial_balance = swap.balanceOf(alice)
        amounts = [i // divisor for i in deposit_amounts]
        swap.remove_liquidity_imbalance(amounts, initial_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 4192285484853891408404116 == 1192285484853...4116 ± 1.8e+22
E             comparison failed
E             Obtained: 4192285484853891408404116
E             Expected: 1192285484853891408404116 ± 1.8e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:21: AssertionError
_ test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-1] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xF3f08e71944dfBa662F9E2eB20Fa03438B539466')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x0F951Dc5e9B25547db9FE9a43BD83AD18305A87A, compiled with vyper-0.3.10+913...635629255508573259203399588385290401470, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0x26a6B5Ae2dF002E1E42C4b343b82bcB10A802507, compiled with vyper-0.3.10+9136169>
<storage...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x0A9e016aEB4619CDD3bBdF0F54ad06a89AB16B89, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_size = 2, idx = 1
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("idx", range(2))
    def test_remove_one(
        alice, swap, pool_type, pool_tokens, underlying_tokens, pool_size, idx, deposit_amounts, initial_amounts
    ):
        amounts = [0] * pool_size
        amounts[idx] = deposit_amounts[idx] // 2
    
        lp_balance = pool_size * deposit_amounts[idx]
        swap.remove_liquidity_imbalance(amounts, lp_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 4500002999999999999999998 == 1500000000000...0000 ± 2.2e+22
E             comparison failed
E             Obtained: 4500002999999999999999998
E             Expected: 1500000000000000000000000 ± 2.2e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:40: AssertionError
_ test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-1] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x7D429687C373eddFf7797Eb7b94cC2d288A6EDA2')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x65e609089f3172E70E9f7227C63a7A66F86C6630, compiled with vyper-0.3.10+913...635629255508573259203399588385290401470, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x6b52dde68ce5e05D22cD076eB201d651C0aEA61c, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xD7D399Ed94421d43dF54c59DD1F980ac295D257c, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
min_amount = 1
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
        swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for coin, amount in zip(coins, deposit_amounts):
            assert coin.balanceOf(alice) == pytest.approx(amount * 2, rel=1.5e-2)
>           assert coin.balanceOf(swap) == 0
E           assert 3000008500108167285419395 == 0
E            +  where 3000008500108167285419395 = contracts/mocks/ERC20Rebasing.vy.balanceOf(<contracts/main/CurveStableSwapMetaNG.vy at 0x65e609089f3172E70E9f7227C63a7A66F86C6630, compiled with vyper-0.3.10+913...635629255508573259203399588385290401470, balanceOf={}, allowance={}, total_supply=5999999999999999999999999, nonces={}>)
E            +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0xD7D399Ed94421d43dF54c59DD1F980ac295D257c, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=9000027000030000015000003, totalShares=8999991000011999985000016, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity.py:17: AssertionError
_ test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=plain)-(Decimals=18,18)-0] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x209D2b4C7bF95B3F49A72AF043CE7809e21Cc9A3')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x7524e361B7B3c04bC2ed7Bb30C33ADC892f49E21, compiled with vyper-0.3.10+913...635629255508573259203399588385290401470, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0xb1BBe696363d57587fcD2D5a6828E79c2ec3BcbF, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=TKN1, symbol=TKN1, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0xb1BBe696363d57587fcD2D5a6828E79c2ec3BcbF, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_size = 2, idx = 0
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("idx", range(2))
    def test_remove_one(
        alice, swap, pool_type, pool_tokens, underlying_tokens, pool_size, idx, deposit_amounts, initial_amounts
    ):
        amounts = [0] * pool_size
        amounts[idx] = deposit_amounts[idx] // 2
    
        lp_balance = pool_size * deposit_amounts[idx]
        swap.remove_liquidity_imbalance(amounts, lp_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 3750000000000000000000000 == 7500000000000...0000 ± 1.1e+22
E             comparison failed
E             Obtained: 3750000000000000000000000
E             Expected: 750000000000000000000000 ± 1.1e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:40: AssertionError
_ test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-10] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xC2576748f9b876968180b906aeB16a15FCC1f627')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x6E1f09a907d9f25746E1b8c3A01F992D99310748, compiled with vyper-0.3.10+913...635629255508573259203399588385290401470, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xb4610A0D68C047cc1015e927c920AbfeF06339fb, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xb4610A0D68C047cc1015e927c920AbfeF06339fb, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
divisor = 10
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("divisor", [2, 5, 10])
    def test_remove_balanced(
        alice, swap, pool_type, pool_tokens, underlying_tokens, divisor, deposit_amounts, initial_amounts
    ):
        initial_balance = swap.balanceOf(alice)
        amounts = [i // divisor for i in deposit_amounts]
        swap.remove_liquidity_imbalance(amounts, initial_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 4341321170460627834454631 == 1341321170460...4631 ± 2.0e+22
E             comparison failed
E             Obtained: 4341321170460627834454631
E             Expected: 1341321170460627834454631 ± 2.0e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:21: AssertionError
_ test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-0] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x76b32bbfE38FD217DbBE15Ccc37690381fcfAdA2')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x200b29315c92E2468d97DF7e745B8179C9AEc3fB, compiled with vyper-0.3.10+913...635629255508573259203399588385290401470, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xd9db929c9Bc49931A8879f11E5E82a4AE02727bF, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0xb6F2b46d647C7925DCF58d1E393f61E2d4DCF3ab, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
min_amount = 0
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
        swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for coin, amount in zip(coins, deposit_amounts):
            assert coin.balanceOf(alice) == pytest.approx(amount * 2, rel=1.5e-2)
>           assert coin.balanceOf(swap) == 0
E           assert 3000000000000000000000000 == 0
E            +  where 3000000000000000000000000 = contracts/mocks/ERC20.vy.balanceOf(<contracts/main/CurveStableSwapMetaNG.vy at 0x200b29315c92E2468d97DF7e745B8179C9AEc3fB, compiled with vyper-0.3.10+913...635629255508573259203399588385290401470, balanceOf={}, allowance={}, total_supply=6000000000000000000000000, nonces={}>)
E            +    where contracts/mocks/ERC20.vy.balanceOf = <contracts/mocks/ERC20.vy at 0xb6F2b46d647C7925DCF58d1E393f61E2d4DCF3ab, compiled with vyper-0.3.10+9136169>\n<storage: name=TKN0, symbol=TKN0, decimals=18, balanceOf={}, allowances={}, totalSupply=9000000000000000000000000>.balanceOf

tests/pools/liquidity/test_remove_liquidity.py:17: AssertionError
_ test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=plain)-(Decimals=18,18)-1] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x370F3f53486169acC37F9E4296cF3d976f8aA874')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x9579A274EafB33B4170152763a9B8d0a2bC4F528, compiled with vyper-0.3.10+913...635629255508573259203399588385290401470, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0xADB96013F13209C1984DA7DCEe14F5b631679ef0, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=TKN1, symbol=TKN1, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0xADB96013F13209C1984DA7DCEe14F5b631679ef0, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_size = 2, idx = 1
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("idx", range(2))
    def test_remove_one(
        alice, swap, pool_type, pool_tokens, underlying_tokens, pool_size, idx, deposit_amounts, initial_amounts
    ):
        amounts = [0] * pool_size
        amounts[idx] = deposit_amounts[idx] // 2
    
        lp_balance = pool_size * deposit_amounts[idx]
        swap.remove_liquidity_imbalance(amounts, lp_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 4500000000000000000000000 == 1500000000000...0000 ± 2.2e+22
E             comparison failed
E             Obtained: 4500000000000000000000000
E             Expected: 1500000000000000000000000 ± 2.2e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:40: AssertionError
_ test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-2] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x896217041eC836529FEe7BcC8B8C0fa2Fe47d69E')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xFE5584460e199357bB22E786777eE9D96de1AB53, compiled with vyper-0.3.10+913...635629255508573259203399588385290401470, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x655232c902DEc8DFbAD8D8fCF28705Ee52f33084, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x2C1Fca6E9363Da4d8680527b76d464B983D1E144, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
divisor = 2
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("divisor", [2, 5, 10])
    def test_remove_balanced(
        alice, swap, pool_type, pool_tokens, underlying_tokens, divisor, deposit_amounts, initial_amounts
    ):
        initial_balance = swap.balanceOf(alice)
        amounts = [i // divisor for i in deposit_amounts]
        swap.remove_liquidity_imbalance(amounts, initial_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 3750007500002999999999998 == 7500000000000...0000 ± 1.1e+22
E             comparison failed
E             Obtained: 3750007500002999999999998
E             Expected: 750000000000000000000000 ± 1.1e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:21: AssertionError
_ test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-1] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xCa0050910AF1b97fF1f2109133b5D75DB6B44089')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x41CcC148d2dC1E0C8484481D794C04536BA646Bd, compiled with vyper-0.3.10+913...975911622429511722666774195817058612927, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xc3B1fBDAA41B7C028b1A0b3A08CFd68a00EF181C, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0x10B52CfB931768E145D80dF01b0E46e13361c043, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
min_amount = 1
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
        swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for coin, amount in zip(coins, deposit_amounts):
            assert coin.balanceOf(alice) == pytest.approx(amount * 2, rel=1.5e-2)
>           assert coin.balanceOf(swap) == 0
E           assert 3000000000000000000000000 == 0
E            +  where 3000000000000000000000000 = contracts/mocks/ERC20.vy.balanceOf(<contracts/main/CurveStableSwapMetaNG.vy at 0x41CcC148d2dC1E0C8484481D794C04536BA646Bd, compiled with vyper-0.3.10+913...975911622429511722666774195817058612927, balanceOf={}, allowance={}, total_supply=6000000000000000000000000, nonces={}>)
E            +    where contracts/mocks/ERC20.vy.balanceOf = <contracts/mocks/ERC20.vy at 0x10B52CfB931768E145D80dF01b0E46e13361c043, compiled with vyper-0.3.10+9136169>\n<storage: name=TKN0, symbol=TKN0, decimals=18, balanceOf={}, allowances={}, totalSupply=9000000000000000000000000>.balanceOf

tests/pools/liquidity/test_remove_liquidity.py:17: AssertionError
_ test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=oracle)-(Decimals=18,18)-0] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xd490D018A472C389BE5Cd2ece48D6CF31De98FFA')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x1F591643322Fa5aee5A86623904212b4FcB2D68D, compiled with vyper-0.3.10+913...975911622429511722666774195817058612927, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0x2e2673BDA7942B58Ec59Fa2D752FAbc2E50B8833, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=TKN1, symbol=TKN1, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xE843Eb8717ce33dcc2CbD1f7cCF54393da1104E7, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_size = 2, idx = 0
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("idx", range(2))
    def test_remove_one(
        alice, swap, pool_type, pool_tokens, underlying_tokens, pool_size, idx, deposit_amounts, initial_amounts
    ):
        amounts = [0] * pool_size
        amounts[idx] = deposit_amounts[idx] // 2
    
        lp_balance = pool_size * deposit_amounts[idx]
        swap.remove_liquidity_imbalance(amounts, lp_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 3745178428033682130252573 == 7451784280336...2573 ± 1.1e+22
E             comparison failed
E             Obtained: 3745178428033682130252573
E             Expected: 745178428033682130252573 ± 1.1e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:40: AssertionError
_ test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-5] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xcAc345331F2078B04f359604F10eA33a47edae0E')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x3d3F81529176C61216ae167b7eFe8FecA5e4442C, compiled with vyper-0.3.10+913...975911622429511722666774195817058612927, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x937331eD5b689f1005b42E980370D5b8350765A6, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xade462baccCE3906a9c9c03DE009E0B1e2177F69, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
divisor = 5
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("divisor", [2, 5, 10])
    def test_remove_balanced(
        alice, swap, pool_type, pool_tokens, underlying_tokens, divisor, deposit_amounts, initial_amounts
    ):
        initial_balance = swap.balanceOf(alice)
        amounts = [i // divisor for i in deposit_amounts]
        swap.remove_liquidity_imbalance(amounts, initial_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 4200007500002999999999999 == 1200000000000...0000 ± 1.8e+22
E             comparison failed
E             Obtained: 4200007500002999999999999
E             Expected: 1200000000000000000000000 ± 1.8e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:21: AssertionError
_ test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-0] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x223aFb600e5312185f1e68eD57C28D4b6A851E22')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xb68493b0717e9c66e0baf26E757C01A55bAA60CB, compiled with vyper-0.3.10+913...975911622429511722666774195817058612927, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xd38aB51A3aE6C3CF009e0E796857567AC37576C9, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x8762B778bf3a475109fe14663Ea0a68A13e4E11D, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
min_amount = 0
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
        swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for coin, amount in zip(coins, deposit_amounts):
            assert coin.balanceOf(alice) == pytest.approx(amount * 2, rel=1.5e-2)
>           assert coin.balanceOf(swap) == 0
E           assert 2996792769464195219711959 == 0
E            +  where 2996792769464195219711959 = contracts/mocks/ERC20Oracle.vy.balanceOf(<contracts/main/CurveStableSwapMetaNG.vy at 0xb68493b0717e9c66e0baf26E757C01A55bAA60CB, compiled with vyper-0.3.10+913...975911622429511722666774195817058612927, balanceOf={}, allowance={}, total_supply=6019411045805036897219637, nonces={}>)
E            +    where contracts/mocks/ERC20Oracle.vy.balanceOf = <contracts/mocks/ERC20Oracle.vy at 0x8762B778bf3a475109fe14663Ea0a68A13e4E11D, compiled with vyper-0.3.10+9136169>\n<st...TA, decimals=18, balanceOf={}, allowances={}, totalSupply=9000000000000000000000000, exchange_rate=1006470359024000000>.balanceOf

tests/pools/liquidity/test_remove_liquidity.py:17: AssertionError
_ test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=oracle)-(Decimals=18,18)-1] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xD6ee2417d11A155B8170d7018782E3b1450E768A')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x42a7192eA35c1155Ef2bBaEFb06CbeC4F5e4e255, compiled with vyper-0.3.10+913...975911622429511722666774195817058612927, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0x4745D313A08DCe9809a2Fdc36D363317329ae4ce, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=TKN1, symbol=TKN1, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x13a10666BCefDdF4093BB27f171e9d04CFE3f704, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_size = 2, idx = 1
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("idx", range(2))
    def test_remove_one(
        alice, swap, pool_type, pool_tokens, underlying_tokens, pool_size, idx, deposit_amounts, initial_amounts
    ):
        amounts = [0] * pool_size
        amounts[idx] = deposit_amounts[idx] // 2
    
        lp_balance = pool_size * deposit_amounts[idx]
        swap.remove_liquidity_imbalance(amounts, lp_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 4490356856067364260505145 == 1490356856067...5145 ± 2.2e+22
E             comparison failed
E             Obtained: 4490356856067364260505145
E             Expected: 1490356856067364260505145 ± 2.2e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:40: AssertionError
_ test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-10] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x55995c9AE5F85137726e4D6aaDe292dE0830c7bD')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x28E0A8fc3F7AaD6f992D854DEdDd43EC295F8D0C, compiled with vyper-0.3.10+913...975911622429511722666774195817058612927, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xB559B154D6a6E062d169ccEE609C9E6A7502c61a, compiled with vyper-0.3.10+9136169>
<s...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x2AdcBe14612BAce589C39Dd4acd5CEb6265EA40b, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
divisor = 10
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("divisor", [2, 5, 10])
    def test_remove_balanced(
        alice, swap, pool_type, pool_tokens, underlying_tokens, divisor, deposit_amounts, initial_amounts
    ):
        initial_balance = swap.balanceOf(alice)
        amounts = [i // divisor for i in deposit_amounts]
        swap.remove_liquidity_imbalance(amounts, initial_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 4350007500002999999999998 == 1350000000000...0000 ± 2.0e+22
E             comparison failed
E             Obtained: 4350007500002999999999998
E             Expected: 1350000000000000000000000 ± 2.0e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:21: AssertionError
_ test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)-0] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x93fE58DbDCbbB77aCBe7578Ec29e8FB5CBa7F54E')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xcBC6b96a411915765bAAFc0F012B1EE76C43aBe1, compiled with vyper-0.3.10+913...975911622429511722666774195817058612927, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0xFD8DDa8d8A3511cb555C3178379ac861c0a6E4aE, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=TKN1, symbol=TKN1, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x88A451Eb8Ec0690422E57414d155Ba611F928d01, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_size = 2, idx = 0
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("idx", range(2))
    def test_remove_one(
        alice, swap, pool_type, pool_tokens, underlying_tokens, pool_size, idx, deposit_amounts, initial_amounts
    ):
        amounts = [0] * pool_size
        amounts[idx] = deposit_amounts[idx] // 2
    
        lp_balance = pool_size * deposit_amounts[idx]
        swap.remove_liquidity_imbalance(amounts, lp_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 3750007500002999999999998 == 7500000000000...0000 ± 1.1e+22
E             comparison failed
E             Obtained: 3750007500002999999999998
E             Expected: 750000000000000000000000 ± 1.1e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:40: AssertionError
_ test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-1] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xaFa3571bdf698d936C485B06fabB88A7Ee4Abde5')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x1f0fbbB2f1aA6b4321c149F0bC80cE9Bf074742c, compiled with vyper-0.3.10+913...975911622429511722666774195817058612927, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x0D3e9C7cbfaf33154a7a1599229534687E9329f2, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xB5D8736433561bAe5707e60b601DA05A12e09B70, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
min_amount = 1
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
>       swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)

tests/pools/liquidity/test_remove_liquidity.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

alice = Address('0xaFa3571bdf698d936C485B06fabB88A7Ee4Abde5')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x1f0fbbB2f1aA6b4321c149F0bC80cE9Bf074742c, compiled with vyper-0.3.10+913...975911622429511722666774195817058612927, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x0D3e9C7cbfaf33154a7a1599229534687E9329f2, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xB5D8736433561bAe5707e60b601DA05A12e09B70, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
min_amount = 1
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
>       swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)
E       boa.contracts.base_evm_contract.BoaError: Withdrawal resulted in fewer coins than expected
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0x1f0fbbB2f1aA6b4321c149F0bC80cE9Bf074742c, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[2996793129917178033207220, 4500000000000000000000000], fee=3000000, offpeg_fee_multiplier=20000000000, initial_A=100000, future_A=100000, initial_A_time=0, future_A_time=0, admin_balances=[360452982813495261, 362783294291381832], last_prices_packed=340282366920938463463374607431768211457000004300038960688, last_D_packed=2048299438136579489581352408125241784342330369951337336468258816, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759675975911622429511722666774195817058612927, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
E        <compiler: user revert with reason>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:1035", function "remove_liquidity", line 1035:8 
E              1034         value = unsafe_div(balances[i] * _burn_amount, total_supply)
E         ---> 1035         assert value >= _min_amounts[i], "Withdrawal resulted in fewer coins than expected"
E         ------------------^
E              1036         amounts[i] = value
E        <locals: _receiver=0xaFa3571bdf698d936C485B06fabB88A7Ee4Abde5, _claim_admin_fees=True, total_supply=9019409605067969776697344, amounts=[1493563726150186227297925, 0], balances=[4490356495614381447009884, 4499999637216705708618168], value=147028384, ma_last_time_unpacked=[32, 48], last_D_packed_current=39537540185534869901244891490375325481556925108754236532102232701749239705449, old_D=49957824750838286392068310174427358223206050881260988279757285870468402774016>

tests/pools/liquidity/test_remove_liquidity.py:11: BoaError
_ test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-2] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xB1924EC3FB21fB06420DE33Fc5F9Eba65f889E59')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x034e98f70A261f46ca2Fc6E54D8540DDd16F66e6, compiled with vyper-0.3.10+913...975911622429511722666774195817058612927, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x0876D59E8CfC801719d3a2598e6d1F191E9e00b7, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0x50367Ea47f1119CcF970ae05452834A2faEBFC13, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
divisor = 2
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("divisor", [2, 5, 10])
    def test_remove_balanced(
        alice, swap, pool_type, pool_tokens, underlying_tokens, divisor, deposit_amounts, initial_amounts
    ):
        initial_balance = swap.balanceOf(alice)
        amounts = [i // divisor for i in deposit_amounts]
        swap.remove_liquidity_imbalance(amounts, initial_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 3750000000000000000000000 == 7500000000000...0000 ± 1.1e+22
E             comparison failed
E             Obtained: 3750000000000000000000000
E             Expected: 750000000000000000000000 ± 1.1e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:21: AssertionError
_ test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x60B13F71464dEb57a8D574Fc2E99C0892a7c43Cf')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xa6B6bdE6A1c0F4E41422A2CAd063f12C276C2CCb, compiled with vyper-0.3.10+913...316193989350450186130148803248826824384, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x1abE653571bFbc1B0318F3dB079035F14712b78d, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x1abE653571bFbc1B0318F3dB079035F14712b78d, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
min_amount = 0
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
        swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for coin, amount in zip(coins, deposit_amounts):
            assert coin.balanceOf(alice) == pytest.approx(amount * 2, rel=1.5e-2)
>           assert coin.balanceOf(swap) == 0
E           assert 3000008500108167285419395 == 0
E            +  where 3000008500108167285419395 = contracts/mocks/ERC20Rebasing.vy.balanceOf(<contracts/main/CurveStableSwapMetaNG.vy at 0xa6B6bdE6A1c0F4E41422A2CAd063f12C276C2CCb, compiled with vyper-0.3.10+913...316193989350450186130148803248826824384, balanceOf={}, allowance={}, total_supply=5999999999999999999999999, nonces={}>)
E            +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0x1abE653571bFbc1B0318F3dB079035F14712b78d, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=9000027000030000015000003, totalShares=8999991000011999985000016, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity.py:17: AssertionError
_ test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-5] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x7a2c8a8948737b578d6739945cdc87B6Ec2ad025')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xeEa0802B19BD28bBe717A8489FB20BCf0a6aF506, compiled with vyper-0.3.10+913...316193989350450186130148803248826824384, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x38A411B3ED7e7d167216AC740126718b53B7dB1E, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0x8078366869C73cE847Ec1c6955120498AEc0152B, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
divisor = 5
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("divisor", [2, 5, 10])
    def test_remove_balanced(
        alice, swap, pool_type, pool_tokens, underlying_tokens, divisor, deposit_amounts, initial_amounts
    ):
        initial_balance = swap.balanceOf(alice)
        amounts = [i // divisor for i in deposit_amounts]
        swap.remove_liquidity_imbalance(amounts, initial_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 4200000000000000000000000 == 1200000000000...0000 ± 1.8e+22
E             comparison failed
E             Obtained: 4200000000000000000000000
E             Expected: 1200000000000000000000000 ± 1.8e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:21: AssertionError
_ test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)-1] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xA19b83CBA12C6fDdF53329F5c551c82b4347b1F3')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x9f90Ef8a438653658394aBC7874B7887a1Dc09b6, compiled with vyper-0.3.10+913...316193989350450186130148803248826824384, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0xfdbeAf828D3d8489fb924C627A5ef44866f0cA3c, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=TKN1, symbol=TKN1, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x6c280d5b9dC7ad34198176755d7E564E3e9820cc, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
pool_size = 2, idx = 1
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("idx", range(2))
    def test_remove_one(
        alice, swap, pool_type, pool_tokens, underlying_tokens, pool_size, idx, deposit_amounts, initial_amounts
    ):
        amounts = [0] * pool_size
        amounts[idx] = deposit_amounts[idx] // 2
    
        lp_balance = pool_size * deposit_amounts[idx]
        swap.remove_liquidity_imbalance(amounts, lp_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 4500002999999999999999998 == 1500000000000...0000 ± 2.2e+22
E             comparison failed
E             Obtained: 4500002999999999999999998
E             Expected: 1500000000000000000000000 ± 2.2e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:40: AssertionError
_ test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-1] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x0bC6dc5c70d8f7Cc24f5A51D3B719e98b0Dc460C')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xD82095CF25cc857d631FBed2536F87afF0A72d78, compiled with vyper-0.3.10+913...316193989350450186130148803248826824384, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x9C968DcaBE79DE6083Ce4B01A4e6B0F3930dB01B, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x9C968DcaBE79DE6083Ce4B01A4e6B0F3930dB01B, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
min_amount = 1
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]

    @pytest.mark.parametrize("min_amount", (0, 1))
    def test_remove_liquidity(alice, swap, pool_type, pool_tokens, underlying_tokens, min_amount, deposit_amounts):
        swap.remove_liquidity(swap.balanceOf(alice), [i * min_amount for i in deposit_amounts], sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for coin, amount in zip(coins, deposit_amounts):
            assert coin.balanceOf(alice) == pytest.approx(amount * 2, rel=1.5e-2)
>           assert coin.balanceOf(swap) == 0
E           assert 3000008500108167285419395 == 0
E            +  where 3000008500108167285419395 = contracts/mocks/ERC20Rebasing.vy.balanceOf(<contracts/main/CurveStableSwapMetaNG.vy at 0xD82095CF25cc857d631FBed2536F87afF0A72d78, compiled with vyper-0.3.10+913...316193989350450186130148803248826824384, balanceOf={}, allowance={}, total_supply=5999999999999999999999999, nonces={}>)
E            +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0x9C968DcaBE79DE6083Ce4B01A4e6B0F3930dB01B, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=9000027000030000015000003, totalShares=8999991000011999985000016, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity.py:17: AssertionError
_ test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-10] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xFd2A2aF21e9FC2E7f06Ee101d97eA2fe5060a21c')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xb1578bC3c9BEf0b535519Ee624c889b780BD059B, compiled with vyper-0.3.10+913...316193989350450186130148803248826824384, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x33b5b0d9689471d1834EafD8D841D896A3717b90, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0x87Fbc4dDCF30308EF06B47Ac18564ba8648A9f38, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
divisor = 10
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("divisor", [2, 5, 10])
    def test_remove_balanced(
        alice, swap, pool_type, pool_tokens, underlying_tokens, divisor, deposit_amounts, initial_amounts
    ):
        initial_balance = swap.balanceOf(alice)
        amounts = [i // divisor for i in deposit_amounts]
        swap.remove_liquidity_imbalance(amounts, initial_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 4350000000000000000000000 == 1350000000000...0000 ± 2.0e+22
E             comparison failed
E             Obtained: 4350000000000000000000000
E             Expected: 1350000000000000000000000 ± 2.0e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:21: AssertionError
_ test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-2] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x98621a2192c91e0CEf3d8c3498c486640038C818')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xCcd4b4756379d2ebF2ed5161B2180f993724B2E1, compiled with vyper-0.3.10+913...316193989350450186130148803248826824384, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x3f50A262D17dbD1a8a934C87B82Ceab455a57A55, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xBEDd7788dA1a75Ce6792894F0A457B387550679d, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
divisor = 2
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("divisor", [2, 5, 10])
    def test_remove_balanced(
        alice, swap, pool_type, pool_tokens, underlying_tokens, divisor, deposit_amounts, initial_amounts
    ):
        initial_balance = swap.balanceOf(alice)
        amounts = [i // divisor for i in deposit_amounts]
        swap.remove_liquidity_imbalance(amounts, initial_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 3745178428033682130252573 == 7451784280336...2573 ± 1.1e+22
E             comparison failed
E             Obtained: 3745178428033682130252573
E             Expected: 745178428033682130252573 ± 1.1e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:21: AssertionError
_ test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-5] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x87B8EFF6036EF48FB7eB5Edc1D50dbA73B1f3F0A')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xCD750A9AbC0167eF1537dDD1317C8Ea9D72E78ae, compiled with vyper-0.3.10+913...316193989350450186130148803248826824384, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x9Fd8f755E0c169425B18F10E28C198FD105593C1, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xa2246954e6Ac1E240A822e994459e547241A320D, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
divisor = 5
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("divisor", [2, 5, 10])
    def test_remove_balanced(
        alice, swap, pool_type, pool_tokens, underlying_tokens, divisor, deposit_amounts, initial_amounts
    ):
        initial_balance = swap.balanceOf(alice)
        amounts = [i // divisor for i in deposit_amounts]
        swap.remove_liquidity_imbalance(amounts, initial_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 4192285484853891408404116 == 1192285484853...4116 ± 1.8e+22
E             comparison failed
E             Obtained: 4192285484853891408404116
E             Expected: 1192285484853891408404116 ± 1.8e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:21: AssertionError
_ test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-10] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xD273D89907Be84a5A9cf1FEDa89Ef637576D3D83')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x0FdE514442D9D4BBe069804D5BF95e13E76bA769, compiled with vyper-0.3.10+913...656476356271388649593523410680595035841, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x4248d560B7963e8A75C830ef2565E5F80D0A2cC1, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x7E0D14c7e7de3Ec34c37DDAD52C1CC0165dD7AE4, compiled with vyper-0.3.10+9136169>
<s...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
divisor = 10
deposit_amounts = [1490356856067364260505145, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("divisor", [2, 5, 10])
    def test_remove_balanced(
        alice, swap, pool_type, pool_tokens, underlying_tokens, divisor, deposit_amounts, initial_amounts
    ):
        initial_balance = swap.balanceOf(alice)
        amounts = [i // divisor for i in deposit_amounts]
        swap.remove_liquidity_imbalance(amounts, initial_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 4341321170460627834454631 == 1341321170460...4631 ± 2.0e+22
E             comparison failed
E             Obtained: 4341321170460627834454631
E             Expected: 1341321170460627834454631 ± 2.0e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:21: AssertionError
_ test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-2] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x1935Fc162D22C5Ba055B1fA842CC821d6C995dcC')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x6BCb4130d08142AcdE669297400B29c36C32b837, compiled with vyper-0.3.10+913...656476356271388649593523410680595035841, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x12a2D4707E08F1977ae0415c9Ec9f7b435ACAA78, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x12a2D4707E08F1977ae0415c9Ec9f7b435ACAA78, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
divisor = 2
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("divisor", [2, 5, 10])
    def test_remove_balanced(
        alice, swap, pool_type, pool_tokens, underlying_tokens, divisor, deposit_amounts, initial_amounts
    ):
        initial_balance = swap.balanceOf(alice)
        amounts = [i // divisor for i in deposit_amounts]
        swap.remove_liquidity_imbalance(amounts, initial_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 3750007500002999999999998 == 7500000000000...0000 ± 1.1e+22
E             comparison failed
E             Obtained: 3750007500002999999999998
E             Expected: 750000000000000000000000 ± 1.1e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:21: AssertionError
_ test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-5] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xB6491039B9DB60af005cf7ba1dDb8C3A8af9CE09')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x8593594bD74B9BdCA86Ba2e176dA6c19b494d1fD, compiled with vyper-0.3.10+913...656476356271388649593523410680595035841, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x3593AE4C3532Db3f05CaC7e39C055a62CCACE54e, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x3593AE4C3532Db3f05CaC7e39C055a62CCACE54e, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
divisor = 5
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("divisor", [2, 5, 10])
    def test_remove_balanced(
        alice, swap, pool_type, pool_tokens, underlying_tokens, divisor, deposit_amounts, initial_amounts
    ):
        initial_balance = swap.balanceOf(alice)
        amounts = [i // divisor for i in deposit_amounts]
        swap.remove_liquidity_imbalance(amounts, initial_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 4200007500002999999999999 == 1200000000000...0000 ± 1.8e+22
E             comparison failed
E             Obtained: 4200007500002999999999999
E             Expected: 1200000000000000000000000 ± 1.8e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:21: AssertionError
_ test_amount_received[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-0] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xA262992df5550C2Fd4e5CACaCca3E6F1598062e7')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xDf09B86B83037C1E57337D98D4234143981bd4CE, compiled with vyper-0.3.10+913...656476356271388649593523410680595035841, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0x77f72D4148E0171CF629f3B1ABf88EB710808A95, compiled with vyper-0.3.10+9136169>
<storage...B, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000, exchange_rate=1007580460035000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xbB5d0B47e15BC1f62b573F25140b54a2c3C95D3B, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
decimals = [18, 18], idx = 0

    @pytest.mark.parametrize("idx", range(2))
    def test_amount_received(alice, swap, pool_type, pool_tokens, underlying_tokens, decimals, idx):
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        initial_amount = coins[idx].balanceOf(alice)
    
        swap.remove_liquidity_one_coin(10**18, idx, 0, sender=alice)
        ideal = 10 ** decimals[idx]
>       assert ideal * 0.99 <= coins[idx].balanceOf(alice) - initial_amount <= ideal
E       AssertionError: assert (1500005499803000654240123 - 1500002999999999999999999) <= 1000000000000000000
E        +  where 1500005499803000654240123 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0xA262992df5550C2Fd4e5CACaCca3E6F1598062e7'))
E        +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0xbB5d0B47e15BC1f62b573F25140b54a2c3C95D3B, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=9000018000012000003000000, totalShares=8999991000011999985000016, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity_one_coin.py:16: AssertionError
_ test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-10] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x9083807593d9ADAbB0BEbee899A9674eD85fd30C')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x99d00dC043751c743588C5acF49F0dEC648A2Fe0, compiled with vyper-0.3.10+913...996758723192327113056898018112363247298, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x701311c45d08033eD39473e75296EA6dd9586eA1, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x701311c45d08033eD39473e75296EA6dd9586eA1, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
divisor = 10
deposit_amounts = [1500000000000000000000000, 1500000000000000000000000]
initial_amounts = [3000000000000000000000000, 3000000000000000000000000]

    @pytest.mark.parametrize("divisor", [2, 5, 10])
    def test_remove_balanced(
        alice, swap, pool_type, pool_tokens, underlying_tokens, divisor, deposit_amounts, initial_amounts
    ):
        initial_balance = swap.balanceOf(alice)
        amounts = [i // divisor for i in deposit_amounts]
        swap.remove_liquidity_imbalance(amounts, initial_balance, sender=alice)
    
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
    
        for i, coin in enumerate(coins):
            assert coin.balanceOf(alice) == pytest.approx(amounts[i] + initial_amounts[i] - deposit_amounts[i], rel=1.5e-2)
>           assert coin.balanceOf(swap) == pytest.approx(deposit_amounts[i] - amounts[i], rel=1.5e-2)
E           assert 4350007500002999999999998 == 1350000000000...0000 ± 2.0e+22
E             comparison failed
E             Obtained: 4350007500002999999999998
E             Expected: 1350000000000000000000000 ± 2.0e+22

tests/pools/liquidity/test_remove_liquidity_imbalance.py:21: AssertionError
_ test_expected_vs_actual[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)-0] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x8C6c8db20f26A02353bA2F84775E062539ef67fC')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xfee2107699212C5a0fD0f3B0A64Bf6d74694b062, compiled with vyper-0.3.10+913...337041090113265576520272625544131458755, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20.vy at 0x238a69F38FD8C54212901EcA0e6fF3e8e3b10898, compiled with vyper-0.3.10+9136169>
<storage...69>
<storage: name=TKN1, symbol=TKN1, decimals=18, balanceOf={}, allowances={}, totalSupply=6000000000000000000000000>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xa726a820E0B9d44605Dc2B83fa27a6ca4F07fd92, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
idx = 0

    @pytest.mark.parametrize("idx", range(2))
    def test_expected_vs_actual(alice, swap, pool_type, pool_tokens, underlying_tokens, idx):
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        initial_amount = coins[idx].balanceOf(alice)
        amount = swap.balanceOf(alice) // 10
    
        expected = swap.calc_withdraw_one_coin(amount, idx)
        swap.remove_liquidity_one_coin(amount, idx, 0, sender=alice)
>       assert coins[idx].balanceOf(alice) == expected + initial_amount
E       AssertionError: assert 1799934468455655852096860 == (299929968452655852096861 + 1500002999999999999999999)
E        +  where 1799934468455655852096860 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0x8C6c8db20f26A02353bA2F84775E062539ef67fC'))
E        +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0xa726a820E0B9d44605Dc2B83fa27a6ca4F07fd92, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=9000018000012000003000000, totalShares=8999991000011999985000016, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity_one_coin.py:42: AssertionError
_ test_amount_received[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x6B456A503a6e0425965d2b3E7403b017F31dBfDc')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x73F218E14E6eD49CD35fF2b293935F3f3fb72f42, compiled with vyper-0.3.10+913...337041090113265576520272625544131458755, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x8F2e01b21095fE1b73BFe7dbC3ae329a411393D0, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x8F2e01b21095fE1b73BFe7dbC3ae329a411393D0, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
decimals = [18, 18], idx = 0

    @pytest.mark.parametrize("idx", range(2))
    def test_amount_received(alice, swap, pool_type, pool_tokens, underlying_tokens, decimals, idx):
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        initial_amount = coins[idx].balanceOf(alice)
    
        swap.remove_liquidity_one_coin(10**18, idx, 0, sender=alice)
        ideal = 10 ** decimals[idx]
>       assert ideal * 0.99 <= coins[idx].balanceOf(alice) - initial_amount <= ideal
E       AssertionError: assert (1500005499803000654240123 - 1500002999999999999999999) <= 1000000000000000000
E        +  where 1500005499803000654240123 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0x6B456A503a6e0425965d2b3E7403b017F31dBfDc'))
E        +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0x8F2e01b21095fE1b73BFe7dbC3ae329a411393D0, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=9000018000012000003000000, totalShares=8999991000011999985000016, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity_one_coin.py:16: AssertionError
_ test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-1-0] _
[gw1] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x000Ae400731CFA81ed7Cb2ED56A1FFd75cf2A43F')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x9E99c2699151328d7811346542Ee2057353D2eA3, compiled with vyper-0.3.10+913...337041090113265576520272625544131458755, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
idx = 0, divisor = 1

    @pytest.mark.parametrize("idx", range(2))
    @pytest.mark.parametrize("divisor", [1, 5, 42])
    def test_lp_token_balance(alice, swap, idx, divisor):
        initial_amount = swap.balanceOf(alice)
        amount = initial_amount // divisor
    
        if divisor == 1:
>           with boa.reverts():

tests/pools/liquidity/test_remove_liquidity_one_coin.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_no_total_supply[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xDE574c41FD93554c67235378dd858CaF1a66A040')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xEc1c0972bA50c7Fcb096A0E31F2b46e1e0a86DA5, compiled with vyper-0.3.10+913...677323457034204039983647232975899670212, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_size = 2

    def test_no_total_supply(alice, swap, pool_size):
>       swap.remove_liquidity(swap.totalSupply(), [0] * pool_size, sender=alice)

tests/pools/liquidity/test_remove_liquidity_imbalance.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

alice = Address('0xDE574c41FD93554c67235378dd858CaF1a66A040')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xEc1c0972bA50c7Fcb096A0E31F2b46e1e0a86DA5, compiled with vyper-0.3.10+913...677323457034204039983647232975899670212, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_size = 2

    def test_no_total_supply(alice, swap, pool_size):
>       swap.remove_liquidity(swap.totalSupply(), [0] * pool_size, sender=alice)
E       boa.contracts.base_evm_contract.BoaError: Revert(b'')
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0xEc1c0972bA50c7Fcb096A0E31F2b46e1e0a86DA5, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[0, 0], fee=1000000, offpeg_fee_multiplier=20000000000, initial_A=200000, future_A=200000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=2041694201525630780780247644590609268745000000000000000000000000, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759677677323457034204039983647232975899670212, balanceOf={}, allowance={}, total_supply=0, nonces={}>
E        <compiler: safesub>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:1548", function "_burnFrom", line 1548:29 
E              1547     self.total_supply -= _burn_amount
E         ---> 1548     self.balanceOf[_from] -= _burn_amount
E         ---------------------------------------^
E              1549     log Transfer(_from, empty(address), _burn_amount)
E        <locals: _from=0xDE574c41FD93554c67235378dd858CaF1a66A040, _burn_amount=9000000000000000000000000>

tests/pools/liquidity/test_remove_liquidity_imbalance.py:66: BoaError
_ test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-1-1] _
[gw1] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x1c4E3a9b24F8F84bEE0a87c1C8726882063533C0')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xb424f112103C6D4848B59066421aC048f5bB99F4, compiled with vyper-0.3.10+913...677323457034204039983647232975899670212, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
idx = 1, divisor = 1

    @pytest.mark.parametrize("idx", range(2))
    @pytest.mark.parametrize("divisor", [1, 5, 42])
    def test_lp_token_balance(alice, swap, idx, divisor):
        initial_amount = swap.balanceOf(alice)
        amount = initial_amount // divisor
    
        if divisor == 1:
>           with boa.reverts():

tests/pools/liquidity/test_remove_liquidity_one_coin.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_no_total_supply[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x7847923c0EcFC4D66c26c6Bf4D78fE8aB84227f1')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x2054f45796cbF2a1BdCd5024Ac0f50e7b2c17D7E, compiled with vyper-0.3.10+913...677323457034204039983647232975899670212, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_size = 2

    def test_no_total_supply(alice, swap, pool_size):
>       swap.remove_liquidity(swap.totalSupply(), [0] * pool_size, sender=alice)

tests/pools/liquidity/test_remove_liquidity_imbalance.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

alice = Address('0x7847923c0EcFC4D66c26c6Bf4D78fE8aB84227f1')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x2054f45796cbF2a1BdCd5024Ac0f50e7b2c17D7E, compiled with vyper-0.3.10+913...677323457034204039983647232975899670212, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_size = 2

    def test_no_total_supply(alice, swap, pool_size):
>       swap.remove_liquidity(swap.totalSupply(), [0] * pool_size, sender=alice)
E       boa.contracts.base_evm_contract.BoaError: Revert(b'')
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0x2054f45796cbF2a1BdCd5024Ac0f50e7b2c17D7E, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[360452982813495261, 362783294291381832], fee=3000000, offpeg_fee_multiplier=20000000000, initial_A=100000, future_A=100000, initial_A_time=0, future_A_time=0, admin_balances=[360452982813495261, 362783294291381832], last_prices_packed=340282366920938463463374607431768211457000004300038960688, last_D_packed=2048299438136579489581352408125241784342330369951337336468258816, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759677677323457034204039983647232975899670212, balanceOf={}, allowance={}, total_supply=0, nonces={}>
E        <compiler: safesub>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:1548", function "_burnFrom", line 1548:29 
E              1547     self.total_supply -= _burn_amount
E         ---> 1548     self.balanceOf[_from] -= _burn_amount
E         ---------------------------------------^
E              1549     log Transfer(_from, empty(address), _burn_amount)
E        <locals: _from=0x7847923c0EcFC4D66c26c6Bf4D78fE8aB84227f1, _burn_amount=9019409605067969776697344>

tests/pools/liquidity/test_remove_liquidity_imbalance.py:66: BoaError
_ test_no_total_supply[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x489cB6bDc8581d7C68e404451e23C6508C88BE39')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x7cd3830b0905286e030533EC7912baF37C5b1Ba7, compiled with vyper-0.3.10+913...017605823955142503447021840407667881669, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_size = 2

    def test_no_total_supply(alice, swap, pool_size):
>       swap.remove_liquidity(swap.totalSupply(), [0] * pool_size, sender=alice)

tests/pools/liquidity/test_remove_liquidity_imbalance.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

alice = Address('0x489cB6bDc8581d7C68e404451e23C6508C88BE39')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x7cd3830b0905286e030533EC7912baF37C5b1Ba7, compiled with vyper-0.3.10+913...017605823955142503447021840407667881669, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_size = 2

    def test_no_total_supply(alice, swap, pool_size):
>       swap.remove_liquidity(swap.totalSupply(), [0] * pool_size, sender=alice)
E       boa.contracts.base_evm_contract.BoaError: Revert(b'')
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0x7cd3830b0905286e030533EC7912baF37C5b1Ba7, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[150000000049900, 149999999950099], fee=4000000, offpeg_fee_multiplier=20000000000, initial_A=50000, future_A=50000, initial_A_time=0, future_A_time=0, admin_balances=[150000000049900, 149999999950099], last_prices_packed=340282366920938463463374607431768211457000000001330671546, last_D_packed=2041694201525630780780247304308242347806536539624792567233784883, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759678017605823955142503447021840407667881669, balanceOf={}, allowance={}, total_supply=0, nonces={}>
E        <compiler: safesub>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:1548", function "_burnFrom", line 1548:29 
E              1547     self.total_supply -= _burn_amount
E         ---> 1548     self.balanceOf[_from] -= _burn_amount
E         ---------------------------------------^
E              1549     log Transfer(_from, empty(address), _burn_amount)
E        <locals: _from=0x489cB6bDc8581d7C68e404451e23C6508C88BE39, _burn_amount=9000002999399999001996339>

tests/pools/liquidity/test_remove_liquidity_imbalance.py:66: BoaError
_ test_no_total_supply[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x640D8C2448a3fac3592c6e1BA06158620142b76E')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xa7353741B7a7FB9E7f63c77d960324b5F7584215, compiled with vyper-0.3.10+913...017605823955142503447021840407667881669, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_size = 2

    def test_no_total_supply(alice, swap, pool_size):
>       swap.remove_liquidity(swap.totalSupply(), [0] * pool_size, sender=alice)

tests/pools/liquidity/test_remove_liquidity_imbalance.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

alice = Address('0x640D8C2448a3fac3592c6e1BA06158620142b76E')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xa7353741B7a7FB9E7f63c77d960324b5F7584215, compiled with vyper-0.3.10+913...017605823955142503447021840407667881669, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
pool_size = 2

    def test_no_total_supply(alice, swap, pool_size):
>       swap.remove_liquidity(swap.totalSupply(), [0] * pool_size, sender=alice)
E       boa.contracts.base_evm_contract.BoaError: Revert(b'')
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0xa7353741B7a7FB9E7f63c77d960324b5F7584215, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[0, 0], fee=1000000, offpeg_fee_multiplier=20000000000, initial_A=200000, future_A=200000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=2041694201525630780780247644590609268745000000000000000000000000, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759678017605823955142503447021840407667881669, balanceOf={}, allowance={}, total_supply=0, nonces={}>
E        <compiler: safesub>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:1548", function "_burnFrom", line 1548:29 
E              1547     self.total_supply -= _burn_amount
E         ---> 1548     self.balanceOf[_from] -= _burn_amount
E         ---------------------------------------^
E              1549     log Transfer(_from, empty(address), _burn_amount)
E        <locals: _from=0x640D8C2448a3fac3592c6e1BA06158620142b76E, _burn_amount=9000000000000000000000000>

tests/pools/liquidity/test_remove_liquidity_imbalance.py:66: BoaError
_ test_no_total_supply[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x3e7a3180e4ba70800184Bf43d361Da3CD814BA89')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xf9dB4FbaaD37f5EF61a676dc8FeDd4C643b26bf5, compiled with vyper-0.3.10+913...017605823955142503447021840407667881669, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_size = 2

    def test_no_total_supply(alice, swap, pool_size):
>       swap.remove_liquidity(swap.totalSupply(), [0] * pool_size, sender=alice)

tests/pools/liquidity/test_remove_liquidity_imbalance.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

alice = Address('0x3e7a3180e4ba70800184Bf43d361Da3CD814BA89')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xf9dB4FbaaD37f5EF61a676dc8FeDd4C643b26bf5, compiled with vyper-0.3.10+913...017605823955142503447021840407667881669, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
pool_size = 2

    def test_no_total_supply(alice, swap, pool_size):
>       swap.remove_liquidity(swap.totalSupply(), [0] * pool_size, sender=alice)
E       boa.contracts.base_evm_contract.BoaError: Revert(b'')
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0xf9dB4FbaaD37f5EF61a676dc8FeDd4C643b26bf5, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[360452982813495261, 362783294291381832], fee=3000000, offpeg_fee_multiplier=20000000000, initial_A=100000, future_A=100000, initial_A_time=0, future_A_time=0, admin_balances=[360452982813495261, 362783294291381832], last_prices_packed=340282366920938463463374607431768211457000004300038960688, last_D_packed=2048299438136579489581352408125241784342330369951337336468258816, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759678017605823955142503447021840407667881669, balanceOf={}, allowance={}, total_supply=0, nonces={}>
E        <compiler: safesub>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:1548", function "_burnFrom", line 1548:29 
E              1547     self.total_supply -= _burn_amount
E         ---> 1548     self.balanceOf[_from] -= _burn_amount
E         ---------------------------------------^
E              1549     log Transfer(_from, empty(address), _burn_amount)
E        <locals: _from=0x3e7a3180e4ba70800184Bf43d361Da3CD814BA89, _burn_amount=9019409605067969776697344>

tests/pools/liquidity/test_remove_liquidity_imbalance.py:66: BoaError
_ test_expected_vs_actual[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x2c6bFE88dE487C27807977260F192DA3c466e6E6')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x3eAcA9a41ff9335c885c69be2bcfa16C2c3945Ed, compiled with vyper-0.3.10+913...017605823955142503447021840407667881669, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_type = 1
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xd51596e54B57fBb7B62A28234ABf2c063892b224, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000000000000000000000000, totalShares=6000000000000000000000000, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xd51596e54B57fBb7B62A28234ABf2c063892b224, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
idx = 0

    @pytest.mark.parametrize("idx", range(2))
    def test_expected_vs_actual(alice, swap, pool_type, pool_tokens, underlying_tokens, idx):
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        initial_amount = coins[idx].balanceOf(alice)
        amount = swap.balanceOf(alice) // 10
    
        expected = swap.calc_withdraw_one_coin(amount, idx)
        swap.remove_liquidity_one_coin(amount, idx, 0, sender=alice)
>       assert coins[idx].balanceOf(alice) == expected + initial_amount
E       AssertionError: assert 1799934468455655852096860 == (299929968452655852096861 + 1500002999999999999999999)
E        +  where 1799934468455655852096860 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0x2c6bFE88dE487C27807977260F192DA3c466e6E6'))
E        +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0xd51596e54B57fBb7B62A28234ABf2c063892b224, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=9000018000012000003000000, totalShares=8999991000011999985000016, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity_one_coin.py:42: AssertionError
_ test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-1-0] _
[gw1] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x3c7D0eC4C60aB956c9C4fd3868427BDbf404d07D')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x4856E534B1ff1F651ebB0bCF0Ad3727f05A0FCd0, compiled with vyper-0.3.10+913...017605823955142503447021840407667881669, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
idx = 0, divisor = 1

    @pytest.mark.parametrize("idx", range(2))
    @pytest.mark.parametrize("divisor", [1, 5, 42])
    def test_lp_token_balance(alice, swap, idx, divisor):
        initial_amount = swap.balanceOf(alice)
        amount = initial_amount // divisor
    
        if divisor == 1:
>           with boa.reverts():

tests/pools/liquidity/test_remove_liquidity_one_coin.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_no_total_supply[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xc5c523B7740b419a2e1952e84343AE2341088284')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x1e509C1b19FB02cF3e238E23Eb2Fd3Fd5bA3923e, compiled with vyper-0.3.10+913...357888190876080966910396447839436093126, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_size = 2

    def test_no_total_supply(alice, swap, pool_size):
>       swap.remove_liquidity(swap.totalSupply(), [0] * pool_size, sender=alice)

tests/pools/liquidity/test_remove_liquidity_imbalance.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

alice = Address('0xc5c523B7740b419a2e1952e84343AE2341088284')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x1e509C1b19FB02cF3e238E23Eb2Fd3Fd5bA3923e, compiled with vyper-0.3.10+913...357888190876080966910396447839436093126, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
pool_size = 2

    def test_no_total_supply(alice, swap, pool_size):
>       swap.remove_liquidity(swap.totalSupply(), [0] * pool_size, sender=alice)
E       boa.contracts.base_evm_contract.BoaError: Revert(b'')
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0x1e509C1b19FB02cF3e238E23Eb2Fd3Fd5bA3923e, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[150000000049900, 149999999950099], fee=4000000, offpeg_fee_multiplier=20000000000, initial_A=50000, future_A=50000, initial_A_time=0, future_A_time=0, admin_balances=[150000000049900, 149999999950099], last_prices_packed=340282366920938463463374607431768211457000000001330671546, last_D_packed=2041694201525630780780247304308242347806536539624792567233784883, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759678357888190876080966910396447839436093126, balanceOf={}, allowance={}, total_supply=0, nonces={}>
E        <compiler: safesub>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:1548", function "_burnFrom", line 1548:29 
E              1547     self.total_supply -= _burn_amount
E         ---> 1548     self.balanceOf[_from] -= _burn_amount
E         ---------------------------------------^
E              1549     log Transfer(_from, empty(address), _burn_amount)
E        <locals: _from=0xc5c523B7740b419a2e1952e84343AE2341088284, _burn_amount=9000002999399999001996339>

tests/pools/liquidity/test_remove_liquidity_imbalance.py:66: BoaError
_ test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-1-1] _
[gw1] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xA55c313490e64AF8b30B9E08BBF5EC3472315cac')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x9F96130D29F6E47395Ba418b9BD591920944a460, compiled with vyper-0.3.10+913...357888190876080966910396447839436093126, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
idx = 1, divisor = 1

    @pytest.mark.parametrize("idx", range(2))
    @pytest.mark.parametrize("divisor", [1, 5, 42])
    def test_lp_token_balance(alice, swap, idx, divisor):
        initial_amount = swap.balanceOf(alice)
        amount = initial_amount // divisor
    
        if divisor == 1:
>           with boa.reverts():

tests/pools/liquidity/test_remove_liquidity_one_coin.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-1-0] _
[gw1] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x7f75dA4e429949538C03E83954c8404BFC319CD7')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x0f04E4e3892723F13d9c8C4490f2a4EcC56246c3, compiled with vyper-0.3.10+913...698170557797019430373771055271204304583, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
idx = 0, divisor = 1

    @pytest.mark.parametrize("idx", range(2))
    @pytest.mark.parametrize("divisor", [1, 5, 42])
    def test_lp_token_balance(alice, swap, idx, divisor):
        initial_amount = swap.balanceOf(alice)
        amount = initial_amount // divisor
    
        if divisor == 1:
>           with boa.reverts():

tests/pools/liquidity/test_remove_liquidity_one_coin.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-1-1] _
[gw1] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xe16004a310A00F160fCB5F7bB7b110B3f4928192')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xAC490041eC4BE4fF7c6dd2383aC4c8423ae451B8, compiled with vyper-0.3.10+913...038452924717957893837145662702972516040, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
idx = 1, divisor = 1

    @pytest.mark.parametrize("idx", range(2))
    @pytest.mark.parametrize("divisor", [1, 5, 42])
    def test_lp_token_balance(alice, swap, idx, divisor):
        initial_amount = swap.balanceOf(alice)
        amount = initial_amount // divisor
    
        if divisor == 1:
>           with boa.reverts():

tests/pools/liquidity/test_remove_liquidity_one_coin.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-1-0] _
[gw1] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xe12e4D4B23B1bA030e0E631243f2d75E25cDdCbF')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x85FfE0D5a788B8a377E228A57F538f0420b1bA5d, compiled with vyper-0.3.10+913...378735291638896357300520270134740727497, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
idx = 0, divisor = 1

    @pytest.mark.parametrize("idx", range(2))
    @pytest.mark.parametrize("divisor", [1, 5, 42])
    def test_lp_token_balance(alice, swap, idx, divisor):
        initial_amount = swap.balanceOf(alice)
        amount = initial_amount // divisor
    
        if divisor == 1:
>           with boa.reverts():

tests/pools/liquidity/test_remove_liquidity_one_coin.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_amount_received[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-0] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x000Ae400731CFA81ed7Cb2ED56A1FFd75cf2A43F')
swap = <contracts/main/CurveStableSwapNG.vy at 0xe25a4EBe76d1486bA28dc35F2a5c752c1842A6ca, compiled with vyper-0.3.10+9136169...719017658559834820763894877566508938954, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xbC4D166121c88465883B09fe05808dc972265251, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0xc0291e52826B1F396203B4a6AA2304dd51CD20a8, compiled with vyper-0.3.10+9136169>
<storage... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
decimals = [18, 18], idx = 0

    @pytest.mark.parametrize("idx", range(2))
    def test_amount_received(alice, swap, pool_type, pool_tokens, underlying_tokens, decimals, idx):
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        initial_amount = coins[idx].balanceOf(alice)
    
        swap.remove_liquidity_one_coin(10**18, idx, 0, sender=alice)
        ideal = 10 ** decimals[idx]
>       assert ideal * 0.99 <= coins[idx].balanceOf(alice) - initial_amount <= ideal
E       AssertionError: assert (1500005499802999667531477 - 1500003000000000000000000) <= 1000000000000000000
E        +  where 1500005499802999667531477 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0x000Ae400731CFA81ed7Cb2ED56A1FFd75cf2A43F'))
E        +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0xbC4D166121c88465883B09fe05808dc972265251, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=6000009000003000000000000, totalShares=5999997000002999997000002, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity_one_coin.py:16: AssertionError
_ test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-1-1] _
[gw1] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x805d899209B3103168055e331Ed7ba0C1b2CaEAD')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x200CD02FFbB3dDdbc109e31a835dF5eD252b1065, compiled with vyper-0.3.10+913...719017658559834820763894877566508938954, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>
idx = 1, divisor = 1

    @pytest.mark.parametrize("idx", range(2))
    @pytest.mark.parametrize("divisor", [1, 5, 42])
    def test_lp_token_balance(alice, swap, idx, divisor):
        initial_amount = swap.balanceOf(alice)
        amount = initial_amount // divisor
    
        if divisor == 1:
>           with boa.reverts():

tests/pools/liquidity/test_remove_liquidity_one_coin.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_amount_received[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-1] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x1c4E3a9b24F8F84bEE0a87c1C8726882063533C0')
swap = <contracts/main/CurveStableSwapNG.vy at 0x261b4C622409a51758A82516502b4e9cFdAc3790, compiled with vyper-0.3.10+9136169...719017658559834820763894877566508938954, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x3dE049501898A968A14A0cbe69854532709eA94a, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0xDd558266Ad04AEb30B919A3caa2F38FCE1A779fB, compiled with vyper-0.3.10+9136169>
<storage... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
decimals = [18, 18], idx = 1

    @pytest.mark.parametrize("idx", range(2))
    def test_amount_received(alice, swap, pool_type, pool_tokens, underlying_tokens, decimals, idx):
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        initial_amount = coins[idx].balanceOf(alice)
    
        swap.remove_liquidity_one_coin(10**18, idx, 0, sender=alice)
        ideal = 10 ** decimals[idx]
>       assert ideal * 0.99 <= coins[idx].balanceOf(alice) - initial_amount <= ideal
E       AssertionError: assert (1500005499802999667531477 - 1500003000000000000000000) <= 1000000000000000000
E        +  where 1500005499802999667531477 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0x1c4E3a9b24F8F84bEE0a87c1C8726882063533C0'))
E        +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0x8F0FC7bfe38F253b1bB5DBae0900849332F0B859, compiled with vyper-0.3.10+9136169>\n<...KN1, decimals=18, allowances={}, totalCoin=6000009000003000000000000, totalShares=5999997000002999997000002, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity_one_coin.py:16: AssertionError
_ test_amount_received[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-0] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x3f779ebd90934Dc80d2699D4957263bFDB2F4f71')
swap = <contracts/main/CurveStableSwapNG.vy at 0x31Ed2405C14d69b68fDA5076006C6011Bd732695, compiled with vyper-0.3.10+9136169...719017658559834820763894877566508938954, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x1f8F0c26532Bc1D8e89ffC1119B7865e7A20ecBE, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x9F1098D8E599606e7bAD5849b0fb0Ec8dc99C587, compiled with vyper-0.3.10+9136169>
<s... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
decimals = [18, 18], idx = 0

    @pytest.mark.parametrize("idx", range(2))
    def test_amount_received(alice, swap, pool_type, pool_tokens, underlying_tokens, decimals, idx):
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        initial_amount = coins[idx].balanceOf(alice)
    
        swap.remove_liquidity_one_coin(10**18, idx, 0, sender=alice)
        ideal = 10 ** decimals[idx]
>       assert ideal * 0.99 <= coins[idx].balanceOf(alice) - initial_amount <= ideal
E       AssertionError: assert (1500005499802999667531477 - 1500003000000000000000000) <= 1000000000000000000
E        +  where 1500005499802999667531477 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0x3f779ebd90934Dc80d2699D4957263bFDB2F4f71'))
E        +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0x1f8F0c26532Bc1D8e89ffC1119B7865e7A20ecBE, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=6000009000003000000000000, totalShares=5999997000002999997000002, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity_one_coin.py:16: AssertionError
_ test_amount_received[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-1] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x0D350E6D4DCBDCD8Fa0F6618dF012cE68f3368Cd')
swap = <contracts/main/CurveStableSwapNG.vy at 0x3Cb96d62FA499808a90f27cDce57Bf8DC175F5cc, compiled with vyper-0.3.10+9136169...719017658559834820763894877566508938954, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x69E59D2Ff5d17AbF0760189DEC62187A7EdbF8eC, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0xc12a06c25C95E893BF8dCCeBce59e91693456ab9, compiled with vyper-0.3.10+9136169>
<s... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
decimals = [18, 18], idx = 1

    @pytest.mark.parametrize("idx", range(2))
    def test_amount_received(alice, swap, pool_type, pool_tokens, underlying_tokens, decimals, idx):
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        initial_amount = coins[idx].balanceOf(alice)
    
        swap.remove_liquidity_one_coin(10**18, idx, 0, sender=alice)
        ideal = 10 ** decimals[idx]
>       assert ideal * 0.99 <= coins[idx].balanceOf(alice) - initial_amount <= ideal
E       AssertionError: assert (1500005499802999667531477 - 1500003000000000000000000) <= 1000000000000000000
E        +  where 1500005499802999667531477 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0x0D350E6D4DCBDCD8Fa0F6618dF012cE68f3368Cd'))
E        +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0x50aC9b764EB07BbD6090946F9063C49850C4DBE8, compiled with vyper-0.3.10+9136169>\n<...KN1, decimals=18, allowances={}, totalCoin=6000009000003000000000000, totalShares=5999997000002999997000002, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity_one_coin.py:16: AssertionError
_ test_amount_received[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xa9074d034aF650A77403C1FdE45248683E807941')
swap = <contracts/main/CurveStableSwapNG.vy at 0x81b99C96D11A59222EBc7260d307E5Ff930f2796, compiled with vyper-0.3.10+9136169...719017658559834820763894877566508938954, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xB4B825AC1Cf3C4A99E82E7AD84cD5D6Aefc5ea56, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xB4B825AC1Cf3C4A99E82E7AD84cD5D6Aefc5ea56, compiled with vyper-0.3.10+9136169>
... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
decimals = [18, 18], idx = 0

    @pytest.mark.parametrize("idx", range(2))
    def test_amount_received(alice, swap, pool_type, pool_tokens, underlying_tokens, decimals, idx):
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        initial_amount = coins[idx].balanceOf(alice)
    
        swap.remove_liquidity_one_coin(10**18, idx, 0, sender=alice)
        ideal = 10 ** decimals[idx]
>       assert ideal * 0.99 <= coins[idx].balanceOf(alice) - initial_amount <= ideal
E       AssertionError: assert (1500005499802999667531477 - 1500003000000000000000000) <= 1000000000000000000
E        +  where 1500005499802999667531477 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0xa9074d034aF650A77403C1FdE45248683E807941'))
E        +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0xB4B825AC1Cf3C4A99E82E7AD84cD5D6Aefc5ea56, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=6000009000003000000000000, totalShares=5999997000002999997000002, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity_one_coin.py:16: AssertionError
_ test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)-1-0] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x48b7e84F70e3704A072E9AB662cbcA27fa000F37')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x966f7dE516b9cddE152EE15d286548a7Ec62988E, compiled with vyper-0.3.10+913...719017658559834820763894877566508938954, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
idx = 0, divisor = 1

    @pytest.mark.parametrize("idx", range(2))
    @pytest.mark.parametrize("divisor", [1, 5, 42])
    def test_lp_token_balance(alice, swap, idx, divisor):
        initial_amount = swap.balanceOf(alice)
        amount = initial_amount // divisor
    
        if divisor == 1:
>           with boa.reverts():

tests/pools/liquidity/test_remove_liquidity_one_coin.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_amount_received[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-1] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xec94E667c6d2491Ca95Df9D5514bB7ad343Ed05a')
swap = <contracts/main/CurveStableSwapNG.vy at 0xde2f1dF09F7f308a017139978115859e24808708, compiled with vyper-0.3.10+9136169...059300025480773284227269484998277150411, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xc2D79532A19E09Ece83AC6f626C3BF7e6384F913, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xc2D79532A19E09Ece83AC6f626C3BF7e6384F913, compiled with vyper-0.3.10+9136169>
... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
decimals = [18, 18], idx = 1

    @pytest.mark.parametrize("idx", range(2))
    def test_amount_received(alice, swap, pool_type, pool_tokens, underlying_tokens, decimals, idx):
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        initial_amount = coins[idx].balanceOf(alice)
    
        swap.remove_liquidity_one_coin(10**18, idx, 0, sender=alice)
        ideal = 10 ** decimals[idx]
>       assert ideal * 0.99 <= coins[idx].balanceOf(alice) - initial_amount <= ideal
E       AssertionError: assert (1500005499802999667531477 - 1500003000000000000000000) <= 1000000000000000000
E        +  where 1500005499802999667531477 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0xec94E667c6d2491Ca95Df9D5514bB7ad343Ed05a'))
E        +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0xBE58fDff4fF793cBe6066BDfA90796C425658536, compiled with vyper-0.3.10+9136169>\n<...KN1, decimals=18, allowances={}, totalCoin=6000009000003000000000000, totalShares=5999997000002999997000002, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity_one_coin.py:16: AssertionError
_ test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)-1-1] _
[gw7] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x09ebFa08Bd1434c56eaF583B224Be9D140FE67Dc')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x6a2Ef3F52e2Ad899Eb646E9CCC6Af9a07E5372A0, compiled with vyper-0.3.10+913...059300025480773284227269484998277150411, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>
idx = 1, divisor = 1

    @pytest.mark.parametrize("idx", range(2))
    @pytest.mark.parametrize("divisor", [1, 5, 42])
    def test_lp_token_balance(alice, swap, idx, divisor):
        initial_amount = swap.balanceOf(alice)
        amount = initial_amount // divisor
    
        if divisor == 1:
>           with boa.reverts():

tests/pools/liquidity/test_remove_liquidity_one_coin.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-1-0] _
[gw1] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xcB05F675042727fFd79c545c01895152FB102DE0')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x17dDE66AE38E974b8796092161a48F82DD244987, compiled with vyper-0.3.10+913...059300025480773284227269484998277150411, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
idx = 0, divisor = 1

    @pytest.mark.parametrize("idx", range(2))
    @pytest.mark.parametrize("divisor", [1, 5, 42])
    def test_lp_token_balance(alice, swap, idx, divisor):
        initial_amount = swap.balanceOf(alice)
        amount = initial_amount // divisor
    
        if divisor == 1:
>           with boa.reverts():

tests/pools/liquidity/test_remove_liquidity_one_coin.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-1-1] _
[gw1] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x2A07fE6df81c86Fa57bA199c1dE7Ab282eC022AD')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x5a60b023F969294f02F9ed9Ba46D2472d31f72cA, compiled with vyper-0.3.10+913...399582392401711747690644092430045361868, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
idx = 1, divisor = 1

    @pytest.mark.parametrize("idx", range(2))
    @pytest.mark.parametrize("divisor", [1, 5, 42])
    def test_lp_token_balance(alice, swap, idx, divisor):
        initial_amount = swap.balanceOf(alice)
        amount = initial_amount // divisor
    
        if divisor == 1:
>           with boa.reverts():

tests/pools/liquidity/test_remove_liquidity_one_coin.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_insufficient_balance[(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x87ab9dDfa849250188846e5619746cE65e6628bc')
meta_swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x0a3eb8A58b8A09cD222aeA25a275d56Aff29FdF2, compiled with vyper-0.3.10+913...739864759322650211154018699861813573325, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xF9164079921E71Ff70F4F3c6a0dFe3DF11fcd1D2, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
meta_decimals = 18, base_pool_decimals = [18, 18, 18], sending = 0
receiving = 1, zero_address = '0x0000000000000000000000000000000000000000'

    @pytest.mark.parametrize("sending,receiving", permutations)
    def test_insufficient_balance(
        bob, meta_swap, underlying_tokens, meta_decimals, base_pool_decimals, sending, receiving, zero_address
    ):
        underlying_decimals = [meta_decimals] + base_pool_decimals
        underlying_tokens = [underlying_tokens[0], *underlying_tokens[2:]]
        amount = 10 ** underlying_decimals[sending]
        underlying_tokens[sending]._mint_for_testing(bob, amount, sender=bob)
        underlying_tokens[sending].transfer(zero_address, underlying_tokens[sending].balanceOf(bob), sender=bob)
    
        underlying_tokens[sending]._mint_for_testing(bob, amount, sender=bob)
>       with boa.reverts():

tests/pools/meta/test_exchange_underlying_reverts.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_insufficient_balance[(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-2] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x01124Fe57fF8A8ad7d6cD944dbB250851D1Be5f4')
meta_swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xE39a007860aE0a194c357863438c6821F0dC00F2, compiled with vyper-0.3.10+913...739864759322650211154018699861813573325, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xe6201716B88c6f8f39D1A5776EdBCC35C2E11Df6, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
meta_decimals = 18, base_pool_decimals = [18, 18, 18], sending = 0
receiving = 2, zero_address = '0x0000000000000000000000000000000000000000'

    @pytest.mark.parametrize("sending,receiving", permutations)
    def test_insufficient_balance(
        bob, meta_swap, underlying_tokens, meta_decimals, base_pool_decimals, sending, receiving, zero_address
    ):
        underlying_decimals = [meta_decimals] + base_pool_decimals
        underlying_tokens = [underlying_tokens[0], *underlying_tokens[2:]]
        amount = 10 ** underlying_decimals[sending]
        underlying_tokens[sending]._mint_for_testing(bob, amount, sender=bob)
        underlying_tokens[sending].transfer(zero_address, underlying_tokens[sending].balanceOf(bob), sender=bob)
    
        underlying_tokens[sending]._mint_for_testing(bob, amount, sender=bob)
>       with boa.reverts():

tests/pools/meta/test_exchange_underlying_reverts.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_get_dx_underlying[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw8] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

meta_swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x9D7001507f1C95B7B1Df27384a3b18b7625C449b, compiled with vyper-0.3.10+913..., ma_last_time=586759676656476356271388649593523410680595035841, balanceOf={}, allowance={}, total_supply=0, nonces={}>
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x02D01fB743bA8ea9C02447d857B777Dc6b1f3aE3, compiled with vyper-0.3.10+...bF692C10Db0870C10A9677D0C314950, fee_receiver=0x1F58f966C67757003DFa834baE8639d439D093DF, markets={}, market_counts={}>
initial_setup = None

    @given(
>       amount_in=strategy("decimal", min_value=0.001, max_value=10**6),
        i=strategy("uint", min_value=0, max_value=4),
        j=strategy("uint", min_value=0, max_value=4),
    )

tests/pools/general/test_swap_getters.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/test/plugin.py:23: in f
    t(*args, **kwargs)
tests/pools/general/test_swap_getters.py:50: in test_get_dx_underlying
    expected_out = meta_swap.get_dy_underlying(i, j, _amount_in)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

i = 0, j = 1, amount_in = Decimal('0.0010000000')
meta_swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x9D7001507f1C95B7B1Df27384a3b18b7625C449b, compiled with vyper-0.3.10+913..., ma_last_time=586759676656476356271388649593523410680595035841, balanceOf={}, allowance={}, total_supply=0, nonces={}>
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x02D01fB743bA8ea9C02447d857B777Dc6b1f3aE3, compiled with vyper-0.3.10+...bF692C10Db0870C10A9677D0C314950, fee_receiver=0x1F58f966C67757003DFa834baE8639d439D093DF, markets={}, market_counts={}>
initial_setup = None

    @given(
        amount_in=strategy("decimal", min_value=0.001, max_value=10**6),
        i=strategy("uint", min_value=0, max_value=4),
        j=strategy("uint", min_value=0, max_value=4),
    )
    @settings(**SETTINGS)
    def test_get_dx_underlying(i, j, amount_in, meta_swap, factory, initial_setup):
        base_n_coins = meta_swap.BASE_N_COINS()
    
        if i == j:
            return
    
        # cap max index to base_n_coins + 1 (metapool coin) excluding LP token
        if max(i, j) >= base_n_coins + 1:
            return
    
        if min(i, j) > 0:  # base pool swap: it reverts in view contract
            return
    
        _token_i_precision = 10 ** factory.get_underlying_decimals(meta_swap)[i]
        _amount_in = int(amount_in * _token_i_precision)
>       expected_out = meta_swap.get_dy_underlying(i, j, _amount_in)
E       boa.contracts.base_evm_contract.BoaError: Revert(b'')
E       
E       <contracts/mocks/CurvePool.vy at 0xC44d9AF6ed5b30472305b23E2e38C031E21AcC2A, compiled with vyper-0.3.10+9136169>
E       <storage: coins=['0x0389445EEf9E6Ab65c523D91e9A612a41BBB37A0', '0x1bDAB207fB97E7A8d410eea7631a2b5Edb88eA1C', '0xd743A005cB13DB2d19C35298FfeFb205BD47ddB8'], balances=[0, 0, 0], fee=3000000, admin_fee=5000000000, owner=0x87BB2f9Fd0eF49B4aD1eCA63DBad9868F69f1Ccd, lp_token=0x3bd3891a4cF7718E63466A7cA8b06Ac2d72c9Ab2, initial_A=20000, future_A=20000, initial_A_time=0, future_A_time=0, admin_actions_deadline=0, transfer_ownership_deadline=0, future_fee=0, future_admin_fee=0, future_owner=0x0000000000000000000000000000000000000000, is_killed=False, kill_deadline=1729515713>
E        <compiler: clamp gt 0>
E         contract "contracts/mocks/CurvePool.vy:262", function "get_virtual_price", line 262:27 
E              261     token_supply: uint256 = ERC20(self.lp_token).totalSupply()
E         ---> 262     return D * PRECISION / token_supply
E         ------------------------------------^
E              263
E        <locals: D=0, token_supply=0>
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0x9D7001507f1C95B7B1Df27384a3b18b7625C449b, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[0, 0], fee=1000000, offpeg_fee_multiplier=20000000000, initial_A=200000, future_A=200000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=0, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759676656476356271388649593523410680595035841, balanceOf={}, allowance={}, total_supply=0, nonces={}>
E        <compiler: external call failed>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:535", function "_stored_rates", line 535:48 
E              534     """
E         ---> 535     rates: uint256[N_COINS] = [rate_multiplier, StableSwap(BASE_POOL).get_virtual_price()]
E         ---------------------------------------------------------^
E              536
E        <locals: rates=[1000000000000000000, 0]>
E       
E       <contracts/main/CurveStableSwapNGViews.vy at 0xad7700058bF692C10Db0870C10A9677D0C314950, compiled with vyper-0.3.10+9136169>
E        <compiler: external call failed>
E         contract "contracts/main/CurveStableSwapNGViews.vy:696", function "_get_rates_balances_xp", line 696:42 
E              695
E         ---> 696     rates: DynArray[uint256, MAX_COINS] = StableSwapNG(pool).stored_rates()
E         ---------------------------------------------------^
E              697     balances: DynArray[uint256, MAX_COINS] = StableSwapNG(pool).get_balances()
E        <locals: pool=0x9D7001507f1C95B7B1Df27384a3b18b7625C449b, N_COINS=2, rates=[], balances=[0, 0, 0, 0, 0, 0, 0, 0], xp=[]>
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0x9D7001507f1C95B7B1Df27384a3b18b7625C449b, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[0, 0], fee=1000000, offpeg_fee_multiplier=20000000000, initial_A=200000, future_A=200000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=0, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759676656476356271388649593523410680595035841, balanceOf={}, allowance={}, total_supply=0, nonces={}>
E        <compiler: external call failed>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:1719", function "get_dy_underlying", line 1719:11 
E              1718     """
E         ---> 1719     return StableSwapViews(factory.views_implementation()).get_dy_underlying(i, j, dx, self)
E         ---------------------^
E              1720
E        <locals: i=0, j=1>
E       Falsifying example: f(
E           meta_swap=<contracts/main/CurveStableSwapMetaNG.vy at 0x9D7001507f1C95B7B1Df27384a3b18b7625C449b, compiled with vyper-0.3.10+9136169>
E           <storage: stored_balances=[0, 0], fee=1000000, offpeg_fee_multiplier=20000000000, initial_A=200000, future_A=200000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=0, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759676656476356271388649593523410680595035841, balanceOf={}, allowance={}, total_supply=0, nonces={}>,
E           factory=<contracts/main/CurveStableSwapFactoryNG.vy at 0x02D01fB743bA8ea9C02447d857B777Dc6b1f3aE3, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x87BB2f9Fd0eF49B4aD1eCA63DBad9868F69f1Ccd, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=2, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xA20A146132806eCb18a4Bf7C43745a6c7424F786, gauge_implementation=0x86eA1c4cd31fddd91c15e0F039c591CeFED8668e, views_implementation=0xad7700058bF692C10Db0870C10A9677D0C314950, fee_receiver=0x1F58f966C67757003DFa834baE8639d439D093DF, markets={}, market_counts={}>,
E           initial_setup=None,
E           amount_in=int_to_decimal(10000000),  # or any other generated value
E           i=0,
E           j=1,
E       )
E       Explanation:
E           These lines were always and only run by failing examples:
E               /Users/michael/Documents/projects/stableswap-ng/tests/pools/general/test_swap_getters.py:48
E               /Users/michael/Documents/projects/stableswap-ng/tests/pools/general/test_swap_getters.py:49
E               /Users/michael/pyEnv/crv/lib/python3.12/site-packages/Crypto/Util/_raw_api.py:285
E               /Users/michael/pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:40
E               /Users/michael/pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:74
E               (and 137 more with settings.verbosity >= verbose)

tests/pools/general/test_swap_getters.py:50: BoaError
_ test_insufficient_balance[(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-3] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x4365236c546C3aFb267D603408Dc4a409DcbF4B2')
meta_swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x2c0197cC789700AB2470Cf5f0C91b8955FCfBd05, compiled with vyper-0.3.10+913...080147126243588674617393307293581784782, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x790de5365887E955d88cF109aec60973d751Ff73, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
meta_decimals = 18, base_pool_decimals = [18, 18, 18], sending = 0
receiving = 3, zero_address = '0x0000000000000000000000000000000000000000'

    @pytest.mark.parametrize("sending,receiving", permutations)
    def test_insufficient_balance(
        bob, meta_swap, underlying_tokens, meta_decimals, base_pool_decimals, sending, receiving, zero_address
    ):
        underlying_decimals = [meta_decimals] + base_pool_decimals
        underlying_tokens = [underlying_tokens[0], *underlying_tokens[2:]]
        amount = 10 ** underlying_decimals[sending]
        underlying_tokens[sending]._mint_for_testing(bob, amount, sender=bob)
        underlying_tokens[sending].transfer(zero_address, underlying_tokens[sending].balanceOf(bob), sender=bob)
    
        underlying_tokens[sending]._mint_for_testing(bob, amount, sender=bob)
>       with boa.reverts():

tests/pools/meta/test_exchange_underlying_reverts.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_expected_vs_actual[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-0] _
[gw1] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xcADa8484678Faeb86dE77B2022D5C2Dfb61e7ebE')
swap = <contracts/main/CurveStableSwapNG.vy at 0xd3C1bD18CCD3B23e29eA0F0174C56cF98C0e401f, compiled with vyper-0.3.10+9136169...080147126243588674617393307293581784782, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x5462E98E189489d12eC6bD6E33788018C6Eff5D3, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0xA070bdf31aab398F4C5224b370a3460841612A57, compiled with vyper-0.3.10+9136169>
<storage... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
idx = 0

    @pytest.mark.parametrize("idx", range(2))
    def test_expected_vs_actual(alice, swap, pool_type, pool_tokens, underlying_tokens, idx):
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        initial_amount = coins[idx].balanceOf(alice)
        amount = swap.balanceOf(alice) // 10
    
        expected = swap.calc_withdraw_one_coin(amount, idx)
        swap.remove_liquidity_one_coin(amount, idx, 0, sender=alice)
>       assert coins[idx].balanceOf(alice) == expected + initial_amount
E       AssertionError: assert 1799910826283362592710864 == (299906326280362592710865 + 1500003000000000000000000)
E        +  where 1799910826283362592710864 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0xcADa8484678Faeb86dE77B2022D5C2Dfb61e7ebE'))
E        +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0x5462E98E189489d12eC6bD6E33788018C6Eff5D3, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=6000009000003000000000000, totalShares=5999997000002999997000002, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity_one_coin.py:42: AssertionError
_ test_expected_vs_actual[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-1] _
[gw1] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x6e9296dd55f550d9E1305a72F53FA51A8941eC71')
swap = <contracts/main/CurveStableSwapNG.vy at 0x48E463aDaa7D9298C97D5D1ca36B670ab7Dc3b9D, compiled with vyper-0.3.10+9136169...420429493164527138080767914725349996239, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x6aa0CE0cEFA2Cd336aBA9Dba1517bA42E09D00b3, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20.vy at 0xf80d1B9147E3c1e23B27868233df41e91DD6cba7, compiled with vyper-0.3.10+9136169>
<storage... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
idx = 1

    @pytest.mark.parametrize("idx", range(2))
    def test_expected_vs_actual(alice, swap, pool_type, pool_tokens, underlying_tokens, idx):
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        initial_amount = coins[idx].balanceOf(alice)
        amount = swap.balanceOf(alice) // 10
    
        expected = swap.calc_withdraw_one_coin(amount, idx)
        swap.remove_liquidity_one_coin(amount, idx, 0, sender=alice)
>       assert coins[idx].balanceOf(alice) == expected + initial_amount
E       AssertionError: assert 1799910826283362592710864 == (299906326280362592710865 + 1500003000000000000000000)
E        +  where 1799910826283362592710864 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0x6e9296dd55f550d9E1305a72F53FA51A8941eC71'))
E        +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0x99DE3a584d7247b94f2750c806CDd93af9E627B7, compiled with vyper-0.3.10+9136169>\n<...KN1, decimals=18, allowances={}, totalCoin=6000009000003000000000000, totalShares=5999997000002999997000002, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity_one_coin.py:42: AssertionError
_ test_expected_vs_actual[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-0] _
[gw1] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x2753D64BF2DDEcC7a137bFe1EcF7e6E970E0D6FC')
swap = <contracts/main/CurveStableSwapNG.vy at 0xe569E15DD9E75f48b06f6A05A33329c3d7c6fCB7, compiled with vyper-0.3.10+9136169...420429493164527138080767914725349996239, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x9448fE8D0171B61cE06553aD86238c884866C7C3, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x1291A2696C5A6cBbe2a738A3fCF18621f70E7DEE, compiled with vyper-0.3.10+9136169>
<s... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
idx = 0

    @pytest.mark.parametrize("idx", range(2))
    def test_expected_vs_actual(alice, swap, pool_type, pool_tokens, underlying_tokens, idx):
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        initial_amount = coins[idx].balanceOf(alice)
        amount = swap.balanceOf(alice) // 10
    
        expected = swap.calc_withdraw_one_coin(amount, idx)
        swap.remove_liquidity_one_coin(amount, idx, 0, sender=alice)
>       assert coins[idx].balanceOf(alice) == expected + initial_amount
E       AssertionError: assert 1799910826283362592710864 == (299906326280362592710865 + 1500003000000000000000000)
E        +  where 1799910826283362592710864 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0x2753D64BF2DDEcC7a137bFe1EcF7e6E970E0D6FC'))
E        +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0x9448fE8D0171B61cE06553aD86238c884866C7C3, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=6000009000003000000000000, totalShares=5999997000002999997000002, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity_one_coin.py:42: AssertionError
_ test_expected_vs_actual[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-1] _
[gw1] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xC5ae41CF74b25e9a256B23052c99321a28BafeB2')
swap = <contracts/main/CurveStableSwapNG.vy at 0xb07777E486a3b83356aBd3aC38ec20A7a2B45243, compiled with vyper-0.3.10+9136169...420429493164527138080767914725349996239, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xc1B161c2fec035280ea6AA48870E772bC3f59bf9, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x6512cdD554Bb2C2ADf9485989fF841C066865DB0, compiled with vyper-0.3.10+9136169>
<s... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
idx = 1

    @pytest.mark.parametrize("idx", range(2))
    def test_expected_vs_actual(alice, swap, pool_type, pool_tokens, underlying_tokens, idx):
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        initial_amount = coins[idx].balanceOf(alice)
        amount = swap.balanceOf(alice) // 10
    
        expected = swap.calc_withdraw_one_coin(amount, idx)
        swap.remove_liquidity_one_coin(amount, idx, 0, sender=alice)
>       assert coins[idx].balanceOf(alice) == expected + initial_amount
E       AssertionError: assert 1799910826283362592710864 == (299906326280362592710865 + 1500003000000000000000000)
E        +  where 1799910826283362592710864 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0xC5ae41CF74b25e9a256B23052c99321a28BafeB2'))
E        +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0x7997D8aDB13DcE5E4852F342261D9EbC16fc9d87, compiled with vyper-0.3.10+9136169>\n<...KN1, decimals=18, allowances={}, totalCoin=6000009000003000000000000, totalShares=5999997000002999997000002, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity_one_coin.py:42: AssertionError
_ test_expected_vs_actual[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0] _
[gw1] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xDAaA6d1A45cA28AddA398Cc632041ADeBF128Cc8')
swap = <contracts/main/CurveStableSwapNG.vy at 0x8CE777D108d516dfd9370bb6c1aF7cE3cCaAC940, compiled with vyper-0.3.10+9136169...420429493164527138080767914725349996239, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xbF98e923aEFdd8EE48596Ad1D080F36030e4306e, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xbF98e923aEFdd8EE48596Ad1D080F36030e4306e, compiled with vyper-0.3.10+9136169>
... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
idx = 0

    @pytest.mark.parametrize("idx", range(2))
    def test_expected_vs_actual(alice, swap, pool_type, pool_tokens, underlying_tokens, idx):
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        initial_amount = coins[idx].balanceOf(alice)
        amount = swap.balanceOf(alice) // 10
    
        expected = swap.calc_withdraw_one_coin(amount, idx)
        swap.remove_liquidity_one_coin(amount, idx, 0, sender=alice)
>       assert coins[idx].balanceOf(alice) == expected + initial_amount
E       AssertionError: assert 1799910826283362592710864 == (299906326280362592710865 + 1500003000000000000000000)
E        +  where 1799910826283362592710864 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0xDAaA6d1A45cA28AddA398Cc632041ADeBF128Cc8'))
E        +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0xbF98e923aEFdd8EE48596Ad1D080F36030e4306e, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=6000009000003000000000000, totalShares=5999997000002999997000002, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity_one_coin.py:42: AssertionError
_ test_expected_vs_actual[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-1] _
[gw1] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x0474CABCEA67C50eD349Ad9Eb9B07Ce0C660dF85')
swap = <contracts/main/CurveStableSwapNG.vy at 0xDA9Dc557cFfeF81B8410679E35Dd31B54beE6303, compiled with vyper-0.3.10+9136169...760711860085465601544142522157118207696, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
pool_type = 0
pool_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x5902EA3E00d99284936B7a71382dfB776660Edb1, compiled with vyper-0.3.10+9136169>
...N1, decimals=18, allowances={}, totalCoin=6000003000000000000000000, totalShares=5999997000002999997000002, shares={}>]
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x5902EA3E00d99284936B7a71382dfB776660Edb1, compiled with vyper-0.3.10+9136169>
... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
idx = 1

    @pytest.mark.parametrize("idx", range(2))
    def test_expected_vs_actual(alice, swap, pool_type, pool_tokens, underlying_tokens, idx):
        coins = pool_tokens if pool_type == 0 else underlying_tokens[:2]
        initial_amount = coins[idx].balanceOf(alice)
        amount = swap.balanceOf(alice) // 10
    
        expected = swap.calc_withdraw_one_coin(amount, idx)
        swap.remove_liquidity_one_coin(amount, idx, 0, sender=alice)
>       assert coins[idx].balanceOf(alice) == expected + initial_amount
E       AssertionError: assert 1799910826283362592710864 == (299906326280362592710865 + 1500003000000000000000000)
E        +  where 1799910826283362592710864 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0x0474CABCEA67C50eD349Ad9Eb9B07Ce0C660dF85'))
E        +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0x1AC1187CADEe8cECfaAEC53339aA37516224cB19, compiled with vyper-0.3.10+9136169>\n<...KN1, decimals=18, allowances={}, totalCoin=6000009000003000000000000, totalShares=5999997000002999997000002, shares={}>.balanceOf

tests/pools/liquidity/test_remove_liquidity_one_coin.py:42: AssertionError
_ test_insufficient_balance[(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xEfA247D99A4fD16Af3f8a9429bB3fe92a270A399')
meta_swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x8fA38e4A2850aA02af166Bb2ED60956B44b44b36, compiled with vyper-0.3.10+913...100994227006404065007517129588886419153, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xBA2cB866660Be18Fc8e8981760A7EcEFb7EF8A7C, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
meta_decimals = 18, base_pool_decimals = [18, 18, 18], sending = 0
receiving = 1, zero_address = '0x0000000000000000000000000000000000000000'

    @pytest.mark.parametrize("sending,receiving", permutations)
    def test_insufficient_balance(
        bob, meta_swap, underlying_tokens, meta_decimals, base_pool_decimals, sending, receiving, zero_address
    ):
        underlying_decimals = [meta_decimals] + base_pool_decimals
        underlying_tokens = [underlying_tokens[0], *underlying_tokens[2:]]
        amount = 10 ** underlying_decimals[sending]
        underlying_tokens[sending]._mint_for_testing(bob, amount, sender=bob)
        underlying_tokens[sending].transfer(zero_address, underlying_tokens[sending].balanceOf(bob), sender=bob)
    
        underlying_tokens[sending]._mint_for_testing(bob, amount, sender=bob)
>       with boa.reverts():

tests/pools/meta/test_exchange_underlying_reverts.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_insufficient_balance[(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-2] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xE218982ac5195Ea61DbCa495fBCeaf4Deb412b08')
meta_swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x17dDE66AE38E974b8796092161a48F82DD244987, compiled with vyper-0.3.10+913...100994227006404065007517129588886419153, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xF3b5AFeb672c224A2fF0A0a9f60bD09dFaE733AE, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
meta_decimals = 18, base_pool_decimals = [18, 18, 18], sending = 0
receiving = 2, zero_address = '0x0000000000000000000000000000000000000000'

    @pytest.mark.parametrize("sending,receiving", permutations)
    def test_insufficient_balance(
        bob, meta_swap, underlying_tokens, meta_decimals, base_pool_decimals, sending, receiving, zero_address
    ):
        underlying_decimals = [meta_decimals] + base_pool_decimals
        underlying_tokens = [underlying_tokens[0], *underlying_tokens[2:]]
        amount = 10 ** underlying_decimals[sending]
        underlying_tokens[sending]._mint_for_testing(bob, amount, sender=bob)
        underlying_tokens[sending].transfer(zero_address, underlying_tokens[sending].balanceOf(bob), sender=bob)
    
        underlying_tokens[sending]._mint_for_testing(bob, amount, sender=bob)
>       with boa.reverts():

tests/pools/meta/test_exchange_underlying_reverts.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_insufficient_balance[(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-3] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x21aeFA439d72C7397193c36894cC8A7aEc816d98')
meta_swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x5a60b023F969294f02F9ed9Ba46D2472d31f72cA, compiled with vyper-0.3.10+913...441276593927342528470891737020654630610, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x1Bb7C765BaA80D346Ce0b44946697a1b7AaE9005, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
meta_decimals = 18, base_pool_decimals = [18, 18, 18], sending = 0
receiving = 3, zero_address = '0x0000000000000000000000000000000000000000'

    @pytest.mark.parametrize("sending,receiving", permutations)
    def test_insufficient_balance(
        bob, meta_swap, underlying_tokens, meta_decimals, base_pool_decimals, sending, receiving, zero_address
    ):
        underlying_decimals = [meta_decimals] + base_pool_decimals
        underlying_tokens = [underlying_tokens[0], *underlying_tokens[2:]]
        amount = 10 ** underlying_decimals[sending]
        underlying_tokens[sending]._mint_for_testing(bob, amount, sender=bob)
        underlying_tokens[sending].transfer(zero_address, underlying_tokens[sending].balanceOf(bob), sender=bob)
    
        underlying_tokens[sending]._mint_for_testing(bob, amount, sender=bob)
>       with boa.reverts():

tests/pools/meta/test_exchange_underlying_reverts.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.4/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:144: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (), kwargs = {}

    @contextlib.contextmanager
    def reverts(*args, **kwargs):
        try:
            yield
>           raise ValueError("Did not revert")
E           ValueError: Did not revert

../../../pyEnv/crv/lib/python3.12/site-packages/boa/__init__.py:76: ValueError
_ test_exchange_underlying[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x9714B05bc70B4aC72988cEA79f3a8b278544D333')
charlie = Address('0x7593fC025CA31D77190935D8cAA2De0A16f06783')
swap = <contracts/main/CurveStableSwapNG.vy at 0xC3647B84C814c0FD01D5c08338992F3F1eE53908, compiled with vyper-0.3.10+9136169...781558960848280991934266344452422842067, balanceOf={}, allowance={}, total_supply=2999999999999999999999999, nonces={}>
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x389C9D2955cB246A6Ec814272830459F5A7868a0, compiled with vyper-0.3.10+9136169>
... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
meta_decimals = 18, base_pool_decimals = [18, 18, 18]

    def test_exchange_underlying(bob, charlie, swap, underlying_tokens, meta_decimals, base_pool_decimals):
        initial_amount = underlying_tokens[0].balanceOf(bob)
    
        amount = 10 ** base_pool_decimals[0]
        underlying_tokens[2]._mint_for_testing(bob, amount)
    
>       swap.exchange_underlying(1, 0, amount, 0, charlie, sender=bob)
E       AttributeError: 'VyperContract' object has no attribute 'exchange_underlying'

tests/pools/meta/test_receiver_meta.py:12: AttributeError
_ test_exchange_underlying[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x5aF7dfadEd68B9D9Df43f0a602df09d579726091')
charlie = Address('0xD00F7ffddaCaEa20ce643eb9B9533f84B0F3076e')
swap = <contracts/main/CurveStableSwapNG.vy at 0x9a7c2cc7C5ab8aCC0c94616CfEaaE2571b30a6fC, compiled with vyper-0.3.10+9136169...121841327769219455397640951884191053524, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
underlying_tokens = [<contracts/mocks/ERC20.vy at 0x21660f740AC9cD6D1d469BDa6C43BF5aDd0C863e, compiled with vyper-0.3.10+9136169>
<storage... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
meta_decimals = 18, base_pool_decimals = [18, 18, 18]

    def test_exchange_underlying(bob, charlie, swap, underlying_tokens, meta_decimals, base_pool_decimals):
        initial_amount = underlying_tokens[0].balanceOf(bob)
    
        amount = 10 ** base_pool_decimals[0]
        underlying_tokens[2]._mint_for_testing(bob, amount)
    
>       swap.exchange_underlying(1, 0, amount, 0, charlie, sender=bob)
E       AttributeError: 'VyperContract' object has no attribute 'exchange_underlying'

tests/pools/meta/test_receiver_meta.py:12: AttributeError
_ test_exchange_underlying[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xbF2f7CcDB7a748CDB8f540f4686FbCC27C005598')
charlie = Address('0x7bF67d49A43074b62D7ebC51dc82870dEc1662E5')
swap = <contracts/main/CurveStableSwapNG.vy at 0x488751E42F1F4588944f556A1c6F58EB0Ef8Cd7D, compiled with vyper-0.3.10+9136169...121841327769219455397640951884191053524, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x978c6e5cdD0180c97d1c775324892B56D68a5f6f, compiled with vyper-0.3.10+9136169>
<s... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
meta_decimals = 18, base_pool_decimals = [18, 18, 18]

    def test_exchange_underlying(bob, charlie, swap, underlying_tokens, meta_decimals, base_pool_decimals):
        initial_amount = underlying_tokens[0].balanceOf(bob)
    
        amount = 10 ** base_pool_decimals[0]
        underlying_tokens[2]._mint_for_testing(bob, amount)
    
>       swap.exchange_underlying(1, 0, amount, 0, charlie, sender=bob)
E       AttributeError: 'VyperContract' object has no attribute 'exchange_underlying'

tests/pools/meta/test_receiver_meta.py:12: AttributeError
_ test_exchange_underlying[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x038896637ef994B1e2a2801Cd19d493f687b1687')
charlie = Address('0x8b2dfe030fd8Df1b6d250d817d328cf86082B004')
swap = <contracts/main/CurveStableSwapNG.vy at 0x9d48E01e080c0A2D0e0654469718E50442598949, compiled with vyper-0.3.10+9136169...121841327769219455397640951884191053524, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x1b301464f02FcD9d04f76D30c9e1AfDaDD61B866, compiled with vyper-0.3.10+9136169>
... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
meta_decimals = 18, base_pool_decimals = [18, 18, 18]

    def test_exchange_underlying(bob, charlie, swap, underlying_tokens, meta_decimals, base_pool_decimals):
        initial_amount = underlying_tokens[0].balanceOf(bob)
    
        amount = 10 ** base_pool_decimals[0]
        underlying_tokens[2]._mint_for_testing(bob, amount)
    
>       swap.exchange_underlying(1, 0, amount, 0, charlie, sender=bob)
E       AttributeError: 'VyperContract' object has no attribute 'exchange_underlying'

tests/pools/meta/test_receiver_meta.py:12: AttributeError
__________________________ test_broken_pool_is_fixed ___________________________
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

forked_chain = None
meta_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x1214889e0>
views_deployer = <boa.contracts.vyper.vyper_contract.VyperDeployer object at 0x112187890>

    def test_broken_pool_is_fixed(forked_chain, meta_deployer, views_deployer):
        BROKEN_SWAP = "0x9e10f9Fb6F0D32B350CEe2618662243d4f24C64a"
        BROKEN_VIEW = "0xe0B15824862f3222fdFeD99FeBD0f7e0EC26E1FA"
    
        # testing fix for the first instance of the error reported
        metapool = meta_deployer.at(BROKEN_SWAP)
        views_deployer.at(BROKEN_VIEW)
>       metapool.get_dy_underlying(1, 0, 50000000)

tests/pools/meta/test_get_dy_underlying_fix.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:751: in marshal_to_python
    ret = abi_decode(return_typ.abi_type.selector_name(), computation.output)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/util/abi.py:86: in abi_decode
    return _ABIDecoder.decode(_get_parser(schema), data)
../../../pyEnv/crv/lib/python3.12/site-packages/eth/codecs/abi/decoder.py:58: in decode
    return node.accept(cls, value, **kwargs)
../../../pyEnv/crv/lib/python3.12/site-packages/eth/codecs/abi/nodes.py:44: in accept
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'boa.util.abi._ABIDecoder'>
node = TupleNode(ctypes=(IntegerNode(bits=256, is_signed=False),)), value = b''
kwargs = {}, size = 32

    @classmethod
    def visit_TupleNode(cls, node: nodes.TupleNode, value: bytes, **kwargs) -> tuple:
        """Decode a tuple.
    
        Parameters:
            node: A tuple ABI type node.
            value: The bytes value to decode.
    
        Returns:
            The decoded tuple.
    
        Raises:
            DecodeError: If the value can't be decoded.
        """
        size = sum((elem.width for elem in node.ctypes))
        # value size should be >= the sum of the length of its components
        if node.is_dynamic and len(value) < size:
            raise DecodeError(str(node), value, "Value length is less than expected")
        elif not node.is_dynamic and len(value) != size:
>           raise DecodeError(
                str(node), value, f"Value length is not the expected size of {size} bytes"
            )
E           eth.codecs.abi.exceptions.DecodeError: Error decoding '0x' as '(uint256)' - Value length is not the expected size of 32 bytes

../../../pyEnv/crv/lib/python3.12/site-packages/eth/codecs/abi/decoder.py:299: DecodeError
_ test_exchange_underlying[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x2A9f98a1f6fea099C3e67841164eB74bF5e108e6')
charlie = Address('0xD33BaF966ABFEe80cCb3B13A5d13264fdf551EeA')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x339312840fe40a6db551C90d6789db905527aD78, compiled with vyper-0.3.10+913...462123694690157918861015559315959264981, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0xd16CD2136d8844483aE6aC86a1E1C9094b3E86a1, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
meta_decimals = 18, base_pool_decimals = [18, 18, 18]

    def test_exchange_underlying(bob, charlie, swap, underlying_tokens, meta_decimals, base_pool_decimals):
        initial_amount = underlying_tokens[0].balanceOf(bob)
    
        amount = 10 ** base_pool_decimals[0]
        underlying_tokens[2]._mint_for_testing(bob, amount)
    
        swap.exchange_underlying(1, 0, amount, 0, charlie, sender=bob)
        assert underlying_tokens[0].balanceOf(charlie) > 0
>       assert underlying_tokens[0].balanceOf(bob) == initial_amount
E       AssertionError: assert 3000002999999999999999999 == 2999999999999999999999999
E        +  where 3000002999999999999999999 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0x2A9f98a1f6fea099C3e67841164eB74bF5e108e6'))
E        +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0xd16CD2136d8844483aE6aC86a1E1C9094b3E86a1, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=9000018000012000003000000, totalShares=8999991000011999985000016, shares={}>.balanceOf

tests/pools/meta/test_receiver_meta.py:14: AssertionError
_ test_exchange_underlying[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xba1b43d5Fa2fC667B5C4A5473bC85Bce3e150E0e')
charlie = Address('0xB0F10DF6c82033fedb64fC310272dEdE42785C9b')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x72d8C7fD2Aebd87618293e3d0F1CB1A1c6eEf6DB, compiled with vyper-0.3.10+913...802406061611096382324390166747727476438, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>
underlying_tokens = [<contracts/mocks/ERC20Rebasing.vy at 0x9e474398557951a6910335BD221258AEe041791a, compiled with vyper-0.3.10+9136169>
...69>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=3000000000000000000000000>]
meta_decimals = 18, base_pool_decimals = [18, 18, 18]

    def test_exchange_underlying(bob, charlie, swap, underlying_tokens, meta_decimals, base_pool_decimals):
        initial_amount = underlying_tokens[0].balanceOf(bob)
    
        amount = 10 ** base_pool_decimals[0]
        underlying_tokens[2]._mint_for_testing(bob, amount)
    
        swap.exchange_underlying(1, 0, amount, 0, charlie, sender=bob)
        assert underlying_tokens[0].balanceOf(charlie) > 0
>       assert underlying_tokens[0].balanceOf(bob) == initial_amount
E       AssertionError: assert 3000002999999999999999999 == 2999999999999999999999999
E        +  where 3000002999999999999999999 = contracts/mocks/ERC20Rebasing.vy.balanceOf(Address('0xba1b43d5Fa2fC667B5C4A5473bC85Bce3e150E0e'))
E        +    where contracts/mocks/ERC20Rebasing.vy.balanceOf = <contracts/mocks/ERC20Rebasing.vy at 0x9e474398557951a6910335BD221258AEe041791a, compiled with vyper-0.3.10+9136169>\n<...KN0, decimals=18, allowances={}, totalCoin=9000018000012000003000000, totalShares=8999991000011999985000016, shares={}>.balanceOf

tests/pools/meta/test_receiver_meta.py:14: AssertionError
_ test_permit[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x16ecdf590>
bob = Address('0x1795D36741c641e94a9Bed5E03c5E9843186aD39')
swap = <contracts/main/CurveStableSwapNG.vy at 0x1d4CdFA493b0127db8C5591627dd015b8642e7d3, compiled with vyper-0.3.10+9136169..., ma_last_time=586759685163535529294850236177888596474800322266, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit(eth_acc, bob, swap):
        value = 2**256 - 1
>       permit = permit_class(swap)(owner=eth_acc.address, spender=bob, value=value, nonce=0)

tests/token/test_token_approve.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x16f9ca240>
bob = Address('0x944a0C67d1E0B30EADd2615ae939DecC1a253705')
swap = <contracts/main/CurveStableSwapNG.vy at 0xc0d3Fded63b4dB8c7f2C90A8FA9EeDce0a04b89A, compiled with vyper-0.3.10+9136169..., ma_last_time=586759685163535529294850236177888596474800322266, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit(eth_acc, bob, swap):
        value = 2**256 - 1
>       permit = permit_class(swap)(owner=eth_acc.address, spender=bob, value=value, nonce=0)

tests/token/test_token_approve.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit_contract[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x30aa2c2f0>
bob = Address('0x80A3f0606549a498F1f455dC84D35216E7C8E8e2')
swap = <contracts/main/CurveStableSwapNG.vy at 0x478Fcd0401980830725D7F341F4798af124d42ab, compiled with vyper-0.3.10+9136169..., ma_last_time=586759685163535529294850236177888596474800322266, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit_contract(eth_acc, bob, swap):
        # based on https://eips.ethereum.org/EIPS/eip-1271
        src = """
            # pragma version 0.3.10
            OWNER: public(immutable(address))
    
            @external
            def __init__():
                OWNER = msg.sender
    
            @view
            @external
            def isValidSignature(_hash: bytes32, _signature: Bytes[65]) -> bytes32:
                signer: address = self._recover_signer(_hash, _signature)
                if signer == OWNER:
                    return 0x1626ba7e00000000000000000000000000000000000000000000000000000000
                return 0xffffffff00000000000000000000000000000000000000000000000000000000
    
            @view
            @internal
            def _recover_signer(_hash: bytes32, _signature: Bytes[65]) -> address:
                v: uint256 = convert(slice(_signature, 64, 1), uint256)
                r: uint256 = convert(slice(_signature, 0, 32), uint256)
                s: uint256 = convert(slice(_signature, 32, 32), uint256)
                return ecrecover(_hash, v, r, s)
        """
        with boa.env.prank(eth_acc.address):
            mock_contract = boa.loads(src)
    
>       permit = permit_class(swap)(owner=mock_contract.address, spender=bob, value=2**256 - 1, nonce=0)

tests/token/test_token_approve.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x178d60ef0>
bob = Address('0xc2Bd592447DA1009c8e8986940bC414eBD701144')
swap = <contracts/main/CurveStableSwapNG.vy at 0x082182e3d6E780aDD7F5f3727eD11e86EA4057AF, compiled with vyper-0.3.10+9136169..., ma_last_time=586759685163535529294850236177888596474800322266, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit(eth_acc, bob, swap):
        value = 2**256 - 1
>       permit = permit_class(swap)(owner=eth_acc.address, spender=bob, value=value, nonce=0)

tests/token/test_token_approve.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit_contract[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x30a5c5730>
bob = Address('0x2284647A152f7DD9DabFDf56E58F5A71619371Dd')
swap = <contracts/main/CurveStableSwapNG.vy at 0x6d8dD626C6d085D85609A5aEA4D5447283d1a847, compiled with vyper-0.3.10+9136169..., ma_last_time=586759685163535529294850236177888596474800322266, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit_contract(eth_acc, bob, swap):
        # based on https://eips.ethereum.org/EIPS/eip-1271
        src = """
            # pragma version 0.3.10
            OWNER: public(immutable(address))
    
            @external
            def __init__():
                OWNER = msg.sender
    
            @view
            @external
            def isValidSignature(_hash: bytes32, _signature: Bytes[65]) -> bytes32:
                signer: address = self._recover_signer(_hash, _signature)
                if signer == OWNER:
                    return 0x1626ba7e00000000000000000000000000000000000000000000000000000000
                return 0xffffffff00000000000000000000000000000000000000000000000000000000
    
            @view
            @internal
            def _recover_signer(_hash: bytes32, _signature: Bytes[65]) -> address:
                v: uint256 = convert(slice(_signature, 64, 1), uint256)
                r: uint256 = convert(slice(_signature, 0, 32), uint256)
                s: uint256 = convert(slice(_signature, 32, 32), uint256)
                return ecrecover(_hash, v, r, s)
        """
        with boa.env.prank(eth_acc.address):
            mock_contract = boa.loads(src)
    
>       permit = permit_class(swap)(owner=mock_contract.address, spender=bob, value=2**256 - 1, nonce=0)

tests/token/test_token_approve.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x178d635f0>
bob = Address('0x184D9f928Cf8C06Ea845905bd1f61C1285050129')
swap = <contracts/main/CurveStableSwapNG.vy at 0xB819C7894eA421228884FC5A305273Cd875bA6Db, compiled with vyper-0.3.10+9136169..., ma_last_time=586759685163535529294850236177888596474800322266, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit(eth_acc, bob, swap):
        value = 2**256 - 1
>       permit = permit_class(swap)(owner=eth_acc.address, spender=bob, value=value, nonce=0)

tests/token/test_token_approve.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit_contract[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x30ad9bc80>
bob = Address('0x6024838110a8635AEF8fd64e68c095ED500B27B5')
swap = <contracts/main/CurveStableSwapNG.vy at 0x295e36C038A94bbF307821311980808b5BcdA119, compiled with vyper-0.3.10+9136169..., ma_last_time=586759685163535529294850236177888596474800322266, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit_contract(eth_acc, bob, swap):
        # based on https://eips.ethereum.org/EIPS/eip-1271
        src = """
            # pragma version 0.3.10
            OWNER: public(immutable(address))
    
            @external
            def __init__():
                OWNER = msg.sender
    
            @view
            @external
            def isValidSignature(_hash: bytes32, _signature: Bytes[65]) -> bytes32:
                signer: address = self._recover_signer(_hash, _signature)
                if signer == OWNER:
                    return 0x1626ba7e00000000000000000000000000000000000000000000000000000000
                return 0xffffffff00000000000000000000000000000000000000000000000000000000
    
            @view
            @internal
            def _recover_signer(_hash: bytes32, _signature: Bytes[65]) -> address:
                v: uint256 = convert(slice(_signature, 64, 1), uint256)
                r: uint256 = convert(slice(_signature, 0, 32), uint256)
                s: uint256 = convert(slice(_signature, 32, 32), uint256)
                return ecrecover(_hash, v, r, s)
        """
        with boa.env.prank(eth_acc.address):
            mock_contract = boa.loads(src)
    
>       permit = permit_class(swap)(owner=mock_contract.address, spender=bob, value=2**256 - 1, nonce=0)

tests/token/test_token_approve.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x16f9caf90>
bob = Address('0x7b53CA1e7C50f7e72147584a4853983b711208F9')
swap = <contracts/main/CurveStableSwapNG.vy at 0xC07b4f5478AEA8120079956F2aA364Eb6E96cfbC, compiled with vyper-0.3.10+9136169..., ma_last_time=586759685163535529294850236177888596474800322266, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit(eth_acc, bob, swap):
        value = 2**256 - 1
>       permit = permit_class(swap)(owner=eth_acc.address, spender=bob, value=value, nonce=0)

tests/token/test_token_approve.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x179299e20>
bob = Address('0x9Bb85835023672B6ec145aCF28c3f4c0a7Dd01A0')
swap = <contracts/main/CurveStableSwapNG.vy at 0x1D22384b81FE0Cc46108409c5a8591d86b8aEa4C, compiled with vyper-0.3.10+9136169..., ma_last_time=586759685163535529294850236177888596474800322266, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit(eth_acc, bob, swap):
        value = 2**256 - 1
>       permit = permit_class(swap)(owner=eth_acc.address, spender=bob, value=value, nonce=0)

tests/token/test_token_approve.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit_contract[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x309b33230>
bob = Address('0x64bD76D6AE684d85A00D3481B20937bf3630e37A')
swap = <contracts/main/CurveStableSwapNG.vy at 0x823820Cb6DBb992bAb9BAA77424ED1f1deCBbBA0, compiled with vyper-0.3.10+9136169..., ma_last_time=586759685163535529294850236177888596474800322266, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit_contract(eth_acc, bob, swap):
        # based on https://eips.ethereum.org/EIPS/eip-1271
        src = """
            # pragma version 0.3.10
            OWNER: public(immutable(address))
    
            @external
            def __init__():
                OWNER = msg.sender
    
            @view
            @external
            def isValidSignature(_hash: bytes32, _signature: Bytes[65]) -> bytes32:
                signer: address = self._recover_signer(_hash, _signature)
                if signer == OWNER:
                    return 0x1626ba7e00000000000000000000000000000000000000000000000000000000
                return 0xffffffff00000000000000000000000000000000000000000000000000000000
    
            @view
            @internal
            def _recover_signer(_hash: bytes32, _signature: Bytes[65]) -> address:
                v: uint256 = convert(slice(_signature, 64, 1), uint256)
                r: uint256 = convert(slice(_signature, 0, 32), uint256)
                s: uint256 = convert(slice(_signature, 32, 32), uint256)
                return ecrecover(_hash, v, r, s)
        """
        with boa.env.prank(eth_acc.address):
            mock_contract = boa.loads(src)
    
>       permit = permit_class(swap)(owner=mock_contract.address, spender=bob, value=2**256 - 1, nonce=0)

tests/token/test_token_approve.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit_contract[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x308071010>
bob = Address('0xfce99A638D387D31eb7B4520Fb72E6B1AD7C0468')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x3E91d5F059D75A59c1c14B6223140190526df18D, compiled with vyper-0.3.10+913..., ma_last_time=586759685163535529294850236177888596474800322266, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit_contract(eth_acc, bob, swap):
        # based on https://eips.ethereum.org/EIPS/eip-1271
        src = """
            # pragma version 0.3.10
            OWNER: public(immutable(address))
    
            @external
            def __init__():
                OWNER = msg.sender
    
            @view
            @external
            def isValidSignature(_hash: bytes32, _signature: Bytes[65]) -> bytes32:
                signer: address = self._recover_signer(_hash, _signature)
                if signer == OWNER:
                    return 0x1626ba7e00000000000000000000000000000000000000000000000000000000
                return 0xffffffff00000000000000000000000000000000000000000000000000000000
    
            @view
            @internal
            def _recover_signer(_hash: bytes32, _signature: Bytes[65]) -> address:
                v: uint256 = convert(slice(_signature, 64, 1), uint256)
                r: uint256 = convert(slice(_signature, 0, 32), uint256)
                s: uint256 = convert(slice(_signature, 32, 32), uint256)
                return ecrecover(_hash, v, r, s)
        """
        with boa.env.prank(eth_acc.address):
            mock_contract = boa.loads(src)
    
>       permit = permit_class(swap)(owner=mock_contract.address, spender=bob, value=2**256 - 1, nonce=0)

tests/token/test_token_approve.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x179522390>
bob = Address('0xF0e59048C960146De360239359fA2C5a8429445B')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xF11eCB98916fC85a0578A1A52c99013A924352CA, compiled with vyper-0.3.10+913..., ma_last_time=586759685163535529294850236177888596474800322266, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit(eth_acc, bob, swap):
        value = 2**256 - 1
>       permit = permit_class(swap)(owner=eth_acc.address, spender=bob, value=value, nonce=0)

tests/token/test_token_approve.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit_contract[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x14b975580>
bob = Address('0xb87854F98Be297e7f012d31ECE559bA0b3E830bF')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x17878080b8c8a70383B00B4188CF84D8552426c6, compiled with vyper-0.3.10+913..., ma_last_time=586759685503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit_contract(eth_acc, bob, swap):
        # based on https://eips.ethereum.org/EIPS/eip-1271
        src = """
            # pragma version 0.3.10
            OWNER: public(immutable(address))
    
            @external
            def __init__():
                OWNER = msg.sender
    
            @view
            @external
            def isValidSignature(_hash: bytes32, _signature: Bytes[65]) -> bytes32:
                signer: address = self._recover_signer(_hash, _signature)
                if signer == OWNER:
                    return 0x1626ba7e00000000000000000000000000000000000000000000000000000000
                return 0xffffffff00000000000000000000000000000000000000000000000000000000
    
            @view
            @internal
            def _recover_signer(_hash: bytes32, _signature: Bytes[65]) -> address:
                v: uint256 = convert(slice(_signature, 64, 1), uint256)
                r: uint256 = convert(slice(_signature, 0, 32), uint256)
                s: uint256 = convert(slice(_signature, 32, 32), uint256)
                return ecrecover(_hash, v, r, s)
        """
        with boa.env.prank(eth_acc.address):
            mock_contract = boa.loads(src)
    
>       permit = permit_class(swap)(owner=mock_contract.address, spender=bob, value=2**256 - 1, nonce=0)

tests/token/test_token_approve.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x179f709b0>
bob = Address('0x870B59431329Ec62d66C6FaEe610B28723e4237b')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xda9aE1ad54ca2217c14C45672a42b1e054Bf3D62, compiled with vyper-0.3.10+913..., ma_last_time=586759685503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit(eth_acc, bob, swap):
        value = 2**256 - 1
>       permit = permit_class(swap)(owner=eth_acc.address, spender=bob, value=value, nonce=0)

tests/token/test_token_approve.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_get_dx_underlying[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw8] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

meta_swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xC583CAcc7b3efc1485f878Bbcf99bb43D1813C2A, compiled with vyper-0.3.10+913..., ma_last_time=586759681080147126243588674617393307293581784782, balanceOf={}, allowance={}, total_supply=0, nonces={}>
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x9Caaf508a0719A50b3Ce1FaA90E3a8884f350e39, compiled with vyper-0.3.10+...3Bc6ce4b7f082E91b56939244E4ba9b, fee_receiver=0x02a3db69FA003C238CE2538EfafC8710d4321741, markets={}, market_counts={}>
initial_setup = None

    @given(
>       amount_in=strategy("decimal", min_value=0.001, max_value=10**6),
        i=strategy("uint", min_value=0, max_value=4),
        j=strategy("uint", min_value=0, max_value=4),
    )

tests/pools/general/test_swap_getters.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/test/plugin.py:23: in f
    t(*args, **kwargs)
tests/pools/general/test_swap_getters.py:50: in test_get_dx_underlying
    expected_out = meta_swap.get_dy_underlying(i, j, _amount_in)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

i = 0, j = 1, amount_in = Decimal('0.0010000000')
meta_swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xC583CAcc7b3efc1485f878Bbcf99bb43D1813C2A, compiled with vyper-0.3.10+913..., ma_last_time=586759681080147126243588674617393307293581784782, balanceOf={}, allowance={}, total_supply=0, nonces={}>
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x9Caaf508a0719A50b3Ce1FaA90E3a8884f350e39, compiled with vyper-0.3.10+...3Bc6ce4b7f082E91b56939244E4ba9b, fee_receiver=0x02a3db69FA003C238CE2538EfafC8710d4321741, markets={}, market_counts={}>
initial_setup = None

    @given(
        amount_in=strategy("decimal", min_value=0.001, max_value=10**6),
        i=strategy("uint", min_value=0, max_value=4),
        j=strategy("uint", min_value=0, max_value=4),
    )
    @settings(**SETTINGS)
    def test_get_dx_underlying(i, j, amount_in, meta_swap, factory, initial_setup):
        base_n_coins = meta_swap.BASE_N_COINS()
    
        if i == j:
            return
    
        # cap max index to base_n_coins + 1 (metapool coin) excluding LP token
        if max(i, j) >= base_n_coins + 1:
            return
    
        if min(i, j) > 0:  # base pool swap: it reverts in view contract
            return
    
        _token_i_precision = 10 ** factory.get_underlying_decimals(meta_swap)[i]
        _amount_in = int(amount_in * _token_i_precision)
>       expected_out = meta_swap.get_dy_underlying(i, j, _amount_in)
E       boa.contracts.base_evm_contract.BoaError: Revert(b'')
E       
E       <contracts/mocks/CurvePool.vy at 0x10d879b7A9d40e49e9AcDc06F292070Eb6A7D2C9, compiled with vyper-0.3.10+9136169>
E       <storage: coins=['0x0B7445894249C5f3A1145f548AA179a39A876b1d', '0x4516b1e29665A03B36A3db380E2f75cf21CE5Ebe', '0x6Fa2b3BeA9A59b84Bd9ab669c97eb845C1F6c2Ad'], balances=[0, 0, 0], fee=3000000, admin_fee=5000000000, owner=0xb5A8f8f07b775ecf2b0D55b657E741c1d3e97e8C, lp_token=0x680E0355c89c5519b4fffe3CA7100B585E6943E0, initial_A=20000, future_A=20000, initial_A_time=0, future_A_time=0, admin_actions_deadline=0, transfer_ownership_deadline=0, future_fee=0, future_admin_fee=0, future_owner=0x0000000000000000000000000000000000000000, is_killed=False, kill_deadline=1729515726>
E        <compiler: clamp gt 0>
E         contract "contracts/mocks/CurvePool.vy:262", function "get_virtual_price", line 262:27 
E              261     token_supply: uint256 = ERC20(self.lp_token).totalSupply()
E         ---> 262     return D * PRECISION / token_supply
E         ------------------------------------^
E              263
E        <locals: D=0, token_supply=0>
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0xC583CAcc7b3efc1485f878Bbcf99bb43D1813C2A, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[0, 0], fee=3000000, offpeg_fee_multiplier=20000000000, initial_A=100000, future_A=100000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=0, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759681080147126243588674617393307293581784782, balanceOf={}, allowance={}, total_supply=0, nonces={}>
E        <compiler: external call failed>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:535", function "_stored_rates", line 535:48 
E              534     """
E         ---> 535     rates: uint256[N_COINS] = [rate_multiplier, StableSwap(BASE_POOL).get_virtual_price()]
E         ---------------------------------------------------------^
E              536
E        <locals: rates=[1000000000000000000, 0]>
E       
E       <contracts/main/CurveStableSwapNGViews.vy at 0x4ae37F3933Bc6ce4b7f082E91b56939244E4ba9b, compiled with vyper-0.3.10+9136169>
E        <compiler: external call failed>
E         contract "contracts/main/CurveStableSwapNGViews.vy:696", function "_get_rates_balances_xp", line 696:42 
E              695
E         ---> 696     rates: DynArray[uint256, MAX_COINS] = StableSwapNG(pool).stored_rates()
E         ---------------------------------------------------^
E              697     balances: DynArray[uint256, MAX_COINS] = StableSwapNG(pool).get_balances()
E        <locals: pool=0xC583CAcc7b3efc1485f878Bbcf99bb43D1813C2A, N_COINS=2, rates=[], balances=[0, 0, 0, 0, 0, 0, 0, 0], xp=[]>
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0xC583CAcc7b3efc1485f878Bbcf99bb43D1813C2A, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[0, 0], fee=3000000, offpeg_fee_multiplier=20000000000, initial_A=100000, future_A=100000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=0, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759681080147126243588674617393307293581784782, balanceOf={}, allowance={}, total_supply=0, nonces={}>
E        <compiler: external call failed>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:1719", function "get_dy_underlying", line 1719:11 
E              1718     """
E         ---> 1719     return StableSwapViews(factory.views_implementation()).get_dy_underlying(i, j, dx, self)
E         ---------------------^
E              1720
E        <locals: i=0, j=1>
E       Falsifying example: f(
E           meta_swap=<contracts/main/CurveStableSwapMetaNG.vy at 0xC583CAcc7b3efc1485f878Bbcf99bb43D1813C2A, compiled with vyper-0.3.10+9136169>
E           <storage: stored_balances=[0, 0], fee=3000000, offpeg_fee_multiplier=20000000000, initial_A=100000, future_A=100000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=0, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759681080147126243588674617393307293581784782, balanceOf={}, allowance={}, total_supply=0, nonces={}>,
E           factory=<contracts/main/CurveStableSwapFactoryNG.vy at 0x9Caaf508a0719A50b3Ce1FaA90E3a8884f350e39, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0xb5A8f8f07b775ecf2b0D55b657E741c1d3e97e8C, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=2, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xf9572ac68cf762cf1157542D2254C99825EF69Ae, gauge_implementation=0x1CF5450114c22A1A7431eb03d15a4A2062BeFCC3, views_implementation=0x4ae37F3933Bc6ce4b7f082E91b56939244E4ba9b, fee_receiver=0x02a3db69FA003C238CE2538EfafC8710d4321741, markets={}, market_counts={}>,
E           initial_setup=None,
E           amount_in=int_to_decimal(10000000),  # or any other generated value
E           i=0,
E           j=1,
E       )
E       Explanation:
E           These lines were always and only run by failing examples:
E               /Users/michael/Documents/projects/stableswap-ng/tests/pools/general/test_swap_getters.py:48
E               /Users/michael/Documents/projects/stableswap-ng/tests/pools/general/test_swap_getters.py:49
E               /Users/michael/pyEnv/crv/lib/python3.12/site-packages/Crypto/Util/_raw_api.py:285
E               /Users/michael/pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:40
E               /Users/michael/pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:74
E               (and 137 more with settings.verbosity >= verbose)

tests/pools/general/test_swap_getters.py:50: BoaError
_ test_permit_contract[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x1497503e0>
bob = Address('0xF78C6F25ddE4396E9506ccF64F3e455dbaf76144')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x643dDB52EeA7778d31cAbeD52C034626FA0cb9a0, compiled with vyper-0.3.10+913..., ma_last_time=586759685503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit_contract(eth_acc, bob, swap):
        # based on https://eips.ethereum.org/EIPS/eip-1271
        src = """
            # pragma version 0.3.10
            OWNER: public(immutable(address))
    
            @external
            def __init__():
                OWNER = msg.sender
    
            @view
            @external
            def isValidSignature(_hash: bytes32, _signature: Bytes[65]) -> bytes32:
                signer: address = self._recover_signer(_hash, _signature)
                if signer == OWNER:
                    return 0x1626ba7e00000000000000000000000000000000000000000000000000000000
                return 0xffffffff00000000000000000000000000000000000000000000000000000000
    
            @view
            @internal
            def _recover_signer(_hash: bytes32, _signature: Bytes[65]) -> address:
                v: uint256 = convert(slice(_signature, 64, 1), uint256)
                r: uint256 = convert(slice(_signature, 0, 32), uint256)
                s: uint256 = convert(slice(_signature, 32, 32), uint256)
                return ecrecover(_hash, v, r, s)
        """
        with boa.env.prank(eth_acc.address):
            mock_contract = boa.loads(src)
    
>       permit = permit_class(swap)(owner=mock_contract.address, spender=bob, value=2**256 - 1, nonce=0)

tests/token/test_token_approve.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x17aaca990>
bob = Address('0x780dd6478D9Fcd8949029ceD2f1fcb0712B942E1')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xaE33dbEcc50519c3C4122BB3ffb592A7d911cc69, compiled with vyper-0.3.10+913..., ma_last_time=586759685503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit(eth_acc, bob, swap):
        value = 2**256 - 1
>       permit = permit_class(swap)(owner=eth_acc.address, spender=bob, value=value, nonce=0)

tests/token/test_token_approve.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit_contract[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x148285790>
bob = Address('0xdca7A267992c1aA1a8305cdB4B936361A494d1B3')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x5a0142f9aa9522c3dE516Cd0691Be4beED157C9C, compiled with vyper-0.3.10+913..., ma_last_time=586759685503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit_contract(eth_acc, bob, swap):
        # based on https://eips.ethereum.org/EIPS/eip-1271
        src = """
            # pragma version 0.3.10
            OWNER: public(immutable(address))
    
            @external
            def __init__():
                OWNER = msg.sender
    
            @view
            @external
            def isValidSignature(_hash: bytes32, _signature: Bytes[65]) -> bytes32:
                signer: address = self._recover_signer(_hash, _signature)
                if signer == OWNER:
                    return 0x1626ba7e00000000000000000000000000000000000000000000000000000000
                return 0xffffffff00000000000000000000000000000000000000000000000000000000
    
            @view
            @internal
            def _recover_signer(_hash: bytes32, _signature: Bytes[65]) -> address:
                v: uint256 = convert(slice(_signature, 64, 1), uint256)
                r: uint256 = convert(slice(_signature, 0, 32), uint256)
                s: uint256 = convert(slice(_signature, 32, 32), uint256)
                return ecrecover(_hash, v, r, s)
        """
        with boa.env.prank(eth_acc.address):
            mock_contract = boa.loads(src)
    
>       permit = permit_class(swap)(owner=mock_contract.address, spender=bob, value=2**256 - 1, nonce=0)

tests/token/test_token_approve.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x17bbfb3b0>
bob = Address('0x1FA0Bad73d24924864cF9f3B3FfbfB48218a15cA')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xDE006A598DC61f35bBACf340C2B1b2f4d5B31e5D, compiled with vyper-0.3.10+913..., ma_last_time=586759685503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit(eth_acc, bob, swap):
        value = 2**256 - 1
>       permit = permit_class(swap)(owner=eth_acc.address, spender=bob, value=value, nonce=0)

tests/token/test_token_approve.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_exchange_underlying[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw5] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0xf4D377548aaE3f09cfDa5E34B38b44085A488Af3')
charlie = Address('0xC5ae41CF74b25e9a256B23052c99321a28BafeB2')
swap = <contracts/main/CurveStableSwapNG.vy at 0x00D487E8Ecf1A4FBd2656dcE239Af2EBA793EdF4, compiled with vyper-0.3.10+9136169...503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=2999999999999999999999999, nonces={}>
underlying_tokens = [<contracts/mocks/ERC20.vy at 0x943FDf69c073b5866caB072825C6E60580c0CFa8, compiled with vyper-0.3.10+9136169>
<storage... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
meta_decimals = 18, base_pool_decimals = [18, 18, 18]

    def test_exchange_underlying(bob, charlie, swap, underlying_tokens, meta_decimals, base_pool_decimals):
        initial_amount = underlying_tokens[0].balanceOf(bob)
    
        amount = 10 ** base_pool_decimals[0]
        underlying_tokens[2]._mint_for_testing(bob, amount)
    
>       swap.exchange_underlying(1, 0, amount, 0, charlie, sender=bob)
E       AttributeError: 'VyperContract' object has no attribute 'exchange_underlying'

tests/pools/meta/test_receiver_meta.py:12: AttributeError
_ test_permit[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x17aba4bf0>
bob = Address('0x02b763C3e1Db4b896eE67BdB1DAA9D015605fc5F')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xc41B7045eCdFD09d25a0D2AAB802e7218BCcDE76, compiled with vyper-0.3.10+913..., ma_last_time=586759685503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit(eth_acc, bob, swap):
        value = 2**256 - 1
>       permit = permit_class(swap)(owner=eth_acc.address, spender=bob, value=value, nonce=0)

tests/token/test_token_approve.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit_contract[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x13f066f00>
bob = Address('0x0dEAF1Fd9d015893449d3F5fF6292a3b3254ff30')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xfc49703A2c341b5AAce7a922Bd2e02c488eA8773, compiled with vyper-0.3.10+913..., ma_last_time=586759685503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit_contract(eth_acc, bob, swap):
        # based on https://eips.ethereum.org/EIPS/eip-1271
        src = """
            # pragma version 0.3.10
            OWNER: public(immutable(address))
    
            @external
            def __init__():
                OWNER = msg.sender
    
            @view
            @external
            def isValidSignature(_hash: bytes32, _signature: Bytes[65]) -> bytes32:
                signer: address = self._recover_signer(_hash, _signature)
                if signer == OWNER:
                    return 0x1626ba7e00000000000000000000000000000000000000000000000000000000
                return 0xffffffff00000000000000000000000000000000000000000000000000000000
    
            @view
            @internal
            def _recover_signer(_hash: bytes32, _signature: Bytes[65]) -> address:
                v: uint256 = convert(slice(_signature, 64, 1), uint256)
                r: uint256 = convert(slice(_signature, 0, 32), uint256)
                s: uint256 = convert(slice(_signature, 32, 32), uint256)
                return ecrecover(_hash, v, r, s)
        """
        with boa.env.prank(eth_acc.address):
            mock_contract = boa.loads(src)
    
>       permit = permit_class(swap)(owner=mock_contract.address, spender=bob, value=2**256 - 1, nonce=0)

tests/token/test_token_approve.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_exchange_underlying[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw5] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

bob = Address('0x2287ea30Dfc14a3a5054B5fB4E552FC84EF59E97')
charlie = Address('0xEbfa4e5C65203Be772e8628C69489Cc1163c818d')
swap = <contracts/main/CurveStableSwapNG.vy at 0x1EEE10FB79701b6eaEdc383193ef62277f95305e, compiled with vyper-0.3.10+9136169...503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=2999999999999999999999999, nonces={}>
underlying_tokens = [<contracts/mocks/ERC20Oracle.vy at 0x03ED83aCeeb2b01396a93AD2cDa65174F826cEDC, compiled with vyper-0.3.10+9136169>
<s... with vyper-0.3.10+9136169>
<storage: name=USDT, symbol=USDT, decimals=18, balanceOf={}, allowances={}, totalSupply=0>]
meta_decimals = 18, base_pool_decimals = [18, 18, 18]

    def test_exchange_underlying(bob, charlie, swap, underlying_tokens, meta_decimals, base_pool_decimals):
        initial_amount = underlying_tokens[0].balanceOf(bob)
    
        amount = 10 ** base_pool_decimals[0]
        underlying_tokens[2]._mint_for_testing(bob, amount)
    
>       swap.exchange_underlying(1, 0, amount, 0, charlie, sender=bob)
E       AttributeError: 'VyperContract' object has no attribute 'exchange_underlying'

tests/pools/meta/test_receiver_meta.py:12: AttributeError
_ test_permit[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x17c7852b0>
bob = Address('0x7dE2Cd5B5781805715fB101534d6de6ceed73560')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x774Efc6F29c1Dac34472E31613Ec7aD8d018Ca17, compiled with vyper-0.3.10+913..., ma_last_time=586759685503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit(eth_acc, bob, swap):
        value = 2**256 - 1
>       permit = permit_class(swap)(owner=eth_acc.address, spender=bob, value=value, nonce=0)

tests/token/test_token_approve.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit_contract[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x1491b8890>
bob = Address('0x4733eF81e0e10d4D033CBbcF69Dbf59ef627F0AB')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x9155536F8B2F65B174fb19f27C2eA8aa531C7970, compiled with vyper-0.3.10+913..., ma_last_time=586759685503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit_contract(eth_acc, bob, swap):
        # based on https://eips.ethereum.org/EIPS/eip-1271
        src = """
            # pragma version 0.3.10
            OWNER: public(immutable(address))
    
            @external
            def __init__():
                OWNER = msg.sender
    
            @view
            @external
            def isValidSignature(_hash: bytes32, _signature: Bytes[65]) -> bytes32:
                signer: address = self._recover_signer(_hash, _signature)
                if signer == OWNER:
                    return 0x1626ba7e00000000000000000000000000000000000000000000000000000000
                return 0xffffffff00000000000000000000000000000000000000000000000000000000
    
            @view
            @internal
            def _recover_signer(_hash: bytes32, _signature: Bytes[65]) -> address:
                v: uint256 = convert(slice(_signature, 64, 1), uint256)
                r: uint256 = convert(slice(_signature, 0, 32), uint256)
                s: uint256 = convert(slice(_signature, 32, 32), uint256)
                return ecrecover(_hash, v, r, s)
        """
        with boa.env.prank(eth_acc.address):
            mock_contract = boa.loads(src)
    
>       permit = permit_class(swap)(owner=mock_contract.address, spender=bob, value=2**256 - 1, nonce=0)

tests/token/test_token_approve.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit_contract[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x17c58edb0>
bob = Address('0xfE0D3b1BC3fF65D716285e2F9b707706F6eA4226')
swap = <contracts/main/CurveStableSwapNG.vy at 0xA384363cb22310f289D0D161715fd524A235AD3c, compiled with vyper-0.3.10+9136169..., ma_last_time=586759685503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit_contract(eth_acc, bob, swap):
        # based on https://eips.ethereum.org/EIPS/eip-1271
        src = """
            # pragma version 0.3.10
            OWNER: public(immutable(address))
    
            @external
            def __init__():
                OWNER = msg.sender
    
            @view
            @external
            def isValidSignature(_hash: bytes32, _signature: Bytes[65]) -> bytes32:
                signer: address = self._recover_signer(_hash, _signature)
                if signer == OWNER:
                    return 0x1626ba7e00000000000000000000000000000000000000000000000000000000
                return 0xffffffff00000000000000000000000000000000000000000000000000000000
    
            @view
            @internal
            def _recover_signer(_hash: bytes32, _signature: Bytes[65]) -> address:
                v: uint256 = convert(slice(_signature, 64, 1), uint256)
                r: uint256 = convert(slice(_signature, 0, 32), uint256)
                s: uint256 = convert(slice(_signature, 32, 32), uint256)
                return ecrecover(_hash, v, r, s)
        """
        with boa.env.prank(eth_acc.address):
            mock_contract = boa.loads(src)
    
>       permit = permit_class(swap)(owner=mock_contract.address, spender=bob, value=2**256 - 1, nonce=0)

tests/token/test_token_approve.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_permit_contract[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

eth_acc = <eth_account.signers.local.LocalAccount object at 0x17e0d1910>
bob = Address('0xD24C7172aD509Bd16CE6492d5090532Aae7D159a')
swap = <contracts/main/CurveStableSwapNG.vy at 0x49672Ac2A25BD7808a195E5370c7d08370e77021, compiled with vyper-0.3.10+9136169..., ma_last_time=586759685503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=0, nonces={}>

    def test_permit_contract(eth_acc, bob, swap):
        # based on https://eips.ethereum.org/EIPS/eip-1271
        src = """
            # pragma version 0.3.10
            OWNER: public(immutable(address))
    
            @external
            def __init__():
                OWNER = msg.sender
    
            @view
            @external
            def isValidSignature(_hash: bytes32, _signature: Bytes[65]) -> bytes32:
                signer: address = self._recover_signer(_hash, _signature)
                if signer == OWNER:
                    return 0x1626ba7e00000000000000000000000000000000000000000000000000000000
                return 0xffffffff00000000000000000000000000000000000000000000000000000000
    
            @view
            @internal
            def _recover_signer(_hash: bytes32, _signature: Bytes[65]) -> address:
                v: uint256 = convert(slice(_signature, 64, 1), uint256)
                r: uint256 = convert(slice(_signature, 0, 32), uint256)
                s: uint256 = convert(slice(_signature, 32, 32), uint256)
                return ecrecover(_hash, v, r, s)
        """
        with boa.env.prank(eth_acc.address):
            mock_contract = boa.loads(src)
    
>       permit = permit_class(swap)(owner=mock_contract.address, spender=bob, value=2**256 - 1, nonce=0)

tests/token/test_token_approve.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/token/test_token_approve.py:67: in permit_class
    class Permit(EIP712Message):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    class Permit(EIP712Message):
        # EIP-712 Domain Fields
        _name_: "string" = swap.name()  # noqa: F821
        _version_: "string" = swap.version()  # noqa: F821
>       _chainId_: "uint256" = boa.env.chain.chain_id  # noqa: F821
E       AttributeError: 'Env' object has no attribute 'chain'

tests/token/test_token_approve.py:71: AttributeError
_ test_transfer_event_fires[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw5] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xd5b61C4d302C85F22D148B491c586C4a5071CB85')
bob = Address('0xe491d16dBbd40b321A39857e44D90130C277FADE')
charlie = Address('0x6d62be71a80cF8BFF2ca25C6f264e49e1c03b5C4')
swap = <contracts/main/CurveStableSwapNG.vy at 0x38959AEBDD021048594b3636aB7C1580e29CDEd4, compiled with vyper-0.3.10+9136169...566359198504234870811634670792482436836, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>

    def test_transfer_event_fires(alice, bob, charlie, swap):
        amount = swap.balanceOf(alice)
    
        swap.approve(bob, amount, sender=alice)
        _, events = call_returning_result_and_logs(swap, "transferFrom", alice, charlie, amount, sender=bob)
    
>       assert len(events) == 1
E       assert 2 == 1
E        +  where 2 = len([Transfer(sender=0xd5b61C4d302C85F22D148B491c586C4a5071CB85, receiver=0x6d62be71a80cF8BFF2ca25C6f264e49e1c03b5C4, valu...pproval(owner=0xd5b61C4d302C85F22D148B491c586C4a5071CB85, spender=0xe491d16dBbd40b321A39857e44D90130C277FADE, value=0)])

tests/token/test_token_transfer_from.py:170: AssertionError
_ test_transfer_event_fires[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw1] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xa7394e9Feb1775Af8A6ba3763E8bc89dC028c4D4')
bob = Address('0x33E2110f8F10aD692a5f5773f8458e00DA3FE417')
charlie = Address('0x1C11e4A440eDf2f44d2D574fff64DDc7497d91cB')
swap = <contracts/main/CurveStableSwapNG.vy at 0xd45bE730994b75261F60B6a786Ad0A38829D66Dd, compiled with vyper-0.3.10+9136169...566359198504234870811634670792482436836, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>

    def test_transfer_event_fires(alice, bob, charlie, swap):
        amount = swap.balanceOf(alice)
    
        swap.approve(bob, amount, sender=alice)
        _, events = call_returning_result_and_logs(swap, "transferFrom", alice, charlie, amount, sender=bob)
    
>       assert len(events) == 1
E       assert 2 == 1
E        +  where 2 = len([Transfer(sender=0xa7394e9Feb1775Af8A6ba3763E8bc89dC028c4D4, receiver=0x1C11e4A440eDf2f44d2D574fff64DDc7497d91cB, valu...pproval(owner=0xa7394e9Feb1775Af8A6ba3763E8bc89dC028c4D4, spender=0x33E2110f8F10aD692a5f5773f8458e00DA3FE417, value=0)])

tests/token/test_token_transfer_from.py:170: AssertionError
_ test_transfer_event_fires[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x69cd5aC40CA9c58e6aA841216deE98F75353CD4e')
bob = Address('0xa97DAfCf6C711D1eC9d31EbEd0736fb110d5Bf87')
charlie = Address('0x02b763C3e1Db4b896eE67BdB1DAA9D015605fc5F')
swap = <contracts/main/CurveStableSwapNG.vy at 0x816E4f11917A307f565C44302aef2e1da35eE9d5, compiled with vyper-0.3.10+9136169...566359198504234870811634670792482436836, balanceOf={}, allowance={}, total_supply=2999999999999999999999999, nonces={}>

    def test_transfer_event_fires(alice, bob, charlie, swap):
        amount = swap.balanceOf(alice)
    
        swap.approve(bob, amount, sender=alice)
        _, events = call_returning_result_and_logs(swap, "transferFrom", alice, charlie, amount, sender=bob)
    
>       assert len(events) == 1
E       assert 2 == 1
E        +  where 2 = len([Transfer(sender=0x69cd5aC40CA9c58e6aA841216deE98F75353CD4e, receiver=0x02b763C3e1Db4b896eE67BdB1DAA9D015605fc5F, valu...pproval(owner=0x69cd5aC40CA9c58e6aA841216deE98F75353CD4e, spender=0xa97DAfCf6C711D1eC9d31EbEd0736fb110d5Bf87, value=0)])

tests/token/test_token_transfer_from.py:170: AssertionError
_ test_transfer_event_fires[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw5] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xE4eb8C52db764dD35fE266f46D59e09251149F7a')
bob = Address('0xb2DC06FB0B203200CCCCB7360738B2186d3D0a66')
charlie = Address('0x25AaC869750e8b4509EeB08212F5CA68d7B917e4')
swap = <contracts/main/CurveStableSwapNG.vy at 0xD547A535B5a5dA61A2a3b07E20026F69805d7066, compiled with vyper-0.3.10+9136169...566359198504234870811634670792482436836, balanceOf={}, allowance={}, total_supply=2999999999999999999999999, nonces={}>

    def test_transfer_event_fires(alice, bob, charlie, swap):
        amount = swap.balanceOf(alice)
    
        swap.approve(bob, amount, sender=alice)
        _, events = call_returning_result_and_logs(swap, "transferFrom", alice, charlie, amount, sender=bob)
    
>       assert len(events) == 1
E       assert 2 == 1
E        +  where 2 = len([Transfer(sender=0xE4eb8C52db764dD35fE266f46D59e09251149F7a, receiver=0x25AaC869750e8b4509EeB08212F5CA68d7B917e4, valu...pproval(owner=0xE4eb8C52db764dD35fE266f46D59e09251149F7a, spender=0xb2DC06FB0B203200CCCCB7360738B2186d3D0a66, value=0)])

tests/token/test_token_transfer_from.py:170: AssertionError
_ test_transfer_event_fires[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw2] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xD279b623d9E92b5863593be493497b81454b1acC')
bob = Address('0x56c574e39298f3F9725d836625570496aEaC733a')
charlie = Address('0x032fD38Cec23ef963Cb034FD1Dd8aC3F82c802C8')
swap = <contracts/main/CurveStableSwapNG.vy at 0xdac13b4c1e87Cb614507b116849411D05b81aF76, compiled with vyper-0.3.10+9136169...566359198504234870811634670792482436836, balanceOf={}, allowance={}, total_supply=2999999999999999999999998, nonces={}>

    def test_transfer_event_fires(alice, bob, charlie, swap):
        amount = swap.balanceOf(alice)
    
        swap.approve(bob, amount, sender=alice)
        _, events = call_returning_result_and_logs(swap, "transferFrom", alice, charlie, amount, sender=bob)
    
>       assert len(events) == 1
E       assert 2 == 1
E        +  where 2 = len([Transfer(sender=0xD279b623d9E92b5863593be493497b81454b1acC, receiver=0x032fD38Cec23ef963Cb034FD1Dd8aC3F82c802C8, valu...pproval(owner=0xD279b623d9E92b5863593be493497b81454b1acC, spender=0x56c574e39298f3F9725d836625570496aEaC733a, value=0)])

tests/token/test_token_transfer_from.py:170: AssertionError
_ test_transfer_event_fires[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw0] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x7Aff668ba5eb4012Cc54ffdf238dAaEc61F6cb6f')
bob = Address('0xf073854Fe09CA082bDb9c323819769982Dc3581C')
charlie = Address('0x0a0B5849c49A2895BF3d935ae297e6D58B1CebB6')
swap = <contracts/main/CurveStableSwapNG.vy at 0x7460518815052e13553C038Bd9c89e48e2e00fc5, compiled with vyper-0.3.10+9136169...906641565425173334275009278224250648293, balanceOf={}, allowance={}, total_supply=2999999999999999999999999, nonces={}>

    def test_transfer_event_fires(alice, bob, charlie, swap):
        amount = swap.balanceOf(alice)
    
        swap.approve(bob, amount, sender=alice)
        _, events = call_returning_result_and_logs(swap, "transferFrom", alice, charlie, amount, sender=bob)
    
>       assert len(events) == 1
E       assert 2 == 1
E        +  where 2 = len([Transfer(sender=0x7Aff668ba5eb4012Cc54ffdf238dAaEc61F6cb6f, receiver=0x0a0B5849c49A2895BF3d935ae297e6D58B1CebB6, valu...pproval(owner=0x7Aff668ba5eb4012Cc54ffdf238dAaEc61F6cb6f, spender=0xf073854Fe09CA082bDb9c323819769982Dc3581C, value=0)])

tests/token/test_token_transfer_from.py:170: AssertionError
_ test_transfer_event_fires[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw1] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xB012476A7B8eb84FFAa3Ab5aFB4fed6D861298a3')
bob = Address('0x686Df3846DeDbF784066A412966207283dE646b0')
charlie = Address('0x39Cb49eF6b975c0aAC56Bd5D52310520a624f190')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xC0D3ac98fE7582a2cE15B29e2f3EB171dCA24b06, compiled with vyper-0.3.10+913...566359198504234870811634670792482436836, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>

    def test_transfer_event_fires(alice, bob, charlie, swap):
        amount = swap.balanceOf(alice)
    
        swap.approve(bob, amount, sender=alice)
        _, events = call_returning_result_and_logs(swap, "transferFrom", alice, charlie, amount, sender=bob)
    
>       assert len(events) == 1
E       assert 2 == 1
E        +  where 2 = len([Transfer(sender=0xB012476A7B8eb84FFAa3Ab5aFB4fed6D861298a3, receiver=0x39Cb49eF6b975c0aAC56Bd5D52310520a624f190, valu...pproval(owner=0xB012476A7B8eb84FFAa3Ab5aFB4fed6D861298a3, spender=0x686Df3846DeDbF784066A412966207283dE646b0, value=0)])

tests/token/test_token_transfer_from.py:170: AssertionError
_ test_transfer_event_fires[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw3] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x39Cb49eF6b975c0aAC56Bd5D52310520a624f190')
bob = Address('0x396d35cDDA6c5bE9804C78Bc69a7276d081B1495')
charlie = Address('0x398599275a2e2c4D658B9Eb88BB0159363E30118')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x513BFE568ed10350318ffE5067167fEF47bc35B2, compiled with vyper-0.3.10+913...906641565425173334275009278224250648293, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>

    def test_transfer_event_fires(alice, bob, charlie, swap):
        amount = swap.balanceOf(alice)
    
        swap.approve(bob, amount, sender=alice)
        _, events = call_returning_result_and_logs(swap, "transferFrom", alice, charlie, amount, sender=bob)
    
>       assert len(events) == 1
E       assert 2 == 1
E        +  where 2 = len([Transfer(sender=0x39Cb49eF6b975c0aAC56Bd5D52310520a624f190, receiver=0x398599275a2e2c4D658B9Eb88BB0159363E30118, valu...pproval(owner=0x39Cb49eF6b975c0aAC56Bd5D52310520a624f190, spender=0x396d35cDDA6c5bE9804C78Bc69a7276d081B1495, value=0)])

tests/token/test_token_transfer_from.py:170: AssertionError
_ test_transfer_event_fires[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw9] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xd95C1f099dF009f2F55C1Ab57d3481a48643AFB9')
bob = Address('0x0a4A73079c7347EACc24A0742aD1897fd2D213b2')
charlie = Address('0xfb0093FB882f2985a1DdCbE5fE340eEEd0c70300')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xf93Dce19DE703b587ca3Add0E2c4564332D034dE, compiled with vyper-0.3.10+913...906641565425173334275009278224250648293, balanceOf={}, allowance={}, total_supply=9019409605067969776697344, nonces={}>

    def test_transfer_event_fires(alice, bob, charlie, swap):
        amount = swap.balanceOf(alice)
    
        swap.approve(bob, amount, sender=alice)
        _, events = call_returning_result_and_logs(swap, "transferFrom", alice, charlie, amount, sender=bob)
    
>       assert len(events) == 1
E       assert 2 == 1
E        +  where 2 = len([Transfer(sender=0xd95C1f099dF009f2F55C1Ab57d3481a48643AFB9, receiver=0xfb0093FB882f2985a1DdCbE5fE340eEEd0c70300, valu...pproval(owner=0xd95C1f099dF009f2F55C1Ab57d3481a48643AFB9, spender=0x0a4A73079c7347EACc24A0742aD1897fd2D213b2, value=0)])

tests/token/test_token_transfer_from.py:170: AssertionError
_ test_transfer_event_fires[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw5] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xf6f0bE3aae102603dE940A149C273a07ca8110d0')
bob = Address('0x9324ea99446fA15b7d8F4D79e1274A537B826b74')
charlie = Address('0x7516647797BBA7daEb1C6BE5B1C2239aB3449aC3')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x9B08B9929ee252e90F1F88077aAaEb7B42344Ffe, compiled with vyper-0.3.10+913...906641565425173334275009278224250648293, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>

    def test_transfer_event_fires(alice, bob, charlie, swap):
        amount = swap.balanceOf(alice)
    
        swap.approve(bob, amount, sender=alice)
        _, events = call_returning_result_and_logs(swap, "transferFrom", alice, charlie, amount, sender=bob)
    
>       assert len(events) == 1
E       assert 2 == 1
E        +  where 2 = len([Transfer(sender=0xf6f0bE3aae102603dE940A149C273a07ca8110d0, receiver=0x7516647797BBA7daEb1C6BE5B1C2239aB3449aC3, valu...pproval(owner=0xf6f0bE3aae102603dE940A149C273a07ca8110d0, spender=0x9324ea99446fA15b7d8F4D79e1274A537B826b74, value=0)])

tests/token/test_token_transfer_from.py:170: AssertionError
_ test_transfer_event_fires[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw4] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0x01a9A2e4cc15fa5001E62a57333847FD713Be66F')
bob = Address('0x01637705C5045c87F691EB338b5aBCDdB40d6f2F')
charlie = Address('0xF1D22A5f067cf8C63494BF19a334AB11922FDD4b')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x071aab97253b936A23B2EF61891eD1e56481a91f, compiled with vyper-0.3.10+913...906641565425173334275009278224250648293, balanceOf={}, allowance={}, total_supply=9000000000000000000000000, nonces={}>

    def test_transfer_event_fires(alice, bob, charlie, swap):
        amount = swap.balanceOf(alice)
    
        swap.approve(bob, amount, sender=alice)
        _, events = call_returning_result_and_logs(swap, "transferFrom", alice, charlie, amount, sender=bob)
    
>       assert len(events) == 1
E       assert 2 == 1
E        +  where 2 = len([Transfer(sender=0x01a9A2e4cc15fa5001E62a57333847FD713Be66F, receiver=0xF1D22A5f067cf8C63494BF19a334AB11922FDD4b, valu...pproval(owner=0x01a9A2e4cc15fa5001E62a57333847FD713Be66F, spender=0x01637705C5045c87F691EB338b5aBCDdB40d6f2F, value=0)])

tests/token/test_token_transfer_from.py:170: AssertionError
_ test_transfer_event_fires[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw6] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

alice = Address('0xA2b65A44373c6bAC5802cC022182F2E3cD997104')
bob = Address('0x0728C6cEFed53B7EC703ff8aBa67A686f092C44F')
charlie = Address('0x211482bF8A6DF395Da9308dc213aa5C8D684c07f')
swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x4663b50940124857575aDF96f3B17Ef4ac983CE6, compiled with vyper-0.3.10+913...906641565425173334275009278224250648293, balanceOf={}, allowance={}, total_supply=9000002999399999001996339, nonces={}>

    def test_transfer_event_fires(alice, bob, charlie, swap):
        amount = swap.balanceOf(alice)
    
        swap.approve(bob, amount, sender=alice)
        _, events = call_returning_result_and_logs(swap, "transferFrom", alice, charlie, amount, sender=bob)
    
>       assert len(events) == 1
E       assert 2 == 1
E        +  where 2 = len([Transfer(sender=0xA2b65A44373c6bAC5802cC022182F2E3cD997104, receiver=0x211482bF8A6DF395Da9308dc213aa5C8D684c07f, valu...pproval(owner=0xA2b65A44373c6bAC5802cC022182F2E3cD997104, spender=0x0728C6cEFed53B7EC703ff8aBa67A686f092C44F, value=0)])

tests/token/test_token_transfer_from.py:170: AssertionError
_ test_get_dx_underlying[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw8] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

meta_swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x115874fb94DAd92F50610102160320c09669Ee1B, compiled with vyper-0.3.10+913..., ma_last_time=586759685503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=0, nonces={}>
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x18232aE596efE4aE1E943B6FB87B1E83Dde053Ec, compiled with vyper-0.3.10+...6366535B7FD4247d90bb626bB1CE868, fee_receiver=0x73356B81E639139CDdCcb29Fba6dCb0351A3b942, markets={}, market_counts={}>
initial_setup = None

    @given(
>       amount_in=strategy("decimal", min_value=0.001, max_value=10**6),
        i=strategy("uint", min_value=0, max_value=4),
        j=strategy("uint", min_value=0, max_value=4),
    )

tests/pools/general/test_swap_getters.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/test/plugin.py:23: in f
    t(*args, **kwargs)
tests/pools/general/test_swap_getters.py:50: in test_get_dx_underlying
    expected_out = meta_swap.get_dy_underlying(i, j, _amount_in)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

i = 0, j = 1, amount_in = Decimal('0.0010000000')
meta_swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x115874fb94DAd92F50610102160320c09669Ee1B, compiled with vyper-0.3.10+913..., ma_last_time=586759685503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=0, nonces={}>
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x18232aE596efE4aE1E943B6FB87B1E83Dde053Ec, compiled with vyper-0.3.10+...6366535B7FD4247d90bb626bB1CE868, fee_receiver=0x73356B81E639139CDdCcb29Fba6dCb0351A3b942, markets={}, market_counts={}>
initial_setup = None

    @given(
        amount_in=strategy("decimal", min_value=0.001, max_value=10**6),
        i=strategy("uint", min_value=0, max_value=4),
        j=strategy("uint", min_value=0, max_value=4),
    )
    @settings(**SETTINGS)
    def test_get_dx_underlying(i, j, amount_in, meta_swap, factory, initial_setup):
        base_n_coins = meta_swap.BASE_N_COINS()
    
        if i == j:
            return
    
        # cap max index to base_n_coins + 1 (metapool coin) excluding LP token
        if max(i, j) >= base_n_coins + 1:
            return
    
        if min(i, j) > 0:  # base pool swap: it reverts in view contract
            return
    
        _token_i_precision = 10 ** factory.get_underlying_decimals(meta_swap)[i]
        _amount_in = int(amount_in * _token_i_precision)
>       expected_out = meta_swap.get_dy_underlying(i, j, _amount_in)
E       boa.contracts.base_evm_contract.BoaError: Revert(b'')
E       
E       <contracts/mocks/CurvePool.vy at 0x062f27DD25Cb3863dC08C3ceCb09FA2d5D85ba24, compiled with vyper-0.3.10+9136169>
E       <storage: coins=['0x94da83138ee0156DB7A301006ab8606EA0ECFaB3', '0x69876899fB6d5CCBfC96cDc79bfE30588177d39D', '0x013DC8276cB9Dd203a684A037615159e4771429B'], balances=[0, 0, 0], fee=3000000, admin_fee=5000000000, owner=0xC9b52E3E45569d9d9f483e7ef8EE43F7bF03115b, lp_token=0xE09e9163fD6F6D7D13Ca9623AfEfaEbbdd20b90d, initial_A=20000, future_A=20000, initial_A_time=0, future_A_time=0, admin_actions_deadline=0, transfer_ownership_deadline=0, future_fee=0, future_admin_fee=0, future_owner=0x0000000000000000000000000000000000000000, is_killed=False, kill_deadline=1729515739>
E        <compiler: clamp gt 0>
E         contract "contracts/mocks/CurvePool.vy:262", function "get_virtual_price", line 262:27 
E              261     token_supply: uint256 = ERC20(self.lp_token).totalSupply()
E         ---> 262     return D * PRECISION / token_supply
E         ------------------------------------^
E              263
E        <locals: D=0, token_supply=0>
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0x115874fb94DAd92F50610102160320c09669Ee1B, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[0, 0], fee=4000000, offpeg_fee_multiplier=20000000000, initial_A=50000, future_A=50000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=0, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759685503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=0, nonces={}>
E        <compiler: external call failed>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:535", function "_stored_rates", line 535:48 
E              534     """
E         ---> 535     rates: uint256[N_COINS] = [rate_multiplier, StableSwap(BASE_POOL).get_virtual_price()]
E         ---------------------------------------------------------^
E              536
E        <locals: rates=[1000000000000000000, 0]>
E       
E       <contracts/main/CurveStableSwapNGViews.vy at 0x04945EE7d6366535B7FD4247d90bb626bB1CE868, compiled with vyper-0.3.10+9136169>
E        <compiler: external call failed>
E         contract "contracts/main/CurveStableSwapNGViews.vy:696", function "_get_rates_balances_xp", line 696:42 
E              695
E         ---> 696     rates: DynArray[uint256, MAX_COINS] = StableSwapNG(pool).stored_rates()
E         ---------------------------------------------------^
E              697     balances: DynArray[uint256, MAX_COINS] = StableSwapNG(pool).get_balances()
E        <locals: pool=0x115874fb94DAd92F50610102160320c09669Ee1B, N_COINS=2, rates=[], balances=[0, 0, 0, 0, 0, 0, 0, 0], xp=[]>
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0x115874fb94DAd92F50610102160320c09669Ee1B, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[0, 0], fee=4000000, offpeg_fee_multiplier=20000000000, initial_A=50000, future_A=50000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=0, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759685503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=0, nonces={}>
E        <compiler: external call failed>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:1719", function "get_dy_underlying", line 1719:11 
E              1718     """
E         ---> 1719     return StableSwapViews(factory.views_implementation()).get_dy_underlying(i, j, dx, self)
E         ---------------------^
E              1720
E        <locals: i=0, j=1>
E       Falsifying example: f(
E           meta_swap=<contracts/main/CurveStableSwapMetaNG.vy at 0x115874fb94DAd92F50610102160320c09669Ee1B, compiled with vyper-0.3.10+9136169>
E           <storage: stored_balances=[0, 0], fee=4000000, offpeg_fee_multiplier=20000000000, initial_A=50000, future_A=50000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=0, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759685503817896215788699641263203906568533723, balanceOf={}, allowance={}, total_supply=0, nonces={}>,
E           factory=<contracts/main/CurveStableSwapFactoryNG.vy at 0x18232aE596efE4aE1E943B6FB87B1E83Dde053Ec, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0xC9b52E3E45569d9d9f483e7ef8EE43F7bF03115b, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=2, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xa352b0A4933b2A1F118448d2B5710011d17BC7e0, gauge_implementation=0xA2DDf18e3Cae61E58a909512F0b566c4AF3A635f, views_implementation=0x04945EE7d6366535B7FD4247d90bb626bB1CE868, fee_receiver=0x73356B81E639139CDdCcb29Fba6dCb0351A3b942, markets={}, market_counts={}>,
E           initial_setup=None,
E           amount_in=int_to_decimal(10000000),  # or any other generated value
E           i=0,
E           j=1,
E       )
E       Explanation:
E           These lines were always and only run by failing examples:
E               /Users/michael/Documents/projects/stableswap-ng/tests/pools/general/test_swap_getters.py:48
E               /Users/michael/Documents/projects/stableswap-ng/tests/pools/general/test_swap_getters.py:49
E               /Users/michael/pyEnv/crv/lib/python3.12/site-packages/Crypto/Util/_raw_api.py:285
E               /Users/michael/pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:40
E               /Users/michael/pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:74
E               (and 137 more with settings.verbosity >= verbose)

tests/pools/general/test_swap_getters.py:50: BoaError
_ test_get_dx_underlying[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)] _
[gw8] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

meta_swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x85Df2bDB49068f34600dE16AFBF136bAfa3f8130, compiled with vyper-0.3.10+913..., ma_last_time=586759689587206299267050261201758493087787071207, balanceOf={}, allowance={}, total_supply=0, nonces={}>
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x4e5E973D12bcc67ABe3c77E2fb2446C2a9C545B8, compiled with vyper-0.3.10+...b03936A698ACF291C00d7a25b776Ef0, fee_receiver=0x12455259DbC7F040F5A2EB3c96CaCC2e309F1ffc, markets={}, market_counts={}>
initial_setup = None

    @given(
>       amount_in=strategy("decimal", min_value=0.001, max_value=10**6),
        i=strategy("uint", min_value=0, max_value=4),
        j=strategy("uint", min_value=0, max_value=4),
    )

tests/pools/general/test_swap_getters.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/test/plugin.py:23: in f
    t(*args, **kwargs)
tests/pools/general/test_swap_getters.py:50: in test_get_dx_underlying
    expected_out = meta_swap.get_dy_underlying(i, j, _amount_in)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

i = 0, j = 1, amount_in = Decimal('0.0010000000')
meta_swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x85Df2bDB49068f34600dE16AFBF136bAfa3f8130, compiled with vyper-0.3.10+913..., ma_last_time=586759689587206299267050261201758493087787071207, balanceOf={}, allowance={}, total_supply=0, nonces={}>
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x4e5E973D12bcc67ABe3c77E2fb2446C2a9C545B8, compiled with vyper-0.3.10+...b03936A698ACF291C00d7a25b776Ef0, fee_receiver=0x12455259DbC7F040F5A2EB3c96CaCC2e309F1ffc, markets={}, market_counts={}>
initial_setup = None

    @given(
        amount_in=strategy("decimal", min_value=0.001, max_value=10**6),
        i=strategy("uint", min_value=0, max_value=4),
        j=strategy("uint", min_value=0, max_value=4),
    )
    @settings(**SETTINGS)
    def test_get_dx_underlying(i, j, amount_in, meta_swap, factory, initial_setup):
        base_n_coins = meta_swap.BASE_N_COINS()
    
        if i == j:
            return
    
        # cap max index to base_n_coins + 1 (metapool coin) excluding LP token
        if max(i, j) >= base_n_coins + 1:
            return
    
        if min(i, j) > 0:  # base pool swap: it reverts in view contract
            return
    
        _token_i_precision = 10 ** factory.get_underlying_decimals(meta_swap)[i]
        _amount_in = int(amount_in * _token_i_precision)
>       expected_out = meta_swap.get_dy_underlying(i, j, _amount_in)
E       boa.contracts.base_evm_contract.BoaError: Revert(b'')
E       
E       <contracts/mocks/CurvePool.vy at 0xA7A356F39DcfFdD5E15695f15e2B803Cb2F151fB, compiled with vyper-0.3.10+9136169>
E       <storage: coins=['0x454F31f25228295d0Cc78976f24b7E3748cFFe1e', '0x18c8Fe895e9Fec1Ce963D0792fE91bB72dB1bEFC', '0x994D0C82fb2Ae16232b626170a0FcF704846dEFd'], balances=[0, 0, 0], fee=3000000, admin_fee=5000000000, owner=0x929A678648b458086e4dFeeB9BD9a42D8cD7405d, lp_token=0xa437c1C26c65D22F2B850B93De27E24C0562c11a, initial_A=20000, future_A=20000, initial_A_time=0, future_A_time=0, admin_actions_deadline=0, transfer_ownership_deadline=0, future_fee=0, future_admin_fee=0, future_owner=0x0000000000000000000000000000000000000000, is_killed=False, kill_deadline=1729515751>
E        <compiler: clamp gt 0>
E         contract "contracts/mocks/CurvePool.vy:262", function "get_virtual_price", line 262:27 
E              261     token_supply: uint256 = ERC20(self.lp_token).totalSupply()
E         ---> 262     return D * PRECISION / token_supply
E         ------------------------------------^
E              263
E        <locals: D=0, token_supply=0>
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0x85Df2bDB49068f34600dE16AFBF136bAfa3f8130, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[0, 0], fee=1000000, offpeg_fee_multiplier=20000000000, initial_A=200000, future_A=200000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=0, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759689587206299267050261201758493087787071207, balanceOf={}, allowance={}, total_supply=0, nonces={}>
E        <compiler: external call failed>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:535", function "_stored_rates", line 535:48 
E              534     """
E         ---> 535     rates: uint256[N_COINS] = [rate_multiplier, StableSwap(BASE_POOL).get_virtual_price()]
E         ---------------------------------------------------------^
E              536
E        <locals: rates=[1000000000000000000, 0]>
E       
E       <contracts/main/CurveStableSwapNGViews.vy at 0xaCf67edc3b03936A698ACF291C00d7a25b776Ef0, compiled with vyper-0.3.10+9136169>
E        <compiler: external call failed>
E         contract "contracts/main/CurveStableSwapNGViews.vy:696", function "_get_rates_balances_xp", line 696:42 
E              695
E         ---> 696     rates: DynArray[uint256, MAX_COINS] = StableSwapNG(pool).stored_rates()
E         ---------------------------------------------------^
E              697     balances: DynArray[uint256, MAX_COINS] = StableSwapNG(pool).get_balances()
E        <locals: pool=0x85Df2bDB49068f34600dE16AFBF136bAfa3f8130, N_COINS=2, rates=[], balances=[0, 0, 0, 0, 0, 0, 0, 0], xp=[]>
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0x85Df2bDB49068f34600dE16AFBF136bAfa3f8130, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[0, 0], fee=1000000, offpeg_fee_multiplier=20000000000, initial_A=200000, future_A=200000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=0, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759689587206299267050261201758493087787071207, balanceOf={}, allowance={}, total_supply=0, nonces={}>
E        <compiler: external call failed>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:1719", function "get_dy_underlying", line 1719:11 
E              1718     """
E         ---> 1719     return StableSwapViews(factory.views_implementation()).get_dy_underlying(i, j, dx, self)
E         ---------------------^
E              1720
E        <locals: i=0, j=1>
E       Falsifying example: f(
E           meta_swap=<contracts/main/CurveStableSwapMetaNG.vy at 0x85Df2bDB49068f34600dE16AFBF136bAfa3f8130, compiled with vyper-0.3.10+9136169>
E           <storage: stored_balances=[0, 0], fee=1000000, offpeg_fee_multiplier=20000000000, initial_A=200000, future_A=200000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=0, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759689587206299267050261201758493087787071207, balanceOf={}, allowance={}, total_supply=0, nonces={}>,
E           factory=<contracts/main/CurveStableSwapFactoryNG.vy at 0x4e5E973D12bcc67ABe3c77E2fb2446C2a9C545B8, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x929A678648b458086e4dFeeB9BD9a42D8cD7405d, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=2, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xB9730543b594De005EaacfE419C03aF562b99AD4, gauge_implementation=0x8031847ba9B493cb032908d1517153334514b928, views_implementation=0xaCf67edc3b03936A698ACF291C00d7a25b776Ef0, fee_receiver=0x12455259DbC7F040F5A2EB3c96CaCC2e309F1ffc, markets={}, market_counts={}>,
E           initial_setup=None,
E           amount_in=int_to_decimal(10000000),  # or any other generated value
E           i=0,
E           j=1,
E       )
E       Explanation:
E           These lines were always and only run by failing examples:
E               /Users/michael/Documents/projects/stableswap-ng/tests/pools/general/test_swap_getters.py:48
E               /Users/michael/Documents/projects/stableswap-ng/tests/pools/general/test_swap_getters.py:49
E               /Users/michael/pyEnv/crv/lib/python3.12/site-packages/Crypto/Util/_raw_api.py:285
E               /Users/michael/pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:40
E               /Users/michael/pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:74
E               (and 137 more with settings.verbosity >= verbose)

tests/pools/general/test_swap_getters.py:50: BoaError
_ test_get_dx_underlying[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)] _
[gw8] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

meta_swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xc2373Ca447B28bd27aFcdBE0A4342DE1F21204aB, compiled with vyper-0.3.10+913..., ma_last_time=586759692309465234634557968908755352541932762863, balanceOf={}, allowance={}, total_supply=0, nonces={}>
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x0f47AAaE5d89E50d5E1f8Aea8545e1AC3eB2A4ec, compiled with vyper-0.3.10+...1018824675946BF97d626CA7533e0fA, fee_receiver=0xbF929690D8B8eCF6Edbf6e9E05A6baa574341A02, markets={}, market_counts={}>
initial_setup = None

    @given(
>       amount_in=strategy("decimal", min_value=0.001, max_value=10**6),
        i=strategy("uint", min_value=0, max_value=4),
        j=strategy("uint", min_value=0, max_value=4),
    )

tests/pools/general/test_swap_getters.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/test/plugin.py:23: in f
    t(*args, **kwargs)
tests/pools/general/test_swap_getters.py:50: in test_get_dx_underlying
    expected_out = meta_swap.get_dy_underlying(i, j, _amount_in)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

i = 0, j = 1, amount_in = Decimal('0.0010000000')
meta_swap = <contracts/main/CurveStableSwapMetaNG.vy at 0xc2373Ca447B28bd27aFcdBE0A4342DE1F21204aB, compiled with vyper-0.3.10+913..., ma_last_time=586759692309465234634557968908755352541932762863, balanceOf={}, allowance={}, total_supply=0, nonces={}>
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x0f47AAaE5d89E50d5E1f8Aea8545e1AC3eB2A4ec, compiled with vyper-0.3.10+...1018824675946BF97d626CA7533e0fA, fee_receiver=0xbF929690D8B8eCF6Edbf6e9E05A6baa574341A02, markets={}, market_counts={}>
initial_setup = None

    @given(
        amount_in=strategy("decimal", min_value=0.001, max_value=10**6),
        i=strategy("uint", min_value=0, max_value=4),
        j=strategy("uint", min_value=0, max_value=4),
    )
    @settings(**SETTINGS)
    def test_get_dx_underlying(i, j, amount_in, meta_swap, factory, initial_setup):
        base_n_coins = meta_swap.BASE_N_COINS()
    
        if i == j:
            return
    
        # cap max index to base_n_coins + 1 (metapool coin) excluding LP token
        if max(i, j) >= base_n_coins + 1:
            return
    
        if min(i, j) > 0:  # base pool swap: it reverts in view contract
            return
    
        _token_i_precision = 10 ** factory.get_underlying_decimals(meta_swap)[i]
        _amount_in = int(amount_in * _token_i_precision)
>       expected_out = meta_swap.get_dy_underlying(i, j, _amount_in)
E       boa.contracts.base_evm_contract.BoaError: Revert(b'')
E       
E       <contracts/mocks/CurvePool.vy at 0x1f6193c5Edc78b0b3d6a6146422d95182987ef1A, compiled with vyper-0.3.10+9136169>
E       <storage: coins=['0xDBfb79e6876e6429bC08DC869Ae5Dd92a793D92E', '0xbACF999B734C371503E7f7b984F6f4d6f0707FAE', '0xFd84fc9A3E28967F1534D27841Aa89C8162D1F25'], balances=[0, 0, 0], fee=3000000, admin_fee=5000000000, owner=0xab5856ebe4294712921585cd613B223491F1E567, lp_token=0xb45be9e50755359FBcAf9a410BdFfE132f2515Aa, initial_A=20000, future_A=20000, initial_A_time=0, future_A_time=0, admin_actions_deadline=0, transfer_ownership_deadline=0, future_fee=0, future_admin_fee=0, future_owner=0x0000000000000000000000000000000000000000, is_killed=False, kill_deadline=1729515759>
E        <compiler: clamp gt 0>
E         contract "contracts/mocks/CurvePool.vy:262", function "get_virtual_price", line 262:27 
E              261     token_supply: uint256 = ERC20(self.lp_token).totalSupply()
E         ---> 262     return D * PRECISION / token_supply
E         ------------------------------------^
E              263
E        <locals: D=0, token_supply=0>
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0xc2373Ca447B28bd27aFcdBE0A4342DE1F21204aB, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[0, 0], fee=3000000, offpeg_fee_multiplier=20000000000, initial_A=100000, future_A=100000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=0, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759692309465234634557968908755352541932762863, balanceOf={}, allowance={}, total_supply=0, nonces={}>
E        <compiler: external call failed>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:535", function "_stored_rates", line 535:48 
E              534     """
E         ---> 535     rates: uint256[N_COINS] = [rate_multiplier, StableSwap(BASE_POOL).get_virtual_price()]
E         ---------------------------------------------------------^
E              536
E        <locals: rates=[1000000000000000000, 0]>
E       
E       <contracts/main/CurveStableSwapNGViews.vy at 0x145824baf1018824675946BF97d626CA7533e0fA, compiled with vyper-0.3.10+9136169>
E        <compiler: external call failed>
E         contract "contracts/main/CurveStableSwapNGViews.vy:696", function "_get_rates_balances_xp", line 696:42 
E              695
E         ---> 696     rates: DynArray[uint256, MAX_COINS] = StableSwapNG(pool).stored_rates()
E         ---------------------------------------------------^
E              697     balances: DynArray[uint256, MAX_COINS] = StableSwapNG(pool).get_balances()
E        <locals: pool=0xc2373Ca447B28bd27aFcdBE0A4342DE1F21204aB, N_COINS=2, rates=[], balances=[0, 0, 0, 0, 0, 0, 0, 0], xp=[]>
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0xc2373Ca447B28bd27aFcdBE0A4342DE1F21204aB, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[0, 0], fee=3000000, offpeg_fee_multiplier=20000000000, initial_A=100000, future_A=100000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=0, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759692309465234634557968908755352541932762863, balanceOf={}, allowance={}, total_supply=0, nonces={}>
E        <compiler: external call failed>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:1719", function "get_dy_underlying", line 1719:11 
E              1718     """
E         ---> 1719     return StableSwapViews(factory.views_implementation()).get_dy_underlying(i, j, dx, self)
E         ---------------------^
E              1720
E        <locals: i=0, j=1>
E       Falsifying example: f(
E           meta_swap=<contracts/main/CurveStableSwapMetaNG.vy at 0xc2373Ca447B28bd27aFcdBE0A4342DE1F21204aB, compiled with vyper-0.3.10+9136169>
E           <storage: stored_balances=[0, 0], fee=3000000, offpeg_fee_multiplier=20000000000, initial_A=100000, future_A=100000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=0, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759692309465234634557968908755352541932762863, balanceOf={}, allowance={}, total_supply=0, nonces={}>,
E           factory=<contracts/main/CurveStableSwapFactoryNG.vy at 0x0f47AAaE5d89E50d5E1f8Aea8545e1AC3eB2A4ec, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0xab5856ebe4294712921585cd613B223491F1E567, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=2, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0xF0497406bd2612423E3A26785e6Be2b5951f229E, gauge_implementation=0x7249A9f12a02a985592bd8320c0fe48f599c898E, views_implementation=0x145824baf1018824675946BF97d626CA7533e0fA, fee_receiver=0xbF929690D8B8eCF6Edbf6e9E05A6baa574341A02, markets={}, market_counts={}>,
E           initial_setup=None,
E           amount_in=int_to_decimal(10000000),  # or any other generated value
E           i=0,
E           j=1,
E       )
E       Explanation:
E           These lines were always and only run by failing examples:
E               /Users/michael/Documents/projects/stableswap-ng/tests/pools/general/test_swap_getters.py:48
E               /Users/michael/Documents/projects/stableswap-ng/tests/pools/general/test_swap_getters.py:49
E               /Users/michael/pyEnv/crv/lib/python3.12/site-packages/Crypto/Util/_raw_api.py:285
E               /Users/michael/pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:40
E               /Users/michael/pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:74
E               (and 137 more with settings.verbosity >= verbose)

tests/pools/general/test_swap_getters.py:50: BoaError
_ test_get_dx_underlying[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)] _
[gw8] darwin -- Python 3.12.4 /Users/michael/pyEnv/crv/bin/python

meta_swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x7A4ee4A9fc81176545a55B87a497c1A0169aFAaa, compiled with vyper-0.3.10+913..., ma_last_time=586759695372006536923004140079126819427846665976, balanceOf={}, allowance={}, total_supply=0, nonces={}>
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x892df739482E6850Ae4dBfBBbc040cA5c91067cB, compiled with vyper-0.3.10+...9bDF661A3d62370aE105Aa4EFBA0CaB, fee_receiver=0x11D5Cc0dfee84D82ADfE7A80C3CF64090B86f0F1, markets={}, market_counts={}>
initial_setup = None

    @given(
>       amount_in=strategy("decimal", min_value=0.001, max_value=10**6),
        i=strategy("uint", min_value=0, max_value=4),
        j=strategy("uint", min_value=0, max_value=4),
    )

tests/pools/general/test_swap_getters.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../pyEnv/crv/lib/python3.12/site-packages/boa/test/plugin.py:23: in f
    t(*args, **kwargs)
tests/pools/general/test_swap_getters.py:50: in test_get_dx_underlying
    expected_out = meta_swap.get_dy_underlying(i, j, _amount_in)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:1059: in __call__
    return self.contract.marshal_to_python(computation, typ)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:740: in marshal_to_python
    self.handle_error(computation)
../../../pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:36: in handle_error
    raise strip_internal_frames(b) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

i = 0, j = 1, amount_in = Decimal('0.0010000000')
meta_swap = <contracts/main/CurveStableSwapMetaNG.vy at 0x7A4ee4A9fc81176545a55B87a497c1A0169aFAaa, compiled with vyper-0.3.10+913..., ma_last_time=586759695372006536923004140079126819427846665976, balanceOf={}, allowance={}, total_supply=0, nonces={}>
factory = <contracts/main/CurveStableSwapFactoryNG.vy at 0x892df739482E6850Ae4dBfBBbc040cA5c91067cB, compiled with vyper-0.3.10+...9bDF661A3d62370aE105Aa4EFBA0CaB, fee_receiver=0x11D5Cc0dfee84D82ADfE7A80C3CF64090B86f0F1, markets={}, market_counts={}>
initial_setup = None

    @given(
        amount_in=strategy("decimal", min_value=0.001, max_value=10**6),
        i=strategy("uint", min_value=0, max_value=4),
        j=strategy("uint", min_value=0, max_value=4),
    )
    @settings(**SETTINGS)
    def test_get_dx_underlying(i, j, amount_in, meta_swap, factory, initial_setup):
        base_n_coins = meta_swap.BASE_N_COINS()
    
        if i == j:
            return
    
        # cap max index to base_n_coins + 1 (metapool coin) excluding LP token
        if max(i, j) >= base_n_coins + 1:
            return
    
        if min(i, j) > 0:  # base pool swap: it reverts in view contract
            return
    
        _token_i_precision = 10 ** factory.get_underlying_decimals(meta_swap)[i]
        _amount_in = int(amount_in * _token_i_precision)
>       expected_out = meta_swap.get_dy_underlying(i, j, _amount_in)
E       boa.contracts.base_evm_contract.BoaError: Revert(b'')
E       
E       <contracts/mocks/CurvePool.vy at 0xCe759aEd8bb07Fb781c7A658cE466e8220B8BacD, compiled with vyper-0.3.10+9136169>
E       <storage: coins=['0xBFB9DC3417b77e55614976213f9F79bBeaF8b86d', '0x7F02c540231Ca024B98DaAfAAcd3D94c971E816b', '0x55eFA3912c5D8Ee7fa879a4e2a3dA27C2BA120c9'], balances=[0, 0, 0], fee=3000000, admin_fee=5000000000, owner=0x017d729ab0833c87b0b2aC7ed58657AB0fb09E9E, lp_token=0x6f66d95e97d53DFc940df6C33aA8d8D5b2ca1315, initial_A=20000, future_A=20000, initial_A_time=0, future_A_time=0, admin_actions_deadline=0, transfer_ownership_deadline=0, future_fee=0, future_admin_fee=0, future_owner=0x0000000000000000000000000000000000000000, is_killed=False, kill_deadline=1729515768>
E        <compiler: clamp gt 0>
E         contract "contracts/mocks/CurvePool.vy:262", function "get_virtual_price", line 262:27 
E              261     token_supply: uint256 = ERC20(self.lp_token).totalSupply()
E         ---> 262     return D * PRECISION / token_supply
E         ------------------------------------^
E              263
E        <locals: D=0, token_supply=0>
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0x7A4ee4A9fc81176545a55B87a497c1A0169aFAaa, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[0, 0], fee=4000000, offpeg_fee_multiplier=20000000000, initial_A=50000, future_A=50000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=0, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759695372006536923004140079126819427846665976, balanceOf={}, allowance={}, total_supply=0, nonces={}>
E        <compiler: external call failed>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:535", function "_stored_rates", line 535:48 
E              534     """
E         ---> 535     rates: uint256[N_COINS] = [rate_multiplier, StableSwap(BASE_POOL).get_virtual_price()]
E         ---------------------------------------------------------^
E              536
E        <locals: rates=[1000000000000000000, 0]>
E       
E       <contracts/main/CurveStableSwapNGViews.vy at 0x9A6AbC5d29bDF661A3d62370aE105Aa4EFBA0CaB, compiled with vyper-0.3.10+9136169>
E        <compiler: external call failed>
E         contract "contracts/main/CurveStableSwapNGViews.vy:696", function "_get_rates_balances_xp", line 696:42 
E              695
E         ---> 696     rates: DynArray[uint256, MAX_COINS] = StableSwapNG(pool).stored_rates()
E         ---------------------------------------------------^
E              697     balances: DynArray[uint256, MAX_COINS] = StableSwapNG(pool).get_balances()
E        <locals: pool=0x7A4ee4A9fc81176545a55B87a497c1A0169aFAaa, N_COINS=2, rates=[], balances=[0, 0, 0, 0, 0, 0, 0, 0], xp=[]>
E       
E       <contracts/main/CurveStableSwapMetaNG.vy at 0x7A4ee4A9fc81176545a55B87a497c1A0169aFAaa, compiled with vyper-0.3.10+9136169>
E       <storage: stored_balances=[0, 0], fee=4000000, offpeg_fee_multiplier=20000000000, initial_A=50000, future_A=50000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=0, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759695372006536923004140079126819427846665976, balanceOf={}, allowance={}, total_supply=0, nonces={}>
E        <compiler: external call failed>
E         contract "contracts/main/CurveStableSwapMetaNG.vy:1719", function "get_dy_underlying", line 1719:11 
E              1718     """
E         ---> 1719     return StableSwapViews(factory.views_implementation()).get_dy_underlying(i, j, dx, self)
E         ---------------------^
E              1720
E        <locals: i=0, j=1>
E       Falsifying example: f(
E           meta_swap=<contracts/main/CurveStableSwapMetaNG.vy at 0x7A4ee4A9fc81176545a55B87a497c1A0169aFAaa, compiled with vyper-0.3.10+9136169>
E           <storage: stored_balances=[0, 0], fee=4000000, offpeg_fee_multiplier=20000000000, initial_A=50000, future_A=50000, initial_A_time=0, future_A_time=0, admin_balances=[0, 0], last_prices_packed=340282366920938463463374607431768211457000000000000000000, last_D_packed=0, ma_exp_time=866, D_ma_time=62324, ma_last_time=586759695372006536923004140079126819427846665976, balanceOf={}, allowance={}, total_supply=0, nonces={}>,
E           factory=<contracts/main/CurveStableSwapFactoryNG.vy at 0x892df739482E6850Ae4dBfBBbc040cA5c91067cB, compiled with vyper-0.3.10+9136169>
E           <storage: admin=0x017d729ab0833c87b0b2aC7ed58657AB0fb09E9E, future_admin=0x0000000000000000000000000000000000000000, asset_types={}, pool_list=<truncated>, pool_count=2, pool_data={}, base_pool_list=<truncated>, base_pool_count=1, base_pool_data={}, base_pool_assets={}, pool_implementations={}, metapool_implementations={}, math_implementation=0x89a027aa542782DaF6aB0e82c51b438CC80f0404, gauge_implementation=0xF3642970E160ab64753143F941fCe9da851ECA51, views_implementation=0x9A6AbC5d29bDF661A3d62370aE105Aa4EFBA0CaB, fee_receiver=0x11D5Cc0dfee84D82ADfE7A80C3CF64090B86f0F1, markets={}, market_counts={}>,
E           initial_setup=None,
E           amount_in=int_to_decimal(10000000),  # or any other generated value
E           i=0,
E           j=1,
E       )
E       Explanation:
E           These lines were always and only run by failing examples:
E               /Users/michael/Documents/projects/stableswap-ng/tests/pools/general/test_swap_getters.py:48
E               /Users/michael/Documents/projects/stableswap-ng/tests/pools/general/test_swap_getters.py:49
E               /Users/michael/pyEnv/crv/lib/python3.12/site-packages/Crypto/Util/_raw_api.py:285
E               /Users/michael/pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:40
E               /Users/michael/pyEnv/crv/lib/python3.12/site-packages/boa/contracts/base_evm_contract.py:74
E               (and 137 more with settings.verbosity >= verbose)

tests/pools/general/test_swap_getters.py:50: BoaError
=============================== warnings summary ===============================
../../../pyEnv/crv/lib/python3.12/site-packages/_pytest/config/__init__.py:754: 11 warnings
  /Users/michael/pyEnv/crv/lib/python3.12/site-packages/_pytest/config/__init__.py:754: PytestAssertRewriteWarning: Module already imported so cannot be rewritten: tests.fixtures.constants
    self.import_plugin(import_spec)

tests/pools/meta/test_get_dy_underlying_fix.py::test_broken_pool_is_fixed
  /Users/michael/pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:127: UserWarning: casted bytecode does not match compiled bytecode at <contracts/main/CurveStableSwapMetaNG.vy at 0x9e10f9Fb6F0D32B350CEe2618662243d4f24C64a, compiled with vyper-0.3.10+9136169>
  <storage: stored_balances=[0, 0], fee=0, offpeg_fee_multiplier=0, initial_A=0, future_A=0, initial_A_time=0, future_A_time=0, admin_balances=[], last_prices_packed=0, last_D_packed=0, ma_exp_time=0, D_ma_time=0, ma_last_time=0, balanceOf={}, allowance={}, total_supply=0, nonces={}>
    ret._set_bytecode(bytecode)

tests/pools/meta/test_get_dy_underlying_fix.py::test_broken_pool_is_fixed
  /Users/michael/pyEnv/crv/lib/python3.12/site-packages/boa/contracts/vyper/vyper_contract.py:127: UserWarning: casted bytecode does not match compiled bytecode at <contracts/main/CurveStableSwapNGViews.vy at 0xe0B15824862f3222fdFeD99FeBD0f7e0EC26E1FA, compiled with vyper-0.3.10+9136169>
    ret._set_bytecode(bytecode)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/pools/exchange/test_exchange_reverts.py::test_min_dy_too_high[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-1-0]
FAILED tests/pools/exchange/test_exchange_reverts.py::test_min_dy_too_high[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-1-0]
FAILED tests/pools/exchange/test_exchange_reverts.py::test_min_dy_too_high[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1]
FAILED tests/pools/exchange/test_exchange.py::test_min_dy_imbalanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-1-0]
FAILED tests/pools/exchange/test_exchange_reverts.py::test_insufficient_balance[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1]
FAILED tests/pools/exchange/test_exchange_reverts.py::test_min_dy_too_high[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1]
FAILED tests/pools/exchange/test_exchange.py::test_min_dy_imbalanced[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-1-0]
FAILED tests/pools/exchange/test_exchange_reverts.py::test_insufficient_balance[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1]
FAILED tests/pools/exchange/test_exchange_receiver.py::test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/factory/test_factory_forked.py::test_add_base_pool - boa.contrac...
FAILED tests/pools/exchange/test_exchange_receiver.py::test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/exchange/test_exchange_receiver.py::test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/exchange/test_exchange_receiver.py::test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/exchange/test_exchange_receiver.py::test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/exchange/test_exchange_receiver.py::test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/exchange/test_exchange_receiver.py::test_remove_imbalanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/exchange/test_exchange_receiver.py::test_remove_imbalanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/exchange/test_exchange_receiver.py::test_remove_imbalanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/exchange/test_exchange_receiver.py::test_remove_imbalanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/exchange/test_exchange_receiver.py::test_remove_imbalanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/exchange/test_exchange_receiver.py::test_remove_imbalanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_fees.py::test_withdraw_one_coin[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-0-1]
FAILED tests/pools/general/test_fees.py::test_withdraw_one_coin[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-1-0]
FAILED tests/pools/exchange/test_exchange_reverts.py::test_min_dy_too_high[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-1-0]
FAILED tests/pools/general/test_fees.py::test_withdraw_one_coin[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_insufficient_time[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_fees.py::test_withdraw_one_coin[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-1-0]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_down[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_down[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_down[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_down[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_down[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_down[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_down[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_down[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_down[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_down[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_fees.py::test_withdraw_one_coin[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-0-1]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_down[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_stop_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_stop_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_fees.py::test_withdraw_one_coin[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-1-0]
FAILED tests/pools/general/test_ramp_A.py::test_stop_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_stop_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_stop_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_fees.py::test_withdraw_one_coin[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1]
FAILED tests/pools/general/test_ramp_A.py::test_stop_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_stop_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_stop_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_fees.py::test_withdraw_one_coin[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-1-0]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_stop_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_stop_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_stop_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_stop_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_only_owner[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_only_owner[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_only_owner[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_only_owner[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_only_owner[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_only_owner[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_only_owner[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_only_owner[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_only_owner[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_only_owner[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_fees.py::test_no_fees[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_only_owner[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_only_owner[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_insufficient_time[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_insufficient_time[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_partial[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_insufficient_time[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_fees.py::test_no_fees[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_insufficient_time[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_insufficient_time[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_final[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_insufficient_time[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_final[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_partial[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_insufficient_time[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_final[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_final[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_partial[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_final[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/exchange/test_exchange.py::test_min_dy[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_final[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_final[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_partial[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_final[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_insufficient_time[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_final[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_insufficient_time[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_final[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_partial[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_insufficient_time[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_fees.py::test_no_fees[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_final[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_insufficient_time[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_final[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_up[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_partial[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_up[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_fees.py::test_no_fees[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_up[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_up[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_up[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_up[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_up[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_up[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_up[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_up[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_up[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_up[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_ramp_A.py::test_ramp_A_value_down[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/exchange/test_exchange.py::test_min_dy[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_liquidity[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_liquidity[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_liquidity[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_liquidity[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_liquidity[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_liquidity[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)-2]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)-5]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)-10]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-2]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-5]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=plain)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-10]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=plain)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-2]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=oracle)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-5]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=oracle)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-10]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-2]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-5]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_one[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity.py::test_remove_liquidity[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-10]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-2]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-5]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-10]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-2]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-5]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_amount_received[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_remove_balanced[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-10]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_expected_vs_actual[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_amount_received[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-1-0]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_no_total_supply[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)-1-1]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_no_total_supply[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_no_total_supply[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_no_total_supply[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_no_total_supply[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_expected_vs_actual[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-1-0]
FAILED tests/pools/liquidity/test_remove_liquidity_imbalance.py::test_no_total_supply[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)-1-1]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-1-0]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-1-1]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-1-0]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_amount_received[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-1-1]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_amount_received[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_amount_received[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_amount_received[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_amount_received[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)-1-0]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_amount_received[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)-1-1]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-1-0]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_lp_token_balance[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-1-1]
FAILED tests/pools/meta/test_exchange_underlying_reverts.py::test_insufficient_balance[(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1]
FAILED tests/pools/meta/test_exchange_underlying_reverts.py::test_insufficient_balance[(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-2]
FAILED tests/pools/general/test_swap_getters.py::test_get_dx_underlying[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/meta/test_exchange_underlying_reverts.py::test_insufficient_balance[(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-3]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_expected_vs_actual[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_expected_vs_actual[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_expected_vs_actual[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_expected_vs_actual[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)-1]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_expected_vs_actual[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0]
FAILED tests/pools/liquidity/test_remove_liquidity_one_coin.py::test_expected_vs_actual[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-1]
FAILED tests/pools/meta/test_exchange_underlying_reverts.py::test_insufficient_balance[(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-1]
FAILED tests/pools/meta/test_exchange_underlying_reverts.py::test_insufficient_balance[(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-2]
FAILED tests/pools/meta/test_exchange_underlying_reverts.py::test_insufficient_balance[(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)-0-3]
FAILED tests/pools/meta/test_receiver_meta.py::test_exchange_underlying[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/meta/test_receiver_meta.py::test_exchange_underlying[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/meta/test_receiver_meta.py::test_exchange_underlying[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/meta/test_receiver_meta.py::test_exchange_underlying[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/meta/test_get_dy_underlying_fix.py::test_broken_pool_is_fixed
FAILED tests/pools/meta/test_receiver_meta.py::test_exchange_underlying[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/meta/test_receiver_meta.py::test_exchange_underlying[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit_contract[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit_contract[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit_contract[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit_contract[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit_contract[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit_contract[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_swap_getters.py::test_get_dx_underlying[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit_contract[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit_contract[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/meta/test_receiver_meta.py::test_exchange_underlying[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit_contract[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/meta/test_receiver_meta.py::test_exchange_underlying[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit_contract[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit_contract[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/token/test_token_approve.py::test_permit_contract[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/token/test_token_transfer_from.py::test_transfer_event_fires[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/token/test_token_transfer_from.py::test_transfer_event_fires[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/token/test_token_transfer_from.py::test_transfer_event_fires[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/token/test_token_transfer_from.py::test_transfer_event_fires[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/token/test_token_transfer_from.py::test_transfer_event_fires[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/token/test_token_transfer_from.py::test_transfer_event_fires[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/token/test_token_transfer_from.py::test_transfer_event_fires[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/token/test_token_transfer_from.py::test_transfer_event_fires[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/token/test_token_transfer_from.py::test_transfer_event_fires[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/token/test_token_transfer_from.py::test_transfer_event_fires[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/token/test_token_transfer_from.py::test_transfer_event_fires[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/token/test_token_transfer_from.py::test_transfer_event_fires[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_swap_getters.py::test_get_dx_underlying[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
FAILED tests/pools/general/test_swap_getters.py::test_get_dx_underlying[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
FAILED tests/pools/general/test_swap_getters.py::test_get_dx_underlying[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
FAILED tests/pools/general/test_swap_getters.py::test_get_dx_underlying[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
ERROR tests/factory/test_factory_forked.py::test_add_base_pool - eth_utils.ex...
ERROR tests/gauge/test_rewards.py::test_set_rewards_no_deposit[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_set_rewards_no_deposit[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_set_rewards_no_deposit[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_set_rewards_no_deposit[(PoolType=basic)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_set_rewards_no_deposit[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_set_rewards_no_deposit[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_set_rewards_no_deposit[(PoolType=meta)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_set_rewards_no_deposit[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_set_rewards_no_deposit[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_set_rewards_no_deposit[(PoolType=meta)-(PoolTokenTypes=rebasing+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_multiple_reward_tokens[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_multiple_reward_tokens[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_multiple_reward_tokens[(PoolType=basic)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_multiple_reward_tokens[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_multiple_reward_tokens[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_multiple_reward_tokens[(PoolType=basic)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_multiple_reward_tokens[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_multiple_reward_tokens[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_multiple_reward_tokens[(PoolType=meta)-(PoolTokenTypes=oracle+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_multiple_reward_tokens[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=plain)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_multiple_reward_tokens[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=oracle)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_multiple_reward_tokens[(PoolType=meta)-(PoolTokenTypes=plain+rebasing)-(MetaTokenType=rebasing)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_set_rewards_no_deposit[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_cant_exceed_max[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_cant_exceed_max[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_set_rewards_no_deposit[(PoolType=basic)-(PoolTokenTypes=plain+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_cant_exceed_max[(PoolType=basic)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_cant_exceed_max[(PoolType=basic)-(PoolTokenTypes=plain+plain)-(MetaTokenType=plain)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_cant_exceed_max[(PoolType=basic)-(PoolTokenTypes=plain+plain)-(MetaTokenType=oracle)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_cant_exceed_max[(PoolType=basic)-(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_cant_exceed_max[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_cant_exceed_max[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_cant_exceed_max[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=rebasing)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_cant_exceed_max[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=plain)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_cant_exceed_max[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=oracle)-(Decimals=18,18)]
ERROR tests/gauge/test_rewards.py::test_cant_exceed_max[(PoolType=meta)-(PoolTokenTypes=plain+plain)-(MetaTokenType=rebasing)-(Decimals=18,18)]
ERROR tests/pools/meta/test_get_dy_underlying_fix.py::test_broken_pool_is_fixed
ERROR tests/token/test_token_transfer_from.py::test_transfer_event_fires[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=oracle)-(Decimals=18,18)]
ERROR tests/token/test_token_transfer_from.py::test_transfer_event_fires[(PoolType=meta)-(PoolTokenTypes=oracle+oracle)-(MetaTokenType=plain)-(Decimals=18,18)]
= 265 failed, 1969 passed, 70 skipped, 23 xfailed, 13 warnings, 40 errors in 104.53s (0:01:44) =
